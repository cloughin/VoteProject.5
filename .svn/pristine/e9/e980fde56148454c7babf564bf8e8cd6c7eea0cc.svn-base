//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteZipNew
  {
    #region votezipnew Database

    public static partial class VoteZipNewDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=votezipnew";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteZipNewDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteZipNew.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVoteZipNew.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, DbConnection cn)
      {
        return GetCommand(cmdText, cn, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion votezipnew Database

    #region votezipnew.LastUpdate

    public partial class LastUpdateRow : DataRow
    {
      internal LastUpdateRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime LastUpdateTime
      {
        get { return (DateTime) this["LastUpdateTime"]; }
        set { this["LastUpdateTime"] = value; }
      }
    }

    [Serializable]
    public partial class LastUpdateTable : TypedTableBase<LastUpdateRow>
    {
      public LastUpdateRow this[int index] { get { return (LastUpdateRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LastUpdateRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LastUpdateTable(); }

      new public LastUpdateRow NewRow() { return (LastUpdateRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LastUpdateRow(rb); }

      protected override Type GetRowType()
      { return typeof(LastUpdateRow); }

      public void RemoveRow(LastUpdateRow row) { this.Rows.Remove(row); }

      public LastUpdateRow NewRow(Int32 id, DateTime lastUpdateTime)
      {
        LastUpdateRow row = NewRow();
        row.Id = id;
        row.LastUpdateTime = lastUpdateTime;
        return row;
      }

      public void AddRow(Int32 id, DateTime lastUpdateTime)
      {
        LastUpdateRow row = NewRow(id, lastUpdateTime);
        AddRow(row);
      }

      public LastUpdateRow NewRow(DateTime lastUpdateTime)
      {
        LastUpdateRow row = NewRow();
        row.LastUpdateTime = lastUpdateTime;
        return row;
      }

      public void AddRow(DateTime lastUpdateTime)
      {
        LastUpdateRow row = NewRow(lastUpdateTime);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LastUpdateTimeColumn { get { return this.Columns["LastUpdateTime"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("LastUpdateTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LastUpdateTable() : this(ColumnSet.All) { }

      public LastUpdateTable(ColumnSet columnSet)
      {
        this.TableName = "LastUpdate";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LastUpdateTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LastUpdate
    {
      public const string TableName = "LastUpdate";

      public enum Column { Id, LastUpdateTime }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LastUpdateTime, "LastUpdateTime" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LastUpdate";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime lastUpdateTime)
      {
        return Insert(id, lastUpdateTime, -1);
      }

      public static Int32 Insert(Int32 id, DateTime lastUpdateTime, int commandTimeout)
      {
        string cmdText = "INSERT INTO LastUpdate (Id,LastUpdateTime) VALUES (@Id,@LastUpdateTime)";
        switch (VoteZipNewDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "Id", id);
        VoteZipNewDb.AddCommandParameter(cmd, "LastUpdateTime", lastUpdateTime);
        return Convert.ToInt32(VoteZipNewDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime lastUpdateTime)
      {
        return Insert(lastUpdateTime, -1);
      }

      public static Int32 Insert(DateTime lastUpdateTime, int commandTimeout)
      {
        string cmdText = "INSERT INTO LastUpdate (LastUpdateTime) VALUES (@LastUpdateTime)";
        switch (VoteZipNewDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "LastUpdateTime", lastUpdateTime);
        return Convert.ToInt32(VoteZipNewDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LastUpdateTime FROM LastUpdate";
        }
      }

      public static LastUpdateTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static LastUpdateTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT Id,LastUpdateTime FROM LastUpdate";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LastUpdateTable.ColumnSet.All);
      }

      public static LastUpdateTable FillTable(DbCommand command)
      {
        return FillTable(command, LastUpdateTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LastUpdateTable FillTable(DbCommand command, LastUpdateTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          LastUpdateTable table = new LastUpdateTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LastUpdateTable table)
      {
        UpdateTable(table, LastUpdateTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LastUpdateTable table, LastUpdateTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LastUpdateTable table, int commandTimeout)
      {
        UpdateTable(table, LastUpdateTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LastUpdateTable table, LastUpdateTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(LastUpdateTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LastUpdateTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LastUpdateTable table, LastUpdateTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LastUpdateTimeColumnName { get { return "LastUpdateTime"; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LastUpdate";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetId()
      {
        return _GetId(null);
      }

      public static Int32 GetId(Int32 defaultValue)
      {
        return _GetId(defaultValue).Value;
      }

      private static Int32? _GetId(Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Id FROM LastUpdate";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetLastUpdateTime()
      {
        return _GetLastUpdateTime(null);
      }

      public static DateTime GetLastUpdateTime(DateTime defaultValue)
      {
        return _GetLastUpdateTime(defaultValue).Value;
      }

      private static DateTime? _GetLastUpdateTime(DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdateTime FROM LastUpdate";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM LastUpdate";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdateId(Int32 newValue)
      {
        string cmdText = "UPDATE LastUpdate SET Id=@newValue";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdateTime(DateTime newValue)
      {
        string cmdText = "UPDATE LastUpdate SET LastUpdateTime=@newValue";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE LastUpdate SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LastUpdateTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LastUpdateTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LastUpdate()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.LastUpdate

    #region votezipnew.USZD

    public partial class UszdRow : DataRow
    {
      internal UszdRow(DataRowBuilder rb) : base(rb) {}

      public String Zip5
      {
        get { return this["ZIP5"] as String; }
        set { if (value == null) this["ZIP5"] = DBNull.Value; else this["ZIP5"] = value; }
      }

      public String Zip4
      {
        get { return this["ZIP4"] as String; }
        set { if (value == null) this["ZIP4"] = DBNull.Value; else this["ZIP4"] = value; }
      }

      public String Congress
      {
        get { return this["CD"] as String; }
        set { if (value == null) this["CD"] = DBNull.Value; else this["CD"] = value; }
      }

      public String StateSenate
      {
        get { return this["SD"] as String; }
        set { if (value == null) this["SD"] = DBNull.Value; else this["SD"] = value; }
      }

      public String StateHouse
      {
        get { return this["HD"] as String; }
        set { if (value == null) this["HD"] = DBNull.Value; else this["HD"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["ST"] as String; }
        set { if (value == null) this["ST"] = DBNull.Value; else this["ST"] = value; }
      }

      public String County
      {
        get { return this["CNTY"] as String; }
        set { if (value == null) this["CNTY"] = DBNull.Value; else this["CNTY"] = value; }
      }

      public String C
      {
        get { return this["C"] as String; }
        set { if (value == null) this["C"] = DBNull.Value; else this["C"] = value; }
      }

      public String RT
      {
        get { return this["RT"] as String; }
        set { if (value == null) this["RT"] = DBNull.Value; else this["RT"] = value; }
      }

      public String F
      {
        get { return this["F"] as String; }
        set { if (value == null) this["F"] = DBNull.Value; else this["F"] = value; }
      }
    }

    [Serializable]
    public partial class UszdTable : TypedTableBase<UszdRow>
    {
      public UszdRow this[int index] { get { return (UszdRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(UszdRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new UszdTable(); }

      new public UszdRow NewRow() { return (UszdRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new UszdRow(rb); }

      protected override Type GetRowType()
      { return typeof(UszdRow); }

      public void RemoveRow(UszdRow row) { this.Rows.Remove(row); }

      public UszdRow NewRow(String zip5, String zip4, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String c, String rt, String f)
      {
        UszdRow row = NewRow();
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.LdsStateCode = ldsStateCode;
        row.County = county;
        row.C = c;
        row.RT = rt;
        row.F = f;
        return row;
      }

      public void AddRow(String zip5, String zip4, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String c, String rt, String f)
      {
        UszdRow row = NewRow(zip5, zip4, congress, stateSenate, stateHouse, ldsStateCode, county, c, rt, f);
        AddRow(row);
      }

      public DataColumn Zip5Column { get { return this.Columns["ZIP5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["ZIP4"]; } }

      public DataColumn CongressColumn { get { return this.Columns["CD"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["SD"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["HD"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["ST"]; } }

      public DataColumn CountyColumn { get { return this.Columns["CNTY"]; } }

      public DataColumn CColumn { get { return this.Columns["C"]; } }

      public DataColumn RTColumn { get { return this.Columns["RT"]; } }

      public DataColumn FColumn { get { return this.Columns["F"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZIP5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ZIP4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CD", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ST", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CNTY", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("C", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RT", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("F", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public UszdTable() : this(ColumnSet.All) { }

      public UszdTable(ColumnSet columnSet)
      {
        this.TableName = "USZD";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected UszdTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Uszd
    {
      public const string TableName = "USZD";

      public enum Column { Zip5, Zip4, Congress, StateSenate, StateHouse, LdsStateCode, County, C, RT, F }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Zip5, "ZIP5" },
        { Column.Zip4, "ZIP4" },
        { Column.Congress, "CD" },
        { Column.StateSenate, "SD" },
        { Column.StateHouse, "HD" },
        { Column.LdsStateCode, "ST" },
        { Column.County, "CNTY" },
        { Column.C, "C" },
        { Column.RT, "RT" },
        { Column.F, "F" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM USZD";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zip5, String zip4, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String c, String rt, String f)
      {
        Insert(zip5, zip4, congress, stateSenate, stateHouse, ldsStateCode, county, c, rt, f, -1);
      }

      public static void Insert(String zip5, String zip4, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String c, String rt, String f, int commandTimeout)
      {
        string cmdText = "INSERT INTO USZD (ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F) VALUES (@Zip5,@Zip4,@Congress,@StateSenate,@StateHouse,@LdsStateCode,@County,@C,@RT,@F)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "C", c);
        VoteZipNewDb.AddCommandParameter(cmd, "RT", rt);
        VoteZipNewDb.AddCommandParameter(cmd, "F", f);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZD";
        }
      }

      public static UszdTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static UszdTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZD";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, UszdTable.ColumnSet.All);
      }

      public static UszdTable FillTable(DbCommand command)
      {
        return FillTable(command, UszdTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static UszdTable FillTable(DbCommand command, UszdTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          UszdTable table = new UszdTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(UszdTable table)
      {
        UpdateTable(table, UszdTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UszdTable table, UszdTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UszdTable table, int commandTimeout)
      {
        UpdateTable(table, UszdTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UszdTable table, UszdTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(UszdTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, UszdTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(UszdTable table, UszdTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string Zip5ColumnName { get { return "ZIP5"; } }

      public static string Zip4ColumnName { get { return "ZIP4"; } }

      public static string CongressColumnName { get { return "CD"; } }

      public static string StateSenateColumnName { get { return "SD"; } }

      public static string StateHouseColumnName { get { return "HD"; } }

      public static string LdsStateCodeColumnName { get { return "ST"; } }

      public static string CountyColumnName { get { return "CNTY"; } }

      public static string CColumnName { get { return "C"; } }

      public static string RTColumnName { get { return "RT"; } }

      public static string FColumnName { get { return "F"; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int CongressMaxLength { get { return 2; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int CMaxLength { get { return 1; } }

      public static int RTMaxLength { get { return 2; } }

      public static int FMaxLength { get { return 1; } }

      public static bool Zip5Zip4Exists(String zip5, String zip4)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZip5ByZip5Zip4(String zip5, String zip4)
      {
        return GetZip5ByZip5Zip4(zip5, zip4, null);
      }

      public static String GetZip5ByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZIP5 FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip4ByZip5Zip4(String zip5, String zip4)
      {
        return GetZip4ByZip5Zip4(zip5, zip4, null);
      }

      public static String GetZip4ByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZIP4 FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByZip5Zip4(String zip5, String zip4)
      {
        return GetCongressByZip5Zip4(zip5, zip4, null);
      }

      public static String GetCongressByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CD FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByZip5Zip4(String zip5, String zip4)
      {
        return GetStateSenateByZip5Zip4(zip5, zip4, null);
      }

      public static String GetStateSenateByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT SD FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByZip5Zip4(String zip5, String zip4)
      {
        return GetStateHouseByZip5Zip4(zip5, zip4, null);
      }

      public static String GetStateHouseByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT HD FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByZip5Zip4(String zip5, String zip4)
      {
        return GetLdsStateCodeByZip5Zip4(zip5, zip4, null);
      }

      public static String GetLdsStateCodeByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ST FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByZip5Zip4(String zip5, String zip4)
      {
        return GetCountyByZip5Zip4(zip5, zip4, null);
      }

      public static String GetCountyByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CNTY FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCByZip5Zip4(String zip5, String zip4)
      {
        return GetCByZip5Zip4(zip5, zip4, null);
      }

      public static String GetCByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT C FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRTByZip5Zip4(String zip5, String zip4)
      {
        return GetRTByZip5Zip4(zip5, zip4, null);
      }

      public static String GetRTByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RT FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFByZip5Zip4(String zip5, String zip4)
      {
        return GetFByZip5Zip4(zip5, zip4, null);
      }

      public static String GetFByZip5Zip4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT F FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZip5Zip4(Column _column, String zip5, String zip4)
      {
        object result;
        string cmdText = "SELECT {0} FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static UszdTable GetDataByZip5Zip4(String zip5, String zip4)
      {
        return GetDataByZip5Zip4(zip5, zip4, -1);
      }

      public static UszdTable GetDataByZip5Zip4(String zip5, String zip4, int commandTimeout)
      {
        string cmdText = "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        return FillTable(cmd, UszdTable.ColumnSet.All);
      }

      public static int UpdateZip5ByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET ZIP5=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET ZIP4=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET CD=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET SD=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET HD=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET ST=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET CNTY=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET C=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRTByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET RT=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFByZip5Zip4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET F=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZip5Zip4(Column _column, object newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZD SET {0}=@newValue WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZip5Zip4(String zip5, String zip4)
      {
        return DeleteByZip5Zip4(zip5, zip4, -1);
      }

      public static int DeleteByZip5Zip4(String zip5, String zip4, int commandTimeout)
      {
        string cmdText = "DELETE FROM USZD WHERE ZIP5=@Zip5 AND ZIP4=@Zip4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "Zip4", zip4);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(UszdTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case UszdTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Uszd()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.USZD

    #region votezipnew.USZDold

    public partial class USZDoldRow : DataRow
    {
      internal USZDoldRow(DataRowBuilder rb) : base(rb) {}

      public String ZIP5
      {
        get { return this["ZIP5"] as String; }
        set { if (value == null) this["ZIP5"] = DBNull.Value; else this["ZIP5"] = value; }
      }

      public String ZIP4
      {
        get { return this["ZIP4"] as String; }
        set { if (value == null) this["ZIP4"] = DBNull.Value; else this["ZIP4"] = value; }
      }

      public String CD
      {
        get { return this["CD"] as String; }
        set { if (value == null) this["CD"] = DBNull.Value; else this["CD"] = value; }
      }

      public String SD
      {
        get { return this["SD"] as String; }
        set { if (value == null) this["SD"] = DBNull.Value; else this["SD"] = value; }
      }

      public String HD
      {
        get { return this["HD"] as String; }
        set { if (value == null) this["HD"] = DBNull.Value; else this["HD"] = value; }
      }

      public String ST
      {
        get { return this["ST"] as String; }
        set { if (value == null) this["ST"] = DBNull.Value; else this["ST"] = value; }
      }

      public String CNTY
      {
        get { return this["CNTY"] as String; }
        set { if (value == null) this["CNTY"] = DBNull.Value; else this["CNTY"] = value; }
      }

      public String C
      {
        get { return this["C"] as String; }
        set { if (value == null) this["C"] = DBNull.Value; else this["C"] = value; }
      }

      public String RT
      {
        get { return this["RT"] as String; }
        set { if (value == null) this["RT"] = DBNull.Value; else this["RT"] = value; }
      }

      public String F
      {
        get { return this["F"] as String; }
        set { if (value == null) this["F"] = DBNull.Value; else this["F"] = value; }
      }
    }

    [Serializable]
    public partial class USZDoldTable : TypedTableBase<USZDoldRow>
    {
      public USZDoldRow this[int index] { get { return (USZDoldRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(USZDoldRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new USZDoldTable(); }

      new public USZDoldRow NewRow() { return (USZDoldRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new USZDoldRow(rb); }

      protected override Type GetRowType()
      { return typeof(USZDoldRow); }

      public void RemoveRow(USZDoldRow row) { this.Rows.Remove(row); }

      public USZDoldRow NewRow(String zip5, String zip4, String cd, String sd, String hd, String st, String cnty, String c, String rt, String f)
      {
        USZDoldRow row = NewRow();
        row.ZIP5 = zip5;
        row.ZIP4 = zip4;
        row.CD = cd;
        row.SD = sd;
        row.HD = hd;
        row.ST = st;
        row.CNTY = cnty;
        row.C = c;
        row.RT = rt;
        row.F = f;
        return row;
      }

      public void AddRow(String zip5, String zip4, String cd, String sd, String hd, String st, String cnty, String c, String rt, String f)
      {
        USZDoldRow row = NewRow(zip5, zip4, cd, sd, hd, st, cnty, c, rt, f);
        AddRow(row);
      }

      public DataColumn ZIP5Column { get { return this.Columns["ZIP5"]; } }

      public DataColumn ZIP4Column { get { return this.Columns["ZIP4"]; } }

      public DataColumn CDColumn { get { return this.Columns["CD"]; } }

      public DataColumn SDColumn { get { return this.Columns["SD"]; } }

      public DataColumn HDColumn { get { return this.Columns["HD"]; } }

      public DataColumn STColumn { get { return this.Columns["ST"]; } }

      public DataColumn CNTYColumn { get { return this.Columns["CNTY"]; } }

      public DataColumn CColumn { get { return this.Columns["C"]; } }

      public DataColumn RTColumn { get { return this.Columns["RT"]; } }

      public DataColumn FColumn { get { return this.Columns["F"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZIP5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ZIP4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CD", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HD", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ST", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CNTY", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("C", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("RT", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("F", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public USZDoldTable() : this(ColumnSet.All) { }

      public USZDoldTable(ColumnSet columnSet)
      {
        this.TableName = "USZDold";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected USZDoldTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class USZDold
    {
      public const string TableName = "USZDold";

      public enum Column { ZIP5, ZIP4, CD, SD, HD, ST, CNTY, C, RT, F }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZIP5, "ZIP5" },
        { Column.ZIP4, "ZIP4" },
        { Column.CD, "CD" },
        { Column.SD, "SD" },
        { Column.HD, "HD" },
        { Column.ST, "ST" },
        { Column.CNTY, "CNTY" },
        { Column.C, "C" },
        { Column.RT, "RT" },
        { Column.F, "F" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM USZDold";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zip5, String zip4, String cd, String sd, String hd, String st, String cnty, String c, String rt, String f)
      {
        Insert(zip5, zip4, cd, sd, hd, st, cnty, c, rt, f, -1);
      }

      public static void Insert(String zip5, String zip4, String cd, String sd, String hd, String st, String cnty, String c, String rt, String f, int commandTimeout)
      {
        string cmdText = "INSERT INTO USZDold (ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F) VALUES (@ZIP5,@ZIP4,@CD,@SD,@HD,@ST,@CNTY,@C,@RT,@F)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "CD", cd);
        VoteZipNewDb.AddCommandParameter(cmd, "SD", sd);
        VoteZipNewDb.AddCommandParameter(cmd, "HD", hd);
        VoteZipNewDb.AddCommandParameter(cmd, "ST", st);
        VoteZipNewDb.AddCommandParameter(cmd, "CNTY", cnty);
        VoteZipNewDb.AddCommandParameter(cmd, "C", c);
        VoteZipNewDb.AddCommandParameter(cmd, "RT", rt);
        VoteZipNewDb.AddCommandParameter(cmd, "F", f);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZDold";
        }
      }

      public static USZDoldTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static USZDoldTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZDold";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, USZDoldTable.ColumnSet.All);
      }

      public static USZDoldTable FillTable(DbCommand command)
      {
        return FillTable(command, USZDoldTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static USZDoldTable FillTable(DbCommand command, USZDoldTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          USZDoldTable table = new USZDoldTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(USZDoldTable table)
      {
        UpdateTable(table, USZDoldTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(USZDoldTable table, USZDoldTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(USZDoldTable table, int commandTimeout)
      {
        UpdateTable(table, USZDoldTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(USZDoldTable table, USZDoldTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(USZDoldTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, USZDoldTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(USZDoldTable table, USZDoldTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZIP5ColumnName { get { return "ZIP5"; } }

      public static string ZIP4ColumnName { get { return "ZIP4"; } }

      public static string CDColumnName { get { return "CD"; } }

      public static string SDColumnName { get { return "SD"; } }

      public static string HDColumnName { get { return "HD"; } }

      public static string STColumnName { get { return "ST"; } }

      public static string CNTYColumnName { get { return "CNTY"; } }

      public static string CColumnName { get { return "C"; } }

      public static string RTColumnName { get { return "RT"; } }

      public static string FColumnName { get { return "F"; } }

      public static int ZIP5MaxLength { get { return 5; } }

      public static int ZIP4MaxLength { get { return 4; } }

      public static int CDMaxLength { get { return 2; } }

      public static int SDMaxLength { get { return 3; } }

      public static int HDMaxLength { get { return 3; } }

      public static int STMaxLength { get { return 2; } }

      public static int CNTYMaxLength { get { return 3; } }

      public static int CMaxLength { get { return 1; } }

      public static int RTMaxLength { get { return 2; } }

      public static int FMaxLength { get { return 1; } }

      public static bool ZIP5ZIP4Exists(String zip5, String zip4)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZIP5ByZIP5ZIP4(String zip5, String zip4)
      {
        return GetZIP5ByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetZIP5ByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZIP5 FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZIP4ByZIP5ZIP4(String zip5, String zip4)
      {
        return GetZIP4ByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetZIP4ByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZIP4 FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCDByZIP5ZIP4(String zip5, String zip4)
      {
        return GetCDByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetCDByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CD FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSDByZIP5ZIP4(String zip5, String zip4)
      {
        return GetSDByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetSDByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT SD FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetHDByZIP5ZIP4(String zip5, String zip4)
      {
        return GetHDByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetHDByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT HD FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSTByZIP5ZIP4(String zip5, String zip4)
      {
        return GetSTByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetSTByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ST FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCNTYByZIP5ZIP4(String zip5, String zip4)
      {
        return GetCNTYByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetCNTYByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CNTY FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCByZIP5ZIP4(String zip5, String zip4)
      {
        return GetCByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetCByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT C FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRTByZIP5ZIP4(String zip5, String zip4)
      {
        return GetRTByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetRTByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RT FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFByZIP5ZIP4(String zip5, String zip4)
      {
        return GetFByZIP5ZIP4(zip5, zip4, null);
      }

      public static String GetFByZIP5ZIP4(String zip5, String zip4, String defaultValue)
      {
        object result;
        string cmdText = "SELECT F FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZIP5ZIP4(Column _column, String zip5, String zip4)
      {
        object result;
        string cmdText = "SELECT {0} FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static USZDoldTable GetDataByZIP5ZIP4(String zip5, String zip4)
      {
        return GetDataByZIP5ZIP4(zip5, zip4, -1);
      }

      public static USZDoldTable GetDataByZIP5ZIP4(String zip5, String zip4, int commandTimeout)
      {
        string cmdText = "SELECT ZIP5,ZIP4,CD,SD,HD,ST,CNTY,C,RT,F FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        return FillTable(cmd, USZDoldTable.ColumnSet.All);
      }

      public static int UpdateZIP5ByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET ZIP5=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZIP4ByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET ZIP4=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCDByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET CD=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSDByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET SD=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHDByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET HD=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSTByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET ST=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCNTYByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET CNTY=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET C=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRTByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET RT=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFByZIP5ZIP4(String newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET F=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZIP5ZIP4(Column _column, object newValue, String zip5, String zip4)
      {
        string cmdText = "UPDATE USZDold SET {0}=@newValue WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZIP5ZIP4(String zip5, String zip4)
      {
        return DeleteByZIP5ZIP4(zip5, zip4, -1);
      }

      public static int DeleteByZIP5ZIP4(String zip5, String zip4, int commandTimeout)
      {
        string cmdText = "DELETE FROM USZDold WHERE ZIP5=@ZIP5 AND ZIP4=@ZIP4";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP5", zip5);
        VoteZipNewDb.AddCommandParameter(cmd, "ZIP4", zip4);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(USZDoldTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case USZDoldTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static USZDold()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.USZDold

    #region votezipnew.ZipCitiesDownloaded

    public partial class ZipCitiesDownloadedRow : DataRow
    {
      internal ZipCitiesDownloadedRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String AreaCode
      {
        get { return this["AreaCode"] as String; }
        set { if (value == null) this["AreaCode"] = DBNull.Value; else this["AreaCode"] = value; }
      }

      public String CityType
      {
        get { return this["CityType"] as String; }
        set { if (value == null) this["CityType"] = DBNull.Value; else this["CityType"] = value; }
      }

      public String CityAliasAbbreviation
      {
        get { return this["CityAliasAbbreviation"] as String; }
        set { if (value == null) this["CityAliasAbbreviation"] = DBNull.Value; else this["CityAliasAbbreviation"] = value; }
      }

      public String CityAliasName
      {
        get { return this["CityAliasName"] as String; }
        set { if (value == null) this["CityAliasName"] = DBNull.Value; else this["CityAliasName"] = value; }
      }

      public Decimal? Latitude
      {
        get { if (this.IsNull("Latitude")) return null; else return (Decimal) this["Latitude"]; }
        set { if (value.HasValue) this["Latitude"] = value.Value; else this["Latitude"] = DBNull.Value; }
      }

      public Decimal? Longitude
      {
        get { if (this.IsNull("Longitude")) return null; else return (Decimal) this["Longitude"]; }
        set { if (value.HasValue) this["Longitude"] = value.Value; else this["Longitude"] = DBNull.Value; }
      }

      public String TimeZone
      {
        get { return this["TimeZone"] as String; }
        set { if (value == null) this["TimeZone"] = DBNull.Value; else this["TimeZone"] = value; }
      }

      public Int32? Elevation
      {
        get { if (this.IsNull("Elevation")) return null; else return (Int32) this["Elevation"]; }
        set { if (value.HasValue) this["Elevation"] = value.Value; else this["Elevation"] = DBNull.Value; }
      }

      public String CountyFips
      {
        get { return this["CountyFIPS"] as String; }
        set { if (value == null) this["CountyFIPS"] = DBNull.Value; else this["CountyFIPS"] = value; }
      }

      public String DaylightSaving
      {
        get { return this["DayLightSaving"] as String; }
        set { if (value == null) this["DayLightSaving"] = DBNull.Value; else this["DayLightSaving"] = value; }
      }

      public String PreferredLastLineKey
      {
        get { return this["PreferredLastLineKey"] as String; }
        set { if (value == null) this["PreferredLastLineKey"] = DBNull.Value; else this["PreferredLastLineKey"] = value; }
      }

      public String ClassificationCode
      {
        get { return this["ClassificationCode"] as String; }
        set { if (value == null) this["ClassificationCode"] = DBNull.Value; else this["ClassificationCode"] = value; }
      }

      public String MultiCounty
      {
        get { return this["MultiCounty"] as String; }
        set { if (value == null) this["MultiCounty"] = DBNull.Value; else this["MultiCounty"] = value; }
      }

      public String StateFips
      {
        get { return this["StateFIPS"] as String; }
        set { if (value == null) this["StateFIPS"] = DBNull.Value; else this["StateFIPS"] = value; }
      }

      public String CityStateKey
      {
        get { return this["CityStateKey"] as String; }
        set { if (value == null) this["CityStateKey"] = DBNull.Value; else this["CityStateKey"] = value; }
      }

      public String CityAliasCode
      {
        get { return this["CityAliasCode"] as String; }
        set { if (value == null) this["CityAliasCode"] = DBNull.Value; else this["CityAliasCode"] = value; }
      }

      public String PrimaryRecord
      {
        get { return this["PrimaryRecord"] as String; }
        set { if (value == null) this["PrimaryRecord"] = DBNull.Value; else this["PrimaryRecord"] = value; }
      }

      public String CityMixedCase
      {
        get { return this["CityMixedCase"] as String; }
        set { if (value == null) this["CityMixedCase"] = DBNull.Value; else this["CityMixedCase"] = value; }
      }

      public String CityAliasMixedCase
      {
        get { return this["CityAliasMixedCase"] as String; }
        set { if (value == null) this["CityAliasMixedCase"] = DBNull.Value; else this["CityAliasMixedCase"] = value; }
      }

      public String StateAnsi
      {
        get { return this["StateANSI"] as String; }
        set { if (value == null) this["StateANSI"] = DBNull.Value; else this["StateANSI"] = value; }
      }

      public String CountyAnsi
      {
        get { return this["CountyANSI"] as String; }
        set { if (value == null) this["CountyANSI"] = DBNull.Value; else this["CountyANSI"] = value; }
      }

      public String FacilityCode
      {
        get { return this["FacilityCode"] as String; }
        set { if (value == null) this["FacilityCode"] = DBNull.Value; else this["FacilityCode"] = value; }
      }

      public String CityDeliveryIndicator
      {
        get { return this["CityDeliveryIndicator"] as String; }
        set { if (value == null) this["CityDeliveryIndicator"] = DBNull.Value; else this["CityDeliveryIndicator"] = value; }
      }

      public String CarrierRouteRateSortation
      {
        get { return this["CarrierRouteRateSortation"] as String; }
        set { if (value == null) this["CarrierRouteRateSortation"] = DBNull.Value; else this["CarrierRouteRateSortation"] = value; }
      }

      public String FinanceNumber
      {
        get { return this["FinanceNumber"] as String; }
        set { if (value == null) this["FinanceNumber"] = DBNull.Value; else this["FinanceNumber"] = value; }
      }

      public String UniqueZipName
      {
        get { return this["UniqueZIPName"] as String; }
        set { if (value == null) this["UniqueZIPName"] = DBNull.Value; else this["UniqueZIPName"] = value; }
      }

      public String MetaphoneAliasName
      {
        get { return this["MetaphoneAliasName"] as String; }
        set { if (value == null) this["MetaphoneAliasName"] = DBNull.Value; else this["MetaphoneAliasName"] = value; }
      }

      public String MetaphoneAliasAbbreviation
      {
        get { return this["MetaphoneAliasAbbreviation"] as String; }
        set { if (value == null) this["MetaphoneAliasAbbreviation"] = DBNull.Value; else this["MetaphoneAliasAbbreviation"] = value; }
      }
    }

    [Serializable]
    public partial class ZipCitiesDownloadedTable : TypedTableBase<ZipCitiesDownloadedRow>
    {
      public ZipCitiesDownloadedRow this[int index] { get { return (ZipCitiesDownloadedRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipCitiesDownloadedRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipCitiesDownloadedTable(); }

      new public ZipCitiesDownloadedRow NewRow() { return (ZipCitiesDownloadedRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipCitiesDownloadedRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipCitiesDownloadedRow); }

      public void RemoveRow(ZipCitiesDownloadedRow row) { this.Rows.Remove(row); }

      public ZipCitiesDownloadedRow NewRow(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFips, String daylightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFips, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateAnsi, String countyAnsi, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZipName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        ZipCitiesDownloadedRow row = NewRow();
        row.ZipCode = zipCode;
        row.City = city;
        row.State = state;
        row.County = county;
        row.AreaCode = areaCode;
        row.CityType = cityType;
        row.CityAliasAbbreviation = cityAliasAbbreviation;
        row.CityAliasName = cityAliasName;
        row.Latitude = latitude;
        row.Longitude = longitude;
        row.TimeZone = timeZone;
        row.Elevation = elevation;
        row.CountyFips = countyFips;
        row.DaylightSaving = daylightSaving;
        row.PreferredLastLineKey = preferredLastLineKey;
        row.ClassificationCode = classificationCode;
        row.MultiCounty = multiCounty;
        row.StateFips = stateFips;
        row.CityStateKey = cityStateKey;
        row.CityAliasCode = cityAliasCode;
        row.PrimaryRecord = primaryRecord;
        row.CityMixedCase = cityMixedCase;
        row.CityAliasMixedCase = cityAliasMixedCase;
        row.StateAnsi = stateAnsi;
        row.CountyAnsi = countyAnsi;
        row.FacilityCode = facilityCode;
        row.CityDeliveryIndicator = cityDeliveryIndicator;
        row.CarrierRouteRateSortation = carrierRouteRateSortation;
        row.FinanceNumber = financeNumber;
        row.UniqueZipName = uniqueZipName;
        row.MetaphoneAliasName = metaphoneAliasName;
        row.MetaphoneAliasAbbreviation = metaphoneAliasAbbreviation;
        return row;
      }

      public void AddRow(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFips, String daylightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFips, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateAnsi, String countyAnsi, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZipName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        ZipCitiesDownloadedRow row = NewRow(zipCode, city, state, county, areaCode, cityType, cityAliasAbbreviation, cityAliasName, latitude, longitude, timeZone, elevation, countyFips, daylightSaving, preferredLastLineKey, classificationCode, multiCounty, stateFips, cityStateKey, cityAliasCode, primaryRecord, cityMixedCase, cityAliasMixedCase, stateAnsi, countyAnsi, facilityCode, cityDeliveryIndicator, carrierRouteRateSortation, financeNumber, uniqueZipName, metaphoneAliasName, metaphoneAliasAbbreviation);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn AreaCodeColumn { get { return this.Columns["AreaCode"]; } }

      public DataColumn CityTypeColumn { get { return this.Columns["CityType"]; } }

      public DataColumn CityAliasAbbreviationColumn { get { return this.Columns["CityAliasAbbreviation"]; } }

      public DataColumn CityAliasNameColumn { get { return this.Columns["CityAliasName"]; } }

      public DataColumn LatitudeColumn { get { return this.Columns["Latitude"]; } }

      public DataColumn LongitudeColumn { get { return this.Columns["Longitude"]; } }

      public DataColumn TimeZoneColumn { get { return this.Columns["TimeZone"]; } }

      public DataColumn ElevationColumn { get { return this.Columns["Elevation"]; } }

      public DataColumn CountyFipsColumn { get { return this.Columns["CountyFIPS"]; } }

      public DataColumn DaylightSavingColumn { get { return this.Columns["DayLightSaving"]; } }

      public DataColumn PreferredLastLineKeyColumn { get { return this.Columns["PreferredLastLineKey"]; } }

      public DataColumn ClassificationCodeColumn { get { return this.Columns["ClassificationCode"]; } }

      public DataColumn MultiCountyColumn { get { return this.Columns["MultiCounty"]; } }

      public DataColumn StateFipsColumn { get { return this.Columns["StateFIPS"]; } }

      public DataColumn CityStateKeyColumn { get { return this.Columns["CityStateKey"]; } }

      public DataColumn CityAliasCodeColumn { get { return this.Columns["CityAliasCode"]; } }

      public DataColumn PrimaryRecordColumn { get { return this.Columns["PrimaryRecord"]; } }

      public DataColumn CityMixedCaseColumn { get { return this.Columns["CityMixedCase"]; } }

      public DataColumn CityAliasMixedCaseColumn { get { return this.Columns["CityAliasMixedCase"]; } }

      public DataColumn StateAnsiColumn { get { return this.Columns["StateANSI"]; } }

      public DataColumn CountyAnsiColumn { get { return this.Columns["CountyANSI"]; } }

      public DataColumn FacilityCodeColumn { get { return this.Columns["FacilityCode"]; } }

      public DataColumn CityDeliveryIndicatorColumn { get { return this.Columns["CityDeliveryIndicator"]; } }

      public DataColumn CarrierRouteRateSortationColumn { get { return this.Columns["CarrierRouteRateSortation"]; } }

      public DataColumn FinanceNumberColumn { get { return this.Columns["FinanceNumber"]; } }

      public DataColumn UniqueZipNameColumn { get { return this.Columns["UniqueZIPName"]; } }

      public DataColumn MetaphoneAliasNameColumn { get { return this.Columns["MetaphoneAliasName"]; } }

      public DataColumn MetaphoneAliasAbbreviationColumn { get { return this.Columns["MetaphoneAliasAbbreviation"]; } }

      public enum ColumnSet { All, CityAliases, PrimaryKeys }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("AreaCode", typeof(String));
        _column.MaxLength = 55;
        base.Columns.Add(_column);
        _column = new DataColumn("CityType", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasAbbreviation", typeof(String));
        _column.MaxLength = 13;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("Latitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("Longitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("TimeZone", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("Elevation", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CountyFIPS", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("DayLightSaving", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("PreferredLastLineKey", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("ClassificationCode", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("MultiCounty", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("StateFIPS", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateKey", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRecord", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityMixedCase", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasMixedCase", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("StateANSI", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyANSI", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("FacilityCode", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityDeliveryIndicator", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CarrierRouteRateSortation", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("FinanceNumber", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("UniqueZIPName", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaphoneAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaphoneAliasAbbreviation", typeof(String));
        _column.MaxLength = 13;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitCityAliasesColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasAbbreviation", typeof(String));
        _column.MaxLength = 13;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRecord", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitPrimaryKeysColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
      }

      public ZipCitiesDownloadedTable() : this(ColumnSet.All) { }

      public ZipCitiesDownloadedTable(ColumnSet columnSet)
      {
        this.TableName = "ZipCitiesDownloaded";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.CityAliases:
            InitCityAliasesColumns();
            break;

          case ColumnSet.PrimaryKeys:
            InitPrimaryKeysColumns();
            break;
        }
      }

      protected ZipCitiesDownloadedTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipCitiesDownloaded
    {
      public const string TableName = "ZipCitiesDownloaded";

      public enum Column { ZipCode, City, State, County, AreaCode, CityType, CityAliasAbbreviation, CityAliasName, Latitude, Longitude, TimeZone, Elevation, CountyFips, DaylightSaving, PreferredLastLineKey, ClassificationCode, MultiCounty, StateFips, CityStateKey, CityAliasCode, PrimaryRecord, CityMixedCase, CityAliasMixedCase, StateAnsi, CountyAnsi, FacilityCode, CityDeliveryIndicator, CarrierRouteRateSortation, FinanceNumber, UniqueZipName, MetaphoneAliasName, MetaphoneAliasAbbreviation }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.City, "City" },
        { Column.State, "State" },
        { Column.County, "County" },
        { Column.AreaCode, "AreaCode" },
        { Column.CityType, "CityType" },
        { Column.CityAliasAbbreviation, "CityAliasAbbreviation" },
        { Column.CityAliasName, "CityAliasName" },
        { Column.Latitude, "Latitude" },
        { Column.Longitude, "Longitude" },
        { Column.TimeZone, "TimeZone" },
        { Column.Elevation, "Elevation" },
        { Column.CountyFips, "CountyFIPS" },
        { Column.DaylightSaving, "DayLightSaving" },
        { Column.PreferredLastLineKey, "PreferredLastLineKey" },
        { Column.ClassificationCode, "ClassificationCode" },
        { Column.MultiCounty, "MultiCounty" },
        { Column.StateFips, "StateFIPS" },
        { Column.CityStateKey, "CityStateKey" },
        { Column.CityAliasCode, "CityAliasCode" },
        { Column.PrimaryRecord, "PrimaryRecord" },
        { Column.CityMixedCase, "CityMixedCase" },
        { Column.CityAliasMixedCase, "CityAliasMixedCase" },
        { Column.StateAnsi, "StateANSI" },
        { Column.CountyAnsi, "CountyANSI" },
        { Column.FacilityCode, "FacilityCode" },
        { Column.CityDeliveryIndicator, "CityDeliveryIndicator" },
        { Column.CarrierRouteRateSortation, "CarrierRouteRateSortation" },
        { Column.FinanceNumber, "FinanceNumber" },
        { Column.UniqueZipName, "UniqueZIPName" },
        { Column.MetaphoneAliasName, "MetaphoneAliasName" },
        { Column.MetaphoneAliasAbbreviation, "MetaphoneAliasAbbreviation" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE ZipCitiesDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFips, String daylightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFips, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateAnsi, String countyAnsi, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZipName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        Insert(zipCode, city, state, county, areaCode, cityType, cityAliasAbbreviation, cityAliasName, latitude, longitude, timeZone, elevation, countyFips, daylightSaving, preferredLastLineKey, classificationCode, multiCounty, stateFips, cityStateKey, cityAliasCode, primaryRecord, cityMixedCase, cityAliasMixedCase, stateAnsi, countyAnsi, facilityCode, cityDeliveryIndicator, carrierRouteRateSortation, financeNumber, uniqueZipName, metaphoneAliasName, metaphoneAliasAbbreviation, -1);
      }

      public static void Insert(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFips, String daylightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFips, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateAnsi, String countyAnsi, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZipName, String metaphoneAliasName, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipCitiesDownloaded (ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation) VALUES (@ZipCode,@City,@State,@County,@AreaCode,@CityType,@CityAliasAbbreviation,@CityAliasName,@Latitude,@Longitude,@TimeZone,@Elevation,@CountyFips,@DaylightSaving,@PreferredLastLineKey,@ClassificationCode,@MultiCounty,@StateFips,@CityStateKey,@CityAliasCode,@PrimaryRecord,@CityMixedCase,@CityAliasMixedCase,@StateAnsi,@CountyAnsi,@FacilityCode,@CityDeliveryIndicator,@CarrierRouteRateSortation,@FinanceNumber,@UniqueZipName,@MetaphoneAliasName,@MetaphoneAliasAbbreviation)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "City", city);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "AreaCode", areaCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityType", cityType);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "Latitude", latitude);
        VoteZipNewDb.AddCommandParameter(cmd, "Longitude", longitude);
        VoteZipNewDb.AddCommandParameter(cmd, "TimeZone", timeZone);
        VoteZipNewDb.AddCommandParameter(cmd, "Elevation", elevation);
        VoteZipNewDb.AddCommandParameter(cmd, "CountyFips", countyFips);
        VoteZipNewDb.AddCommandParameter(cmd, "DaylightSaving", daylightSaving);
        VoteZipNewDb.AddCommandParameter(cmd, "PreferredLastLineKey", preferredLastLineKey);
        VoteZipNewDb.AddCommandParameter(cmd, "ClassificationCode", classificationCode);
        VoteZipNewDb.AddCommandParameter(cmd, "MultiCounty", multiCounty);
        VoteZipNewDb.AddCommandParameter(cmd, "StateFips", stateFips);
        VoteZipNewDb.AddCommandParameter(cmd, "CityStateKey", cityStateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasCode", cityAliasCode);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryRecord", primaryRecord);
        VoteZipNewDb.AddCommandParameter(cmd, "CityMixedCase", cityMixedCase);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasMixedCase", cityAliasMixedCase);
        VoteZipNewDb.AddCommandParameter(cmd, "StateAnsi", stateAnsi);
        VoteZipNewDb.AddCommandParameter(cmd, "CountyAnsi", countyAnsi);
        VoteZipNewDb.AddCommandParameter(cmd, "FacilityCode", facilityCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityDeliveryIndicator", cityDeliveryIndicator);
        VoteZipNewDb.AddCommandParameter(cmd, "CarrierRouteRateSortation", carrierRouteRateSortation);
        VoteZipNewDb.AddCommandParameter(cmd, "FinanceNumber", financeNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "UniqueZipName", uniqueZipName);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded";
        }
      }

      public static ZipCitiesDownloadedTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipCitiesDownloadedTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetAllDataReader()
      {
        return GetAllDataReader(-1);
      }

      public static ZipCitiesDownloadedReader GetAllDataReader(int commandTimeout)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipCitiesDownloadedTable FillTable(DbCommand command, ZipCitiesDownloadedTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipCitiesDownloadedTable table = new ZipCitiesDownloadedTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table)
      {
        UpdateTable(table, ZipCitiesDownloadedTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table, ZipCitiesDownloadedTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table, int commandTimeout)
      {
        UpdateTable(table, ZipCitiesDownloadedTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table, ZipCitiesDownloadedTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipCitiesDownloadedTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipCitiesDownloadedTable table, ZipCitiesDownloadedTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string AreaCodeColumnName { get { return "AreaCode"; } }

      public static string CityTypeColumnName { get { return "CityType"; } }

      public static string CityAliasAbbreviationColumnName { get { return "CityAliasAbbreviation"; } }

      public static string CityAliasNameColumnName { get { return "CityAliasName"; } }

      public static string LatitudeColumnName { get { return "Latitude"; } }

      public static string LongitudeColumnName { get { return "Longitude"; } }

      public static string TimeZoneColumnName { get { return "TimeZone"; } }

      public static string ElevationColumnName { get { return "Elevation"; } }

      public static string CountyFipsColumnName { get { return "CountyFIPS"; } }

      public static string DaylightSavingColumnName { get { return "DayLightSaving"; } }

      public static string PreferredLastLineKeyColumnName { get { return "PreferredLastLineKey"; } }

      public static string ClassificationCodeColumnName { get { return "ClassificationCode"; } }

      public static string MultiCountyColumnName { get { return "MultiCounty"; } }

      public static string StateFipsColumnName { get { return "StateFIPS"; } }

      public static string CityStateKeyColumnName { get { return "CityStateKey"; } }

      public static string CityAliasCodeColumnName { get { return "CityAliasCode"; } }

      public static string PrimaryRecordColumnName { get { return "PrimaryRecord"; } }

      public static string CityMixedCaseColumnName { get { return "CityMixedCase"; } }

      public static string CityAliasMixedCaseColumnName { get { return "CityAliasMixedCase"; } }

      public static string StateAnsiColumnName { get { return "StateANSI"; } }

      public static string CountyAnsiColumnName { get { return "CountyANSI"; } }

      public static string FacilityCodeColumnName { get { return "FacilityCode"; } }

      public static string CityDeliveryIndicatorColumnName { get { return "CityDeliveryIndicator"; } }

      public static string CarrierRouteRateSortationColumnName { get { return "CarrierRouteRateSortation"; } }

      public static string FinanceNumberColumnName { get { return "FinanceNumber"; } }

      public static string UniqueZipNameColumnName { get { return "UniqueZIPName"; } }

      public static string MetaphoneAliasNameColumnName { get { return "MetaphoneAliasName"; } }

      public static string MetaphoneAliasAbbreviationColumnName { get { return "MetaphoneAliasAbbreviation"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 45; } }

      public static int AreaCodeMaxLength { get { return 55; } }

      public static int CityTypeMaxLength { get { return 1; } }

      public static int CityAliasAbbreviationMaxLength { get { return 13; } }

      public static int CityAliasNameMaxLength { get { return 35; } }

      public static int TimeZoneMaxLength { get { return 2; } }

      public static int CountyFipsMaxLength { get { return 3; } }

      public static int DaylightSavingMaxLength { get { return 1; } }

      public static int PreferredLastLineKeyMaxLength { get { return 10; } }

      public static int ClassificationCodeMaxLength { get { return 1; } }

      public static int MultiCountyMaxLength { get { return 1; } }

      public static int StateFipsMaxLength { get { return 2; } }

      public static int CityStateKeyMaxLength { get { return 6; } }

      public static int CityAliasCodeMaxLength { get { return 5; } }

      public static int PrimaryRecordMaxLength { get { return 1; } }

      public static int CityMixedCaseMaxLength { get { return 35; } }

      public static int CityAliasMixedCaseMaxLength { get { return 35; } }

      public static int StateAnsiMaxLength { get { return 2; } }

      public static int CountyAnsiMaxLength { get { return 3; } }

      public static int FacilityCodeMaxLength { get { return 1; } }

      public static int CityDeliveryIndicatorMaxLength { get { return 1; } }

      public static int CarrierRouteRateSortationMaxLength { get { return 1; } }

      public static int FinanceNumberMaxLength { get { return 6; } }

      public static int UniqueZipNameMaxLength { get { return 1; } }

      public static int MetaphoneAliasNameMaxLength { get { return 35; } }

      public static int MetaphoneAliasAbbreviationMaxLength { get { return 13; } }

      public static bool PrimaryKeyExists(String zipCode, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetZipCodeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetZipCodeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT City FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetStateByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetStateByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT State FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCountyByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCountyByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAreaCodeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetAreaCodeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetAreaCodeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AreaCode FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityTypeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityTypeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityTypeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityType FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasAbbreviationByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityAliasAbbreviationByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasAbbreviationByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasAbbreviation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasNameByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityAliasNameByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasNameByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasName FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Decimal? GetLatitudeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return _GetLatitudeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static Decimal GetLatitudeByPrimaryKey(String zipCode, String cityAliasName, Decimal defaultValue)
      {
        return _GetLatitudeByPrimaryKey(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Decimal? _GetLatitudeByPrimaryKey(String zipCode, String cityAliasName, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT Latitude FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetLongitudeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return _GetLongitudeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static Decimal GetLongitudeByPrimaryKey(String zipCode, String cityAliasName, Decimal defaultValue)
      {
        return _GetLongitudeByPrimaryKey(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Decimal? _GetLongitudeByPrimaryKey(String zipCode, String cityAliasName, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT Longitude FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static String GetTimeZoneByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetTimeZoneByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetTimeZoneByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT TimeZone FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetElevationByPrimaryKey(String zipCode, String cityAliasName)
      {
        return _GetElevationByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static Int32 GetElevationByPrimaryKey(String zipCode, String cityAliasName, Int32 defaultValue)
      {
        return _GetElevationByPrimaryKey(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Int32? _GetElevationByPrimaryKey(String zipCode, String cityAliasName, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Elevation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetCountyFipsByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCountyFipsByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCountyFipsByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CountyFIPS FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDaylightSavingByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetDaylightSavingByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetDaylightSavingByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT DayLightSaving FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPreferredLastLineKeyByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetPreferredLastLineKeyByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetPreferredLastLineKeyByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PreferredLastLineKey FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetClassificationCodeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetClassificationCodeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetClassificationCodeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ClassificationCode FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMultiCountyByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetMultiCountyByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetMultiCountyByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MultiCounty FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateFipsByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetStateFipsByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetStateFipsByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateFIPS FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateKeyByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityStateKeyByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityStateKeyByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityStateKey FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasCodeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityAliasCodeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasCodeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasCode FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryRecordByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetPrimaryRecordByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetPrimaryRecordByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryRecord FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityMixedCaseByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityMixedCaseByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityMixedCaseByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityMixedCase FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasMixedCaseByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityAliasMixedCaseByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasMixedCaseByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasMixedCase FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAnsiByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetStateAnsiByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetStateAnsiByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateANSI FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyAnsiByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCountyAnsiByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCountyAnsiByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CountyANSI FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacilityCodeByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetFacilityCodeByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetFacilityCodeByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FacilityCode FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityDeliveryIndicatorByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCityDeliveryIndicatorByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCityDeliveryIndicatorByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityDeliveryIndicator FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCarrierRouteRateSortationByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetCarrierRouteRateSortationByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetCarrierRouteRateSortationByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CarrierRouteRateSortation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFinanceNumberByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetFinanceNumberByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetFinanceNumberByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FinanceNumber FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUniqueZipNameByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetUniqueZipNameByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetUniqueZipNameByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UniqueZIPName FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneAliasNameByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetMetaphoneAliasNameByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetMetaphoneAliasNameByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MetaphoneAliasName FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneAliasAbbreviationByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetMetaphoneAliasAbbreviationByPrimaryKey(zipCode, cityAliasName, null);
      }

      public static String GetMetaphoneAliasAbbreviationByPrimaryKey(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, String zipCode, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetDataByPrimaryKey(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByPrimaryKey(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByPrimaryKey(String zipCode, String cityAliasName)
      {
        return GetDataReaderByPrimaryKey(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByPrimaryKey(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByPrimaryKey(Decimal? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByPrimaryKey(Decimal? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByPrimaryKey(Int32? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByPrimaryKey(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(String zipCode, String cityAliasName)
      {
        return DeleteByPrimaryKey(zipCode, cityAliasName, -1);
      }

      public static int DeleteByPrimaryKey(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCode(String zipCode, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCode(String zipCode)
      {
        return CountByZipCode(zipCode, -1);
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByZipCode(String zipCode)
      {
        return GetDataReaderByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByZipCode(Decimal? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByZipCode(Decimal? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByZipCode(Int32? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateCityAliasName(String state, String cityAliasName)
      {
        return CountByStateCityAliasName(state, cityAliasName, -1);
      }

      public static object GetColumnByStateCityAliasName(Column _column, String state, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByStateCityAliasName(String state, String cityAliasName)
      {
        return GetDataByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateCityAliasName(String state, String cityAliasName)
      {
        return GetDataReaderByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE State=@State AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateCityAliasName(Decimal? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateCityAliasName(Decimal? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateCityAliasName(Int32? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCityAliasName(Column _column, object newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCityAliasName(String state, String cityAliasName)
      {
        return DeleteByStateCityAliasName(state, cityAliasName, -1);
      }

      public static int DeleteByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCityAliasName(String cityAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByCityAliasName(String cityAliasName)
      {
        return CountByCityAliasName(cityAliasName, -1);
      }

      public static object GetColumnByCityAliasName(Column _column, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByCityAliasName(String cityAliasName)
      {
        return GetDataByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByCityAliasName(String cityAliasName)
      {
        return GetDataReaderByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByCityAliasName(Decimal? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByCityAliasName(Decimal? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByCityAliasName(Int32? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCityAliasName(Column _column, object newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCityAliasName(String cityAliasName)
      {
        return DeleteByCityAliasName(cityAliasName, -1);
      }

      public static int DeleteByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return CountByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static object GetColumnByStateMetaphoneAliasName(Column _column, String state, String metaphoneAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetDataByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetDataReaderByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateMetaphoneAliasName(Decimal? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateMetaphoneAliasName(Decimal? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateMetaphoneAliasName(Int32? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateMetaphoneAliasName(Column _column, object newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return DeleteByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static int DeleteByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return CountByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static object GetColumnByStateCityAliasAbbreviation(Column _column, String state, String cityAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetDataByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetDataReaderByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateCityAliasAbbreviation(Decimal? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateCityAliasAbbreviation(Decimal? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateCityAliasAbbreviation(Int32? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCityAliasAbbreviation(Column _column, object newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return DeleteByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static int DeleteByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return CountByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static object GetColumnByCityAliasAbbreviation(Column _column, String cityAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetDataByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetDataReaderByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByCityAliasAbbreviation(Decimal? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByCityAliasAbbreviation(Decimal? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByCityAliasAbbreviation(Int32? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCityAliasAbbreviation(Column _column, object newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return DeleteByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static int DeleteByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return CountByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static object GetColumnByStateMetaphoneAliasAbbreviation(Column _column, String state, String metaphoneAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedTable GetDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetDataByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetDataReaderByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.All) + " WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ZipCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET City=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET State=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET County=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET AreaCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityType=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateMetaphoneAliasAbbreviation(Decimal? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Latitude=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateMetaphoneAliasAbbreviation(Decimal? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Longitude=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET TimeZone=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateMetaphoneAliasAbbreviation(Int32? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET Elevation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyFIPS=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDaylightSavingByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET DayLightSaving=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PreferredLastLineKey=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET ClassificationCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MultiCounty=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFipsByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateFIPS=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityStateKey=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET PrimaryRecord=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityMixedCase=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityAliasMixedCase=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAnsiByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET StateANSI=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyAnsiByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CountyANSI=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FacilityCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CityDeliveryIndicator=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET CarrierRouteRateSortation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET FinanceNumber=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZipNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET UniqueZIPName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateMetaphoneAliasAbbreviation(Column _column, object newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloaded SET {0}=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return DeleteByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static int DeleteByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectCityAliasesCommandText
      {
        get
        {
          return "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded";
        }
      }

      public static ZipCitiesDownloadedTable GetAllCityAliasesData()
      {
        return GetAllCityAliasesData(-1);
      }

      public static ZipCitiesDownloadedTable GetAllCityAliasesData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetAllCityAliasesDataReader()
      {
        return GetAllCityAliasesDataReader(-1);
      }

      public static ZipCitiesDownloadedReader GetAllCityAliasesDataReader(int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases);
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateCityAliases(ZipCitiesDownloadedTable table)
      {
        UpdateCityAliases(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateCityAliases(ZipCitiesDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipCitiesDownloadedTable.ColumnSet.CityAliases, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasesDataByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasesDataReaderByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByZipCode(String zipCode)
      {
        return GetCityAliasesDataByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByZipCode(String zipCode)
      {
        return GetCityAliasesDataReaderByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateCityAliasName(String state, String cityAliasName)
      {
        return GetCityAliasesDataByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateCityAliasName(String state, String cityAliasName)
      {
        return GetCityAliasesDataReaderByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE State=@State AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByCityAliasName(String cityAliasName)
      {
        return GetCityAliasesDataByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByCityAliasName(String cityAliasName)
      {
        return GetCityAliasesDataReaderByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetCityAliasesDataByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetCityAliasesDataReaderByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetCityAliasesDataByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetCityAliasesDataReaderByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetCityAliasesDataByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetCityAliasesDataReaderByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetCityAliasesDataByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetCityAliasesDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,CityAliasAbbreviation,CityAliasName,PrimaryRecord FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.CityAliases);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetCityAliasesDataReaderByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetCityAliasesDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.CityAliases) + " WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static string SelectPrimaryKeysCommandText
      {
        get
        {
          return "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded";
        }
      }

      public static ZipCitiesDownloadedTable GetAllPrimaryKeysData()
      {
        return GetAllPrimaryKeysData(-1);
      }

      public static ZipCitiesDownloadedTable GetAllPrimaryKeysData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetAllPrimaryKeysDataReader()
      {
        return GetAllPrimaryKeysDataReader(-1);
      }

      public static ZipCitiesDownloadedReader GetAllPrimaryKeysDataReader(int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdatePrimaryKeys(ZipCitiesDownloadedTable table)
      {
        UpdatePrimaryKeys(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdatePrimaryKeys(ZipCitiesDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetPrimaryKeysDataByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetPrimaryKeysDataReaderByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByZipCode(String zipCode)
      {
        return GetPrimaryKeysDataByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByZipCode(String zipCode)
      {
        return GetPrimaryKeysDataReaderByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateCityAliasName(String state, String cityAliasName)
      {
        return GetPrimaryKeysDataByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateCityAliasName(String state, String cityAliasName)
      {
        return GetPrimaryKeysDataReaderByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE State=@State AND CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByCityAliasName(String cityAliasName)
      {
        return GetPrimaryKeysDataByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByCityAliasName(String cityAliasName)
      {
        return GetPrimaryKeysDataReaderByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE CityAliasName=@CityAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetPrimaryKeysDataByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetPrimaryKeysDataReaderByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetPrimaryKeysDataByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetPrimaryKeysDataReaderByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetPrimaryKeysDataByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetPrimaryKeysDataReaderByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetPrimaryKeysDataByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedTable GetPrimaryKeysDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,CityAliasName FROM ZipCitiesDownloaded WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetPrimaryKeysDataReaderByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedReader GetPrimaryKeysDataReaderByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys) + " WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return new ZipCitiesDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static string GetSelectCommandText(ZipCitiesDownloadedTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipCitiesDownloadedTable.ColumnSet.All:
            return SelectAllCommandText;

          case ZipCitiesDownloadedTable.ColumnSet.CityAliases:
            return SelectCityAliasesCommandText;

          case ZipCitiesDownloadedTable.ColumnSet.PrimaryKeys:
            return SelectPrimaryKeysCommandText;

          default:
            return null;
        }
      }

      static ZipCitiesDownloaded()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class ZipCitiesDownloadedReader : DataReaderBase
    {
      public ZipCitiesDownloadedReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String State
      {
        get { return this["State"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public String AreaCode
      {
        get { return this["AreaCode"] as String; }
      }

      public String CityType
      {
        get { return this["CityType"] as String; }
      }

      public String CityAliasAbbreviation
      {
        get { return this["CityAliasAbbreviation"] as String; }
      }

      public String CityAliasName
      {
        get { return this["CityAliasName"] as String; }
      }

      public Decimal? Latitude
      {
        get { if (this.IsDBNull(GetOrdinal("Latitude"))) return null; else return (Decimal) this["Latitude"]; }
      }

      public Decimal? Longitude
      {
        get { if (this.IsDBNull(GetOrdinal("Longitude"))) return null; else return (Decimal) this["Longitude"]; }
      }

      public String TimeZone
      {
        get { return this["TimeZone"] as String; }
      }

      public Int32? Elevation
      {
        get { if (this.IsDBNull(GetOrdinal("Elevation"))) return null; else return (Int32) this["Elevation"]; }
      }

      public String CountyFips
      {
        get { return this["CountyFIPS"] as String; }
      }

      public String DaylightSaving
      {
        get { return this["DayLightSaving"] as String; }
      }

      public String PreferredLastLineKey
      {
        get { return this["PreferredLastLineKey"] as String; }
      }

      public String ClassificationCode
      {
        get { return this["ClassificationCode"] as String; }
      }

      public String MultiCounty
      {
        get { return this["MultiCounty"] as String; }
      }

      public String StateFips
      {
        get { return this["StateFIPS"] as String; }
      }

      public String CityStateKey
      {
        get { return this["CityStateKey"] as String; }
      }

      public String CityAliasCode
      {
        get { return this["CityAliasCode"] as String; }
      }

      public String PrimaryRecord
      {
        get { return this["PrimaryRecord"] as String; }
      }

      public String CityMixedCase
      {
        get { return this["CityMixedCase"] as String; }
      }

      public String CityAliasMixedCase
      {
        get { return this["CityAliasMixedCase"] as String; }
      }

      public String StateAnsi
      {
        get { return this["StateANSI"] as String; }
      }

      public String CountyAnsi
      {
        get { return this["CountyANSI"] as String; }
      }

      public String FacilityCode
      {
        get { return this["FacilityCode"] as String; }
      }

      public String CityDeliveryIndicator
      {
        get { return this["CityDeliveryIndicator"] as String; }
      }

      public String CarrierRouteRateSortation
      {
        get { return this["CarrierRouteRateSortation"] as String; }
      }

      public String FinanceNumber
      {
        get { return this["FinanceNumber"] as String; }
      }

      public String UniqueZipName
      {
        get { return this["UniqueZIPName"] as String; }
      }

      public String MetaphoneAliasName
      {
        get { return this["MetaphoneAliasName"] as String; }
      }

      public String MetaphoneAliasAbbreviation
      {
        get { return this["MetaphoneAliasAbbreviation"] as String; }
      }
    }

    #endregion votezipnew.ZipCitiesDownloaded

    #region votezipnew.ZipCitiesDownloadedOld

    public partial class ZipCitiesDownloadedOldRow : DataRow
    {
      internal ZipCitiesDownloadedOldRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String AreaCode
      {
        get { return this["AreaCode"] as String; }
        set { if (value == null) this["AreaCode"] = DBNull.Value; else this["AreaCode"] = value; }
      }

      public String CityType
      {
        get { return this["CityType"] as String; }
        set { if (value == null) this["CityType"] = DBNull.Value; else this["CityType"] = value; }
      }

      public String CityAliasAbbreviation
      {
        get { return this["CityAliasAbbreviation"] as String; }
        set { if (value == null) this["CityAliasAbbreviation"] = DBNull.Value; else this["CityAliasAbbreviation"] = value; }
      }

      public String CityAliasName
      {
        get { return this["CityAliasName"] as String; }
        set { if (value == null) this["CityAliasName"] = DBNull.Value; else this["CityAliasName"] = value; }
      }

      public Decimal? Latitude
      {
        get { if (this.IsNull("Latitude")) return null; else return (Decimal) this["Latitude"]; }
        set { if (value.HasValue) this["Latitude"] = value.Value; else this["Latitude"] = DBNull.Value; }
      }

      public Decimal? Longitude
      {
        get { if (this.IsNull("Longitude")) return null; else return (Decimal) this["Longitude"]; }
        set { if (value.HasValue) this["Longitude"] = value.Value; else this["Longitude"] = DBNull.Value; }
      }

      public String TimeZone
      {
        get { return this["TimeZone"] as String; }
        set { if (value == null) this["TimeZone"] = DBNull.Value; else this["TimeZone"] = value; }
      }

      public Int32? Elevation
      {
        get { if (this.IsNull("Elevation")) return null; else return (Int32) this["Elevation"]; }
        set { if (value.HasValue) this["Elevation"] = value.Value; else this["Elevation"] = DBNull.Value; }
      }

      public String CountyFIPS
      {
        get { return this["CountyFIPS"] as String; }
        set { if (value == null) this["CountyFIPS"] = DBNull.Value; else this["CountyFIPS"] = value; }
      }

      public String DayLightSaving
      {
        get { return this["DayLightSaving"] as String; }
        set { if (value == null) this["DayLightSaving"] = DBNull.Value; else this["DayLightSaving"] = value; }
      }

      public String PreferredLastLineKey
      {
        get { return this["PreferredLastLineKey"] as String; }
        set { if (value == null) this["PreferredLastLineKey"] = DBNull.Value; else this["PreferredLastLineKey"] = value; }
      }

      public String ClassificationCode
      {
        get { return this["ClassificationCode"] as String; }
        set { if (value == null) this["ClassificationCode"] = DBNull.Value; else this["ClassificationCode"] = value; }
      }

      public String MultiCounty
      {
        get { return this["MultiCounty"] as String; }
        set { if (value == null) this["MultiCounty"] = DBNull.Value; else this["MultiCounty"] = value; }
      }

      public String StateFIPS
      {
        get { return this["StateFIPS"] as String; }
        set { if (value == null) this["StateFIPS"] = DBNull.Value; else this["StateFIPS"] = value; }
      }

      public String CityStateKey
      {
        get { return this["CityStateKey"] as String; }
        set { if (value == null) this["CityStateKey"] = DBNull.Value; else this["CityStateKey"] = value; }
      }

      public String CityAliasCode
      {
        get { return this["CityAliasCode"] as String; }
        set { if (value == null) this["CityAliasCode"] = DBNull.Value; else this["CityAliasCode"] = value; }
      }

      public String PrimaryRecord
      {
        get { return this["PrimaryRecord"] as String; }
        set { if (value == null) this["PrimaryRecord"] = DBNull.Value; else this["PrimaryRecord"] = value; }
      }

      public String CityMixedCase
      {
        get { return this["CityMixedCase"] as String; }
        set { if (value == null) this["CityMixedCase"] = DBNull.Value; else this["CityMixedCase"] = value; }
      }

      public String CityAliasMixedCase
      {
        get { return this["CityAliasMixedCase"] as String; }
        set { if (value == null) this["CityAliasMixedCase"] = DBNull.Value; else this["CityAliasMixedCase"] = value; }
      }

      public String StateANSI
      {
        get { return this["StateANSI"] as String; }
        set { if (value == null) this["StateANSI"] = DBNull.Value; else this["StateANSI"] = value; }
      }

      public String CountyANSI
      {
        get { return this["CountyANSI"] as String; }
        set { if (value == null) this["CountyANSI"] = DBNull.Value; else this["CountyANSI"] = value; }
      }

      public String FacilityCode
      {
        get { return this["FacilityCode"] as String; }
        set { if (value == null) this["FacilityCode"] = DBNull.Value; else this["FacilityCode"] = value; }
      }

      public String CityDeliveryIndicator
      {
        get { return this["CityDeliveryIndicator"] as String; }
        set { if (value == null) this["CityDeliveryIndicator"] = DBNull.Value; else this["CityDeliveryIndicator"] = value; }
      }

      public String CarrierRouteRateSortation
      {
        get { return this["CarrierRouteRateSortation"] as String; }
        set { if (value == null) this["CarrierRouteRateSortation"] = DBNull.Value; else this["CarrierRouteRateSortation"] = value; }
      }

      public String FinanceNumber
      {
        get { return this["FinanceNumber"] as String; }
        set { if (value == null) this["FinanceNumber"] = DBNull.Value; else this["FinanceNumber"] = value; }
      }

      public String UniqueZIPName
      {
        get { return this["UniqueZIPName"] as String; }
        set { if (value == null) this["UniqueZIPName"] = DBNull.Value; else this["UniqueZIPName"] = value; }
      }

      public String MetaphoneAliasName
      {
        get { return this["MetaphoneAliasName"] as String; }
        set { if (value == null) this["MetaphoneAliasName"] = DBNull.Value; else this["MetaphoneAliasName"] = value; }
      }

      public String MetaphoneAliasAbbreviation
      {
        get { return this["MetaphoneAliasAbbreviation"] as String; }
        set { if (value == null) this["MetaphoneAliasAbbreviation"] = DBNull.Value; else this["MetaphoneAliasAbbreviation"] = value; }
      }
    }

    [Serializable]
    public partial class ZipCitiesDownloadedOldTable : TypedTableBase<ZipCitiesDownloadedOldRow>
    {
      public ZipCitiesDownloadedOldRow this[int index] { get { return (ZipCitiesDownloadedOldRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipCitiesDownloadedOldRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipCitiesDownloadedOldTable(); }

      new public ZipCitiesDownloadedOldRow NewRow() { return (ZipCitiesDownloadedOldRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipCitiesDownloadedOldRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipCitiesDownloadedOldRow); }

      public void RemoveRow(ZipCitiesDownloadedOldRow row) { this.Rows.Remove(row); }

      public ZipCitiesDownloadedOldRow NewRow(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFIPS, String dayLightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFIPS, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateANSI, String countyANSI, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZIPName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        ZipCitiesDownloadedOldRow row = NewRow();
        row.ZipCode = zipCode;
        row.City = city;
        row.State = state;
        row.County = county;
        row.AreaCode = areaCode;
        row.CityType = cityType;
        row.CityAliasAbbreviation = cityAliasAbbreviation;
        row.CityAliasName = cityAliasName;
        row.Latitude = latitude;
        row.Longitude = longitude;
        row.TimeZone = timeZone;
        row.Elevation = elevation;
        row.CountyFIPS = countyFIPS;
        row.DayLightSaving = dayLightSaving;
        row.PreferredLastLineKey = preferredLastLineKey;
        row.ClassificationCode = classificationCode;
        row.MultiCounty = multiCounty;
        row.StateFIPS = stateFIPS;
        row.CityStateKey = cityStateKey;
        row.CityAliasCode = cityAliasCode;
        row.PrimaryRecord = primaryRecord;
        row.CityMixedCase = cityMixedCase;
        row.CityAliasMixedCase = cityAliasMixedCase;
        row.StateANSI = stateANSI;
        row.CountyANSI = countyANSI;
        row.FacilityCode = facilityCode;
        row.CityDeliveryIndicator = cityDeliveryIndicator;
        row.CarrierRouteRateSortation = carrierRouteRateSortation;
        row.FinanceNumber = financeNumber;
        row.UniqueZIPName = uniqueZIPName;
        row.MetaphoneAliasName = metaphoneAliasName;
        row.MetaphoneAliasAbbreviation = metaphoneAliasAbbreviation;
        return row;
      }

      public void AddRow(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFIPS, String dayLightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFIPS, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateANSI, String countyANSI, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZIPName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        ZipCitiesDownloadedOldRow row = NewRow(zipCode, city, state, county, areaCode, cityType, cityAliasAbbreviation, cityAliasName, latitude, longitude, timeZone, elevation, countyFIPS, dayLightSaving, preferredLastLineKey, classificationCode, multiCounty, stateFIPS, cityStateKey, cityAliasCode, primaryRecord, cityMixedCase, cityAliasMixedCase, stateANSI, countyANSI, facilityCode, cityDeliveryIndicator, carrierRouteRateSortation, financeNumber, uniqueZIPName, metaphoneAliasName, metaphoneAliasAbbreviation);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn AreaCodeColumn { get { return this.Columns["AreaCode"]; } }

      public DataColumn CityTypeColumn { get { return this.Columns["CityType"]; } }

      public DataColumn CityAliasAbbreviationColumn { get { return this.Columns["CityAliasAbbreviation"]; } }

      public DataColumn CityAliasNameColumn { get { return this.Columns["CityAliasName"]; } }

      public DataColumn LatitudeColumn { get { return this.Columns["Latitude"]; } }

      public DataColumn LongitudeColumn { get { return this.Columns["Longitude"]; } }

      public DataColumn TimeZoneColumn { get { return this.Columns["TimeZone"]; } }

      public DataColumn ElevationColumn { get { return this.Columns["Elevation"]; } }

      public DataColumn CountyFIPSColumn { get { return this.Columns["CountyFIPS"]; } }

      public DataColumn DayLightSavingColumn { get { return this.Columns["DayLightSaving"]; } }

      public DataColumn PreferredLastLineKeyColumn { get { return this.Columns["PreferredLastLineKey"]; } }

      public DataColumn ClassificationCodeColumn { get { return this.Columns["ClassificationCode"]; } }

      public DataColumn MultiCountyColumn { get { return this.Columns["MultiCounty"]; } }

      public DataColumn StateFIPSColumn { get { return this.Columns["StateFIPS"]; } }

      public DataColumn CityStateKeyColumn { get { return this.Columns["CityStateKey"]; } }

      public DataColumn CityAliasCodeColumn { get { return this.Columns["CityAliasCode"]; } }

      public DataColumn PrimaryRecordColumn { get { return this.Columns["PrimaryRecord"]; } }

      public DataColumn CityMixedCaseColumn { get { return this.Columns["CityMixedCase"]; } }

      public DataColumn CityAliasMixedCaseColumn { get { return this.Columns["CityAliasMixedCase"]; } }

      public DataColumn StateANSIColumn { get { return this.Columns["StateANSI"]; } }

      public DataColumn CountyANSIColumn { get { return this.Columns["CountyANSI"]; } }

      public DataColumn FacilityCodeColumn { get { return this.Columns["FacilityCode"]; } }

      public DataColumn CityDeliveryIndicatorColumn { get { return this.Columns["CityDeliveryIndicator"]; } }

      public DataColumn CarrierRouteRateSortationColumn { get { return this.Columns["CarrierRouteRateSortation"]; } }

      public DataColumn FinanceNumberColumn { get { return this.Columns["FinanceNumber"]; } }

      public DataColumn UniqueZIPNameColumn { get { return this.Columns["UniqueZIPName"]; } }

      public DataColumn MetaphoneAliasNameColumn { get { return this.Columns["MetaphoneAliasName"]; } }

      public DataColumn MetaphoneAliasAbbreviationColumn { get { return this.Columns["MetaphoneAliasAbbreviation"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("AreaCode", typeof(String));
        _column.MaxLength = 55;
        base.Columns.Add(_column);
        _column = new DataColumn("CityType", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasAbbreviation", typeof(String));
        _column.MaxLength = 13;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("Latitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("Longitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("TimeZone", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("Elevation", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CountyFIPS", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("DayLightSaving", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("PreferredLastLineKey", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("ClassificationCode", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("MultiCounty", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("StateFIPS", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CityStateKey", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("PrimaryRecord", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityMixedCase", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("CityAliasMixedCase", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("StateANSI", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyANSI", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("FacilityCode", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CityDeliveryIndicator", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CarrierRouteRateSortation", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("FinanceNumber", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("UniqueZIPName", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaphoneAliasName", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("MetaphoneAliasAbbreviation", typeof(String));
        _column.MaxLength = 13;
        base.Columns.Add(_column);
      }

      public ZipCitiesDownloadedOldTable() : this(ColumnSet.All) { }

      public ZipCitiesDownloadedOldTable(ColumnSet columnSet)
      {
        this.TableName = "ZipCitiesDownloadedOld";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipCitiesDownloadedOldTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipCitiesDownloadedOld
    {
      public const string TableName = "ZipCitiesDownloadedOld";

      public enum Column { ZipCode, City, State, County, AreaCode, CityType, CityAliasAbbreviation, CityAliasName, Latitude, Longitude, TimeZone, Elevation, CountyFIPS, DayLightSaving, PreferredLastLineKey, ClassificationCode, MultiCounty, StateFIPS, CityStateKey, CityAliasCode, PrimaryRecord, CityMixedCase, CityAliasMixedCase, StateANSI, CountyANSI, FacilityCode, CityDeliveryIndicator, CarrierRouteRateSortation, FinanceNumber, UniqueZIPName, MetaphoneAliasName, MetaphoneAliasAbbreviation }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.City, "City" },
        { Column.State, "State" },
        { Column.County, "County" },
        { Column.AreaCode, "AreaCode" },
        { Column.CityType, "CityType" },
        { Column.CityAliasAbbreviation, "CityAliasAbbreviation" },
        { Column.CityAliasName, "CityAliasName" },
        { Column.Latitude, "Latitude" },
        { Column.Longitude, "Longitude" },
        { Column.TimeZone, "TimeZone" },
        { Column.Elevation, "Elevation" },
        { Column.CountyFIPS, "CountyFIPS" },
        { Column.DayLightSaving, "DayLightSaving" },
        { Column.PreferredLastLineKey, "PreferredLastLineKey" },
        { Column.ClassificationCode, "ClassificationCode" },
        { Column.MultiCounty, "MultiCounty" },
        { Column.StateFIPS, "StateFIPS" },
        { Column.CityStateKey, "CityStateKey" },
        { Column.CityAliasCode, "CityAliasCode" },
        { Column.PrimaryRecord, "PrimaryRecord" },
        { Column.CityMixedCase, "CityMixedCase" },
        { Column.CityAliasMixedCase, "CityAliasMixedCase" },
        { Column.StateANSI, "StateANSI" },
        { Column.CountyANSI, "CountyANSI" },
        { Column.FacilityCode, "FacilityCode" },
        { Column.CityDeliveryIndicator, "CityDeliveryIndicator" },
        { Column.CarrierRouteRateSortation, "CarrierRouteRateSortation" },
        { Column.FinanceNumber, "FinanceNumber" },
        { Column.UniqueZIPName, "UniqueZIPName" },
        { Column.MetaphoneAliasName, "MetaphoneAliasName" },
        { Column.MetaphoneAliasAbbreviation, "MetaphoneAliasAbbreviation" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFIPS, String dayLightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFIPS, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateANSI, String countyANSI, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZIPName, String metaphoneAliasName, String metaphoneAliasAbbreviation)
      {
        Insert(zipCode, city, state, county, areaCode, cityType, cityAliasAbbreviation, cityAliasName, latitude, longitude, timeZone, elevation, countyFIPS, dayLightSaving, preferredLastLineKey, classificationCode, multiCounty, stateFIPS, cityStateKey, cityAliasCode, primaryRecord, cityMixedCase, cityAliasMixedCase, stateANSI, countyANSI, facilityCode, cityDeliveryIndicator, carrierRouteRateSortation, financeNumber, uniqueZIPName, metaphoneAliasName, metaphoneAliasAbbreviation, -1);
      }

      public static void Insert(String zipCode, String city, String state, String county, String areaCode, String cityType, String cityAliasAbbreviation, String cityAliasName, Decimal? latitude, Decimal? longitude, String timeZone, Int32? elevation, String countyFIPS, String dayLightSaving, String preferredLastLineKey, String classificationCode, String multiCounty, String stateFIPS, String cityStateKey, String cityAliasCode, String primaryRecord, String cityMixedCase, String cityAliasMixedCase, String stateANSI, String countyANSI, String facilityCode, String cityDeliveryIndicator, String carrierRouteRateSortation, String financeNumber, String uniqueZIPName, String metaphoneAliasName, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipCitiesDownloadedOld (ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation) VALUES (@ZipCode,@City,@State,@County,@AreaCode,@CityType,@CityAliasAbbreviation,@CityAliasName,@Latitude,@Longitude,@TimeZone,@Elevation,@CountyFIPS,@DayLightSaving,@PreferredLastLineKey,@ClassificationCode,@MultiCounty,@StateFIPS,@CityStateKey,@CityAliasCode,@PrimaryRecord,@CityMixedCase,@CityAliasMixedCase,@StateANSI,@CountyANSI,@FacilityCode,@CityDeliveryIndicator,@CarrierRouteRateSortation,@FinanceNumber,@UniqueZIPName,@MetaphoneAliasName,@MetaphoneAliasAbbreviation)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "City", city);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "AreaCode", areaCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityType", cityType);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "Latitude", latitude);
        VoteZipNewDb.AddCommandParameter(cmd, "Longitude", longitude);
        VoteZipNewDb.AddCommandParameter(cmd, "TimeZone", timeZone);
        VoteZipNewDb.AddCommandParameter(cmd, "Elevation", elevation);
        VoteZipNewDb.AddCommandParameter(cmd, "CountyFIPS", countyFIPS);
        VoteZipNewDb.AddCommandParameter(cmd, "DayLightSaving", dayLightSaving);
        VoteZipNewDb.AddCommandParameter(cmd, "PreferredLastLineKey", preferredLastLineKey);
        VoteZipNewDb.AddCommandParameter(cmd, "ClassificationCode", classificationCode);
        VoteZipNewDb.AddCommandParameter(cmd, "MultiCounty", multiCounty);
        VoteZipNewDb.AddCommandParameter(cmd, "StateFIPS", stateFIPS);
        VoteZipNewDb.AddCommandParameter(cmd, "CityStateKey", cityStateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasCode", cityAliasCode);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryRecord", primaryRecord);
        VoteZipNewDb.AddCommandParameter(cmd, "CityMixedCase", cityMixedCase);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasMixedCase", cityAliasMixedCase);
        VoteZipNewDb.AddCommandParameter(cmd, "StateANSI", stateANSI);
        VoteZipNewDb.AddCommandParameter(cmd, "CountyANSI", countyANSI);
        VoteZipNewDb.AddCommandParameter(cmd, "FacilityCode", facilityCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityDeliveryIndicator", cityDeliveryIndicator);
        VoteZipNewDb.AddCommandParameter(cmd, "CarrierRouteRateSortation", carrierRouteRateSortation);
        VoteZipNewDb.AddCommandParameter(cmd, "FinanceNumber", financeNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "UniqueZIPName", uniqueZIPName);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld";
        }
      }

      public static ZipCitiesDownloadedOldTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipCitiesDownloadedOldTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static ZipCitiesDownloadedOldTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipCitiesDownloadedOldTable FillTable(DbCommand command, ZipCitiesDownloadedOldTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipCitiesDownloadedOldTable table = new ZipCitiesDownloadedOldTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table)
      {
        UpdateTable(table, ZipCitiesDownloadedOldTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table, ZipCitiesDownloadedOldTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table, int commandTimeout)
      {
        UpdateTable(table, ZipCitiesDownloadedOldTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table, ZipCitiesDownloadedOldTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipCitiesDownloadedOldTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipCitiesDownloadedOldTable table, ZipCitiesDownloadedOldTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string AreaCodeColumnName { get { return "AreaCode"; } }

      public static string CityTypeColumnName { get { return "CityType"; } }

      public static string CityAliasAbbreviationColumnName { get { return "CityAliasAbbreviation"; } }

      public static string CityAliasNameColumnName { get { return "CityAliasName"; } }

      public static string LatitudeColumnName { get { return "Latitude"; } }

      public static string LongitudeColumnName { get { return "Longitude"; } }

      public static string TimeZoneColumnName { get { return "TimeZone"; } }

      public static string ElevationColumnName { get { return "Elevation"; } }

      public static string CountyFIPSColumnName { get { return "CountyFIPS"; } }

      public static string DayLightSavingColumnName { get { return "DayLightSaving"; } }

      public static string PreferredLastLineKeyColumnName { get { return "PreferredLastLineKey"; } }

      public static string ClassificationCodeColumnName { get { return "ClassificationCode"; } }

      public static string MultiCountyColumnName { get { return "MultiCounty"; } }

      public static string StateFIPSColumnName { get { return "StateFIPS"; } }

      public static string CityStateKeyColumnName { get { return "CityStateKey"; } }

      public static string CityAliasCodeColumnName { get { return "CityAliasCode"; } }

      public static string PrimaryRecordColumnName { get { return "PrimaryRecord"; } }

      public static string CityMixedCaseColumnName { get { return "CityMixedCase"; } }

      public static string CityAliasMixedCaseColumnName { get { return "CityAliasMixedCase"; } }

      public static string StateANSIColumnName { get { return "StateANSI"; } }

      public static string CountyANSIColumnName { get { return "CountyANSI"; } }

      public static string FacilityCodeColumnName { get { return "FacilityCode"; } }

      public static string CityDeliveryIndicatorColumnName { get { return "CityDeliveryIndicator"; } }

      public static string CarrierRouteRateSortationColumnName { get { return "CarrierRouteRateSortation"; } }

      public static string FinanceNumberColumnName { get { return "FinanceNumber"; } }

      public static string UniqueZIPNameColumnName { get { return "UniqueZIPName"; } }

      public static string MetaphoneAliasNameColumnName { get { return "MetaphoneAliasName"; } }

      public static string MetaphoneAliasAbbreviationColumnName { get { return "MetaphoneAliasAbbreviation"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int CityMaxLength { get { return 35; } }

      public static int StateMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 45; } }

      public static int AreaCodeMaxLength { get { return 55; } }

      public static int CityTypeMaxLength { get { return 1; } }

      public static int CityAliasAbbreviationMaxLength { get { return 13; } }

      public static int CityAliasNameMaxLength { get { return 35; } }

      public static int TimeZoneMaxLength { get { return 2; } }

      public static int CountyFIPSMaxLength { get { return 3; } }

      public static int DayLightSavingMaxLength { get { return 1; } }

      public static int PreferredLastLineKeyMaxLength { get { return 10; } }

      public static int ClassificationCodeMaxLength { get { return 1; } }

      public static int MultiCountyMaxLength { get { return 1; } }

      public static int StateFIPSMaxLength { get { return 2; } }

      public static int CityStateKeyMaxLength { get { return 6; } }

      public static int CityAliasCodeMaxLength { get { return 5; } }

      public static int PrimaryRecordMaxLength { get { return 1; } }

      public static int CityMixedCaseMaxLength { get { return 35; } }

      public static int CityAliasMixedCaseMaxLength { get { return 35; } }

      public static int StateANSIMaxLength { get { return 2; } }

      public static int CountyANSIMaxLength { get { return 3; } }

      public static int FacilityCodeMaxLength { get { return 1; } }

      public static int CityDeliveryIndicatorMaxLength { get { return 1; } }

      public static int CarrierRouteRateSortationMaxLength { get { return 1; } }

      public static int FinanceNumberMaxLength { get { return 6; } }

      public static int UniqueZIPNameMaxLength { get { return 1; } }

      public static int MetaphoneAliasNameMaxLength { get { return 35; } }

      public static int MetaphoneAliasAbbreviationMaxLength { get { return 13; } }

      public static bool ZipCodeCityAliasNameExists(String zipCode, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetZipCodeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetZipCodeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT City FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetStateByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetStateByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT State FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCountyByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCountyByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAreaCodeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetAreaCodeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetAreaCodeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AreaCode FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityTypeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityTypeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityTypeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityType FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasAbbreviationByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasAbbreviationByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasAbbreviationByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasNameByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasNameByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasNameByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasName FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Decimal? GetLatitudeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return _GetLatitudeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static Decimal GetLatitudeByZipCodeCityAliasName(String zipCode, String cityAliasName, Decimal defaultValue)
      {
        return _GetLatitudeByZipCodeCityAliasName(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Decimal? _GetLatitudeByZipCodeCityAliasName(String zipCode, String cityAliasName, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT Latitude FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetLongitudeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return _GetLongitudeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static Decimal GetLongitudeByZipCodeCityAliasName(String zipCode, String cityAliasName, Decimal defaultValue)
      {
        return _GetLongitudeByZipCodeCityAliasName(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Decimal? _GetLongitudeByZipCodeCityAliasName(String zipCode, String cityAliasName, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT Longitude FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static String GetTimeZoneByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetTimeZoneByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetTimeZoneByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT TimeZone FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetElevationByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return _GetElevationByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static Int32 GetElevationByZipCodeCityAliasName(String zipCode, String cityAliasName, Int32 defaultValue)
      {
        return _GetElevationByZipCodeCityAliasName(zipCode, cityAliasName, defaultValue).Value;
      }

      private static Int32? _GetElevationByZipCodeCityAliasName(String zipCode, String cityAliasName, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Elevation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetCountyFIPSByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCountyFIPSByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCountyFIPSByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CountyFIPS FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDayLightSavingByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetDayLightSavingByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetDayLightSavingByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT DayLightSaving FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPreferredLastLineKeyByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetPreferredLastLineKeyByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetPreferredLastLineKeyByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PreferredLastLineKey FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetClassificationCodeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetClassificationCodeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetClassificationCodeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ClassificationCode FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMultiCountyByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetMultiCountyByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetMultiCountyByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MultiCounty FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateFIPSByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetStateFIPSByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetStateFIPSByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateFIPS FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityStateKeyByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityStateKeyByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityStateKeyByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityStateKey FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasCodeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasCodeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasCodeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasCode FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryRecordByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetPrimaryRecordByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetPrimaryRecordByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PrimaryRecord FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityMixedCaseByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityMixedCaseByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityMixedCaseByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityMixedCase FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityAliasMixedCaseByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityAliasMixedCaseByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityAliasMixedCaseByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityAliasMixedCase FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateANSIByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetStateANSIByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetStateANSIByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateANSI FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyANSIByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCountyANSIByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCountyANSIByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CountyANSI FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFacilityCodeByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetFacilityCodeByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetFacilityCodeByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FacilityCode FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityDeliveryIndicatorByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCityDeliveryIndicatorByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCityDeliveryIndicatorByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CityDeliveryIndicator FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCarrierRouteRateSortationByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetCarrierRouteRateSortationByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetCarrierRouteRateSortationByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CarrierRouteRateSortation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFinanceNumberByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetFinanceNumberByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetFinanceNumberByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FinanceNumber FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUniqueZIPNameByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetUniqueZIPNameByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetUniqueZIPNameByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UniqueZIPName FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneAliasNameByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetMetaphoneAliasNameByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetMetaphoneAliasNameByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MetaphoneAliasName FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneAliasAbbreviationByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetMetaphoneAliasAbbreviationByZipCodeCityAliasName(zipCode, cityAliasName, null);
      }

      public static String GetMetaphoneAliasAbbreviationByZipCodeCityAliasName(String zipCode, String cityAliasName, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZipCodeCityAliasName(Column _column, String zipCode, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return GetDataByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByZipCodeCityAliasName(Decimal? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByZipCodeCityAliasName(Decimal? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByZipCodeCityAliasName(Int32? newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByZipCodeCityAliasName(String newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeCityAliasName(Column _column, object newValue, String zipCode, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeCityAliasName(String zipCode, String cityAliasName)
      {
        return DeleteByZipCodeCityAliasName(zipCode, cityAliasName, -1);
      }

      public static int DeleteByZipCodeCityAliasName(String zipCode, String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCode(String zipCode, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCode(String zipCode)
      {
        return CountByZipCode(zipCode, -1);
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByZipCode(Decimal? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByZipCode(Decimal? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByZipCode(Int32? newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateCityAliasName(String state, String cityAliasName)
      {
        return CountByStateCityAliasName(state, cityAliasName, -1);
      }

      public static object GetColumnByStateCityAliasName(Column _column, String state, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateCityAliasName(String state, String cityAliasName)
      {
        return GetDataByStateCityAliasName(state, cityAliasName, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateCityAliasName(Decimal? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateCityAliasName(Decimal? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateCityAliasName(Int32? newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateCityAliasName(String newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCityAliasName(Column _column, object newValue, String state, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE State=@State AND CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCityAliasName(String state, String cityAliasName)
      {
        return DeleteByStateCityAliasName(state, cityAliasName, -1);
      }

      public static int DeleteByStateCityAliasName(String state, String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCityAliasName(String cityAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByCityAliasName(String cityAliasName)
      {
        return CountByCityAliasName(cityAliasName, -1);
      }

      public static object GetColumnByCityAliasName(Column _column, String cityAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByCityAliasName(String cityAliasName)
      {
        return GetDataByCityAliasName(cityAliasName, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByCityAliasName(Decimal? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByCityAliasName(Decimal? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByCityAliasName(Int32? newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByCityAliasName(String newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCityAliasName(Column _column, object newValue, String cityAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE CityAliasName=@CityAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCityAliasName(String cityAliasName)
      {
        return DeleteByCityAliasName(cityAliasName, -1);
      }

      public static int DeleteByCityAliasName(String cityAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE CityAliasName=@CityAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasName", cityAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return CountByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static object GetColumnByStateMetaphoneAliasName(Column _column, String state, String metaphoneAliasName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return GetDataByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateMetaphoneAliasName(Decimal? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateMetaphoneAliasName(Decimal? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateMetaphoneAliasName(Int32? newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateMetaphoneAliasName(String newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateMetaphoneAliasName(Column _column, object newValue, String state, String metaphoneAliasName)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateMetaphoneAliasName(String state, String metaphoneAliasName)
      {
        return DeleteByStateMetaphoneAliasName(state, metaphoneAliasName, -1);
      }

      public static int DeleteByStateMetaphoneAliasName(String state, String metaphoneAliasName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasName=@MetaphoneAliasName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasName", metaphoneAliasName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return CountByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static object GetColumnByStateCityAliasAbbreviation(Column _column, String state, String cityAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return GetDataByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateCityAliasAbbreviation(Decimal? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateCityAliasAbbreviation(Decimal? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateCityAliasAbbreviation(Int32? newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateCityAliasAbbreviation(String newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCityAliasAbbreviation(Column _column, object newValue, String state, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation)
      {
        return DeleteByStateCityAliasAbbreviation(state, cityAliasAbbreviation, -1);
      }

      public static int DeleteByStateCityAliasAbbreviation(String state, String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE State=@State AND CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return CountByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static object GetColumnByCityAliasAbbreviation(Column _column, String cityAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return GetDataByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByCityAliasAbbreviation(Decimal? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByCityAliasAbbreviation(Decimal? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByCityAliasAbbreviation(Int32? newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByCityAliasAbbreviation(String newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCityAliasAbbreviation(Column _column, object newValue, String cityAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCityAliasAbbreviation(String cityAliasAbbreviation)
      {
        return DeleteByCityAliasAbbreviation(cityAliasAbbreviation, -1);
      }

      public static int DeleteByCityAliasAbbreviation(String cityAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE CityAliasAbbreviation=@CityAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "CityAliasAbbreviation", cityAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return CountByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static object GetColumnByStateMetaphoneAliasAbbreviation(Column _column, String state, String metaphoneAliasAbbreviation)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return GetDataByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static ZipCitiesDownloadedOldTable GetDataByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,City,State,County,AreaCode,CityType,CityAliasAbbreviation,CityAliasName,Latitude,Longitude,TimeZone,Elevation,CountyFIPS,DayLightSaving,PreferredLastLineKey,ClassificationCode,MultiCounty,StateFIPS,CityStateKey,CityAliasCode,PrimaryRecord,CityMixedCase,CityAliasMixedCase,StateANSI,CountyANSI,FacilityCode,CityDeliveryIndicator,CarrierRouteRateSortation,FinanceNumber,UniqueZIPName,MetaphoneAliasName,MetaphoneAliasAbbreviation FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return FillTable(cmd, ZipCitiesDownloadedOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ZipCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET City=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET State=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET County=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAreaCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET AreaCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityTypeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityType=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasAbbreviationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeByStateMetaphoneAliasAbbreviation(Decimal? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Latitude=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLongitudeByStateMetaphoneAliasAbbreviation(Decimal? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Longitude=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTimeZoneByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET TimeZone=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElevationByStateMetaphoneAliasAbbreviation(Int32? newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET Elevation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFIPSByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyFIPS=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDayLightSavingByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET DayLightSaving=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PreferredLastLineKey=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateClassificationCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET ClassificationCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMultiCountyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MultiCounty=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateFIPSByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateFIPS=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityStateKeyByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityStateKey=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryRecordByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET PrimaryRecord=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityMixedCaseByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityMixedCase=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityAliasMixedCaseByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityAliasMixedCase=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateANSIByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET StateANSI=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyANSIByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CountyANSI=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFacilityCodeByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FacilityCode=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityDeliveryIndicatorByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CityDeliveryIndicator=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteRateSortationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET CarrierRouteRateSortation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET FinanceNumber=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUniqueZIPNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET UniqueZIPName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasNameByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasName=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneAliasAbbreviationByStateMetaphoneAliasAbbreviation(String newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET MetaphoneAliasAbbreviation=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateMetaphoneAliasAbbreviation(Column _column, object newValue, String state, String metaphoneAliasAbbreviation)
      {
        string cmdText = "UPDATE ZipCitiesDownloadedOld SET {0}=@newValue WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation)
      {
        return DeleteByStateMetaphoneAliasAbbreviation(state, metaphoneAliasAbbreviation, -1);
      }

      public static int DeleteByStateMetaphoneAliasAbbreviation(String state, String metaphoneAliasAbbreviation, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipCitiesDownloadedOld WHERE State=@State AND MetaphoneAliasAbbreviation=@MetaphoneAliasAbbreviation";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "MetaphoneAliasAbbreviation", metaphoneAliasAbbreviation);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipCitiesDownloadedOldTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipCitiesDownloadedOldTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipCitiesDownloadedOld()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.ZipCitiesDownloadedOld

    #region votezipnew.ZipSingleUSZD

    public partial class ZipSingleUszdRow : DataRow
    {
      internal ZipSingleUszdRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["LdsStateCode"] as String; }
        set { if (value == null) this["LdsStateCode"] = DBNull.Value; else this["LdsStateCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }
    }

    [Serializable]
    public partial class ZipSingleUszdTable : TypedTableBase<ZipSingleUszdRow>
    {
      public ZipSingleUszdRow this[int index] { get { return (ZipSingleUszdRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipSingleUszdRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipSingleUszdTable(); }

      new public ZipSingleUszdRow NewRow() { return (ZipSingleUszdRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipSingleUszdRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipSingleUszdRow); }

      public void RemoveRow(ZipSingleUszdRow row) { this.Rows.Remove(row); }

      public ZipSingleUszdRow NewRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUszdRow row = NewRow();
        row.ZipCode = zipCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.LdsStateCode = ldsStateCode;
        row.County = county;
        row.StateCode = stateCode;
        return row;
      }

      public void AddRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUszdRow row = NewRow(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["LdsStateCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LdsStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipSingleUszdTable() : this(ColumnSet.All) { }

      public ZipSingleUszdTable(ColumnSet columnSet)
      {
        this.TableName = "ZipSingleUSZD";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipSingleUszdTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipSingleUszd
    {
      public const string TableName = "ZipSingleUSZD";

      public enum Column { ZipCode, Congress, StateSenate, StateHouse, LdsStateCode, County, StateCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.LdsStateCode, "LdsStateCode" },
        { Column.County, "County" },
        { Column.StateCode, "StateCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZD";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE ZipSingleUSZD";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        Insert(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode, -1);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipSingleUSZD (ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode) VALUES (@ZipCode,@Congress,@StateSenate,@StateHouse,@LdsStateCode,@County,@StateCode)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZD";
        }
      }

      public static ZipSingleUszdTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipSingleUszdTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZD";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipSingleUszdTable.ColumnSet.All);
      }

      public static ZipSingleUszdReader GetAllDataReader()
      {
        return GetAllDataReader(-1);
      }

      public static ZipSingleUszdReader GetAllDataReader(int commandTimeout)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipSingleUszdReader(cmd.ExecuteReader(), cn);
      }

      public static ZipSingleUszdTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipSingleUszdTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipSingleUszdTable FillTable(DbCommand command, ZipSingleUszdTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipSingleUszdTable table = new ZipSingleUszdTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipSingleUszdTable table)
      {
        UpdateTable(table, ZipSingleUszdTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUszdTable table, ZipSingleUszdTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUszdTable table, int commandTimeout)
      {
        UpdateTable(table, ZipSingleUszdTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUszdTable table, ZipSingleUszdTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUszdTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipSingleUszdTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipSingleUszdTable table, ZipSingleUszdTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string LdsStateCodeColumnName { get { return "LdsStateCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int CongressMaxLength { get { return 2; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static bool ZipCodeExists(String zipCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByZipCode(String zipCode)
      {
        return GetZipCodeByZipCode(zipCode, null);
      }

      public static String GetZipCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByZipCode(String zipCode)
      {
        return GetCongressByZipCode(zipCode, null);
      }

      public static String GetCongressByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByZipCode(String zipCode)
      {
        return GetStateSenateByZipCode(zipCode, null);
      }

      public static String GetStateSenateByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByZipCode(String zipCode)
      {
        return GetStateHouseByZipCode(zipCode, null);
      }

      public static String GetStateHouseByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByZipCode(String zipCode)
      {
        return GetLdsStateCodeByZipCode(zipCode, null);
      }

      public static String GetLdsStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LdsStateCode FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByZipCode(String zipCode)
      {
        return GetCountyByZipCode(zipCode, null);
      }

      public static String GetCountyByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByZipCode(String zipCode)
      {
        return GetStateCodeByZipCode(zipCode, null);
      }

      public static String GetStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipSingleUszdTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipSingleUszdTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipSingleUszdTable.ColumnSet.All);
      }

      public static ZipSingleUszdReader GetDataReaderByZipCode(String zipCode)
      {
        return GetDataReaderByZipCode(zipCode, -1);
      }

      public static ZipSingleUszdReader GetDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipSingleUszdTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipSingleUszdReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET Congress=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET StateSenate=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET StateHouse=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET LdsStateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET StateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZD SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipSingleUSZD WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipSingleUszdTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipSingleUszdTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipSingleUszd()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class ZipSingleUszdReader : DataReaderBase
    {
      public ZipSingleUszdReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
      }

      public String LdsStateCode
      {
        get { return this["LdsStateCode"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }
    }

    #endregion votezipnew.ZipSingleUSZD

    #region votezipnew.ZipSingleUSZDOld

    public partial class ZipSingleUSZDOldRow : DataRow
    {
      internal ZipSingleUSZDOldRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["LdsStateCode"] as String; }
        set { if (value == null) this["LdsStateCode"] = DBNull.Value; else this["LdsStateCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }
    }

    [Serializable]
    public partial class ZipSingleUSZDOldTable : TypedTableBase<ZipSingleUSZDOldRow>
    {
      public ZipSingleUSZDOldRow this[int index] { get { return (ZipSingleUSZDOldRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipSingleUSZDOldRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipSingleUSZDOldTable(); }

      new public ZipSingleUSZDOldRow NewRow() { return (ZipSingleUSZDOldRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipSingleUSZDOldRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipSingleUSZDOldRow); }

      public void RemoveRow(ZipSingleUSZDOldRow row) { this.Rows.Remove(row); }

      public ZipSingleUSZDOldRow NewRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUSZDOldRow row = NewRow();
        row.ZipCode = zipCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.LdsStateCode = ldsStateCode;
        row.County = county;
        row.StateCode = stateCode;
        return row;
      }

      public void AddRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUSZDOldRow row = NewRow(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["LdsStateCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LdsStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipSingleUSZDOldTable() : this(ColumnSet.All) { }

      public ZipSingleUSZDOldTable(ColumnSet columnSet)
      {
        this.TableName = "ZipSingleUSZDOld";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipSingleUSZDOldTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipSingleUSZDOld
    {
      public const string TableName = "ZipSingleUSZDOld";

      public enum Column { ZipCode, Congress, StateSenate, StateHouse, LdsStateCode, County, StateCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.LdsStateCode, "LdsStateCode" },
        { Column.County, "County" },
        { Column.StateCode, "StateCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZDOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        Insert(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode, -1);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipSingleUSZDOld (ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode) VALUES (@ZipCode,@Congress,@StateSenate,@StateHouse,@LdsStateCode,@County,@StateCode)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDOld";
        }
      }

      public static ZipSingleUSZDOldTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipSingleUSZDOldTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipSingleUSZDOldTable.ColumnSet.All);
      }

      public static ZipSingleUSZDOldTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipSingleUSZDOldTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipSingleUSZDOldTable FillTable(DbCommand command, ZipSingleUSZDOldTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipSingleUSZDOldTable table = new ZipSingleUSZDOldTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table)
      {
        UpdateTable(table, ZipSingleUSZDOldTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table, ZipSingleUSZDOldTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table, int commandTimeout)
      {
        UpdateTable(table, ZipSingleUSZDOldTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table, ZipSingleUSZDOldTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipSingleUSZDOldTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipSingleUSZDOldTable table, ZipSingleUSZDOldTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string LdsStateCodeColumnName { get { return "LdsStateCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int CongressMaxLength { get { return 2; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static bool ZipCodeExists(String zipCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByZipCode(String zipCode)
      {
        return GetZipCodeByZipCode(zipCode, null);
      }

      public static String GetZipCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByZipCode(String zipCode)
      {
        return GetCongressByZipCode(zipCode, null);
      }

      public static String GetCongressByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByZipCode(String zipCode)
      {
        return GetStateSenateByZipCode(zipCode, null);
      }

      public static String GetStateSenateByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByZipCode(String zipCode)
      {
        return GetStateHouseByZipCode(zipCode, null);
      }

      public static String GetStateHouseByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByZipCode(String zipCode)
      {
        return GetLdsStateCodeByZipCode(zipCode, null);
      }

      public static String GetLdsStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LdsStateCode FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByZipCode(String zipCode)
      {
        return GetCountyByZipCode(zipCode, null);
      }

      public static String GetCountyByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByZipCode(String zipCode)
      {
        return GetStateCodeByZipCode(zipCode, null);
      }

      public static String GetStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipSingleUSZDOldTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipSingleUSZDOldTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipSingleUSZDOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET Congress=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET StateSenate=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET StateHouse=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET LdsStateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET StateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDOld SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipSingleUSZDOld WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipSingleUSZDOldTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipSingleUSZDOldTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipSingleUSZDOld()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.ZipSingleUSZDOld

    #region votezipnew.ZipSingleUSZDTemp

    public partial class ZipSingleUSZDTempRow : DataRow
    {
      internal ZipSingleUSZDTempRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String LdsStateCode
      {
        get { return this["LdsStateCode"] as String; }
        set { if (value == null) this["LdsStateCode"] = DBNull.Value; else this["LdsStateCode"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }
    }

    [Serializable]
    public partial class ZipSingleUSZDTempTable : TypedTableBase<ZipSingleUSZDTempRow>
    {
      public ZipSingleUSZDTempRow this[int index] { get { return (ZipSingleUSZDTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipSingleUSZDTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipSingleUSZDTempTable(); }

      new public ZipSingleUSZDTempRow NewRow() { return (ZipSingleUSZDTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipSingleUSZDTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipSingleUSZDTempRow); }

      public void RemoveRow(ZipSingleUSZDTempRow row) { this.Rows.Remove(row); }

      public ZipSingleUSZDTempRow NewRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUSZDTempRow row = NewRow();
        row.ZipCode = zipCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.LdsStateCode = ldsStateCode;
        row.County = county;
        row.StateCode = stateCode;
        return row;
      }

      public void AddRow(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        ZipSingleUSZDTempRow row = NewRow(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn LdsStateCodeColumn { get { return this.Columns["LdsStateCode"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LdsStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipSingleUSZDTempTable() : this(ColumnSet.All) { }

      public ZipSingleUSZDTempTable(ColumnSet columnSet)
      {
        this.TableName = "ZipSingleUSZDTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipSingleUSZDTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipSingleUSZDTemp
    {
      public const string TableName = "ZipSingleUSZDTemp";

      public enum Column { ZipCode, Congress, StateSenate, StateHouse, LdsStateCode, County, StateCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.LdsStateCode, "LdsStateCode" },
        { Column.County, "County" },
        { Column.StateCode, "StateCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZDTemp";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode)
      {
        Insert(zipCode, congress, stateSenate, stateHouse, ldsStateCode, county, stateCode, -1);
      }

      public static void Insert(String zipCode, String congress, String stateSenate, String stateHouse, String ldsStateCode, String county, String stateCode, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipSingleUSZDTemp (ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode) VALUES (@ZipCode,@Congress,@StateSenate,@StateHouse,@LdsStateCode,@County,@StateCode)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "LdsStateCode", ldsStateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDTemp";
        }
      }

      public static ZipSingleUSZDTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipSingleUSZDTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDTemp";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipSingleUSZDTempTable.ColumnSet.All);
      }

      public static ZipSingleUSZDTempTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipSingleUSZDTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipSingleUSZDTempTable FillTable(DbCommand command, ZipSingleUSZDTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipSingleUSZDTempTable table = new ZipSingleUSZDTempTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table)
      {
        UpdateTable(table, ZipSingleUSZDTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table, ZipSingleUSZDTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table, int commandTimeout)
      {
        UpdateTable(table, ZipSingleUSZDTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table, ZipSingleUSZDTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipSingleUSZDTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipSingleUSZDTempTable table, ZipSingleUSZDTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string LdsStateCodeColumnName { get { return "LdsStateCode"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int CongressMaxLength { get { return 2; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int LdsStateCodeMaxLength { get { return 2; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static bool ZipCodeExists(String zipCode)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByZipCode(String zipCode)
      {
        return GetZipCodeByZipCode(zipCode, null);
      }

      public static String GetZipCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByZipCode(String zipCode)
      {
        return GetCongressByZipCode(zipCode, null);
      }

      public static String GetCongressByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByZipCode(String zipCode)
      {
        return GetStateSenateByZipCode(zipCode, null);
      }

      public static String GetStateSenateByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByZipCode(String zipCode)
      {
        return GetStateHouseByZipCode(zipCode, null);
      }

      public static String GetStateHouseByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLdsStateCodeByZipCode(String zipCode)
      {
        return GetLdsStateCodeByZipCode(zipCode, null);
      }

      public static String GetLdsStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LdsStateCode FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByZipCode(String zipCode)
      {
        return GetCountyByZipCode(zipCode, null);
      }

      public static String GetCountyByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByZipCode(String zipCode)
      {
        return GetStateCodeByZipCode(zipCode, null);
      }

      public static String GetStateCodeByZipCode(String zipCode, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipSingleUSZDTempTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipSingleUSZDTempTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,Congress,StateSenate,StateHouse,LdsStateCode,County,StateCode FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipSingleUSZDTempTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET Congress=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET StateSenate=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET StateHouse=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLdsStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET LdsStateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET StateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipSingleUSZDTemp SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipSingleUSZDTemp WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipSingleUSZDTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipSingleUSZDTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipSingleUSZDTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.ZipSingleUSZDTemp

    #region votezipnew.ZipStreets

    public partial class ZipStreetsRow : DataRow
    {
      internal ZipStreetsRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
        set { if (value == null) this["UpdateKey"] = DBNull.Value; else this["UpdateKey"] = value; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
        set { if (value == null) this["StPreDirAbbr"] = DBNull.Value; else this["StPreDirAbbr"] = value; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
        set { if (value == null) this["StName"] = DBNull.Value; else this["StName"] = value; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
        set { if (value == null) this["StSuffixAbbr"] = DBNull.Value; else this["StSuffixAbbr"] = value; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
        set { if (value == null) this["StPostDirAbbr"] = DBNull.Value; else this["StPostDirAbbr"] = value; }
      }

      public String PrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
        set { if (value == null) this["AddressPrimaryLowNumber"] = DBNull.Value; else this["AddressPrimaryLowNumber"] = value; }
      }

      public String PrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
        set { if (value == null) this["AddressPrimaryHighNumber"] = DBNull.Value; else this["AddressPrimaryHighNumber"] = value; }
      }

      public String PrimaryOddEven
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
        set { if (value == null) this["AddressPrimaryEvenOdd"] = DBNull.Value; else this["AddressPrimaryEvenOdd"] = value; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
        set { if (value == null) this["BuildingName"] = DBNull.Value; else this["BuildingName"] = value; }
      }

      public String SecondaryType
      {
        get { return this["AddressSecAbbr"] as String; }
        set { if (value == null) this["AddressSecAbbr"] = DBNull.Value; else this["AddressSecAbbr"] = value; }
      }

      public String SecondaryLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
        set { if (value == null) this["AddressSecLowNumber"] = DBNull.Value; else this["AddressSecLowNumber"] = value; }
      }

      public String SecondaryHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
        set { if (value == null) this["AddressSecHighNumber"] = DBNull.Value; else this["AddressSecHighNumber"] = value; }
      }

      public String SecondaryOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
        set { if (value == null) this["AddressSecOddEven"] = DBNull.Value; else this["AddressSecOddEven"] = value; }
      }

      public String Metaphone
      {
        get { return this["Metaphone"] as String; }
        set { if (value == null) this["Metaphone"] = DBNull.Value; else this["Metaphone"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }
    }

    [Serializable]
    public partial class ZipStreetsTable : TypedTableBase<ZipStreetsRow>
    {
      public ZipStreetsRow this[int index] { get { return (ZipStreetsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipStreetsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipStreetsTable(); }

      new public ZipStreetsRow NewRow() { return (ZipStreetsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipStreetsRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipStreetsRow); }

      public void RemoveRow(ZipStreetsRow row) { this.Rows.Remove(row); }

      public ZipStreetsRow NewRow(String zipCode, String updateKey, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsRow row = NewRow();
        row.ZipCode = zipCode;
        row.UpdateKey = updateKey;
        row.DirectionPrefix = directionPrefix;
        row.StreetName = streetName;
        row.StreetSuffix = streetSuffix;
        row.DirectionSuffix = directionSuffix;
        row.PrimaryLowNumber = primaryLowNumber;
        row.PrimaryHighNumber = primaryHighNumber;
        row.PrimaryOddEven = primaryOddEven;
        row.BuildingName = buildingName;
        row.SecondaryType = secondaryType;
        row.SecondaryLowNumber = secondaryLowNumber;
        row.SecondaryHighNumber = secondaryHighNumber;
        row.SecondaryOddEven = secondaryOddEven;
        row.Metaphone = metaphone;
        row.StateCode = stateCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.County = county;
        return row;
      }

      public void AddRow(String zipCode, String updateKey, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsRow row = NewRow(zipCode, updateKey, directionPrefix, streetName, streetSuffix, directionSuffix, primaryLowNumber, primaryHighNumber, primaryOddEven, buildingName, secondaryType, secondaryLowNumber, secondaryHighNumber, secondaryOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn UpdateKeyColumn { get { return this.Columns["UpdateKey"]; } }

      public DataColumn DirectionPrefixColumn { get { return this.Columns["StPreDirAbbr"]; } }

      public DataColumn StreetNameColumn { get { return this.Columns["StName"]; } }

      public DataColumn StreetSuffixColumn { get { return this.Columns["StSuffixAbbr"]; } }

      public DataColumn DirectionSuffixColumn { get { return this.Columns["StPostDirAbbr"]; } }

      public DataColumn PrimaryLowNumberColumn { get { return this.Columns["AddressPrimaryLowNumber"]; } }

      public DataColumn PrimaryHighNumberColumn { get { return this.Columns["AddressPrimaryHighNumber"]; } }

      public DataColumn PrimaryOddEvenColumn { get { return this.Columns["AddressPrimaryEvenOdd"]; } }

      public DataColumn BuildingNameColumn { get { return this.Columns["BuildingName"]; } }

      public DataColumn SecondaryTypeColumn { get { return this.Columns["AddressSecAbbr"]; } }

      public DataColumn SecondaryLowNumberColumn { get { return this.Columns["AddressSecLowNumber"]; } }

      public DataColumn SecondaryHighNumberColumn { get { return this.Columns["AddressSecHighNumber"]; } }

      public DataColumn SecondaryOddEvenColumn { get { return this.Columns["AddressSecOddEven"]; } }

      public DataColumn MetaphoneColumn { get { return this.Columns["Metaphone"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UpdateKey", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BuildingName", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecOddEven", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Metaphone", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipStreetsTable() : this(ColumnSet.All) { }

      public ZipStreetsTable(ColumnSet columnSet)
      {
        this.TableName = "ZipStreets";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipStreetsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipStreets
    {
      public const string TableName = "ZipStreets";

      public enum Column { ZipCode, UpdateKey, DirectionPrefix, StreetName, StreetSuffix, DirectionSuffix, PrimaryLowNumber, PrimaryHighNumber, PrimaryOddEven, BuildingName, SecondaryType, SecondaryLowNumber, SecondaryHighNumber, SecondaryOddEven, Metaphone, StateCode, Congress, StateSenate, StateHouse, County }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.UpdateKey, "UpdateKey" },
        { Column.DirectionPrefix, "StPreDirAbbr" },
        { Column.StreetName, "StName" },
        { Column.StreetSuffix, "StSuffixAbbr" },
        { Column.DirectionSuffix, "StPostDirAbbr" },
        { Column.PrimaryLowNumber, "AddressPrimaryLowNumber" },
        { Column.PrimaryHighNumber, "AddressPrimaryHighNumber" },
        { Column.PrimaryOddEven, "AddressPrimaryEvenOdd" },
        { Column.BuildingName, "BuildingName" },
        { Column.SecondaryType, "AddressSecAbbr" },
        { Column.SecondaryLowNumber, "AddressSecLowNumber" },
        { Column.SecondaryHighNumber, "AddressSecHighNumber" },
        { Column.SecondaryOddEven, "AddressSecOddEven" },
        { Column.Metaphone, "Metaphone" },
        { Column.StateCode, "StateCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.County, "County" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String updateKey, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        Insert(zipCode, updateKey, directionPrefix, streetName, streetSuffix, directionSuffix, primaryLowNumber, primaryHighNumber, primaryOddEven, buildingName, secondaryType, secondaryLowNumber, secondaryHighNumber, secondaryOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county, -1);
      }

      public static void Insert(String zipCode, String updateKey, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipStreets (ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County) VALUES (@ZipCode,@UpdateKey,@DirectionPrefix,@StreetName,@StreetSuffix,@DirectionSuffix,@PrimaryLowNumber,@PrimaryHighNumber,@PrimaryOddEven,@BuildingName,@SecondaryType,@SecondaryLowNumber,@SecondaryHighNumber,@SecondaryOddEven,@Metaphone,@StateCode,@Congress,@StateSenate,@StateHouse,@County)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryLowNumber", primaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryHighNumber", primaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryOddEven", primaryOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "BuildingName", buildingName);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryType", secondaryType);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryLowNumber", secondaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryHighNumber", secondaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryOddEven", secondaryOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets";
        }
      }

      public static ZipStreetsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipStreetsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetAllDataReader()
      {
        return GetAllDataReader(-1);
      }

      public static ZipStreetsReader GetAllDataReader(int commandTimeout)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static ZipStreetsTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipStreetsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipStreetsTable FillTable(DbCommand command, ZipStreetsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipStreetsTable table = new ZipStreetsTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipStreetsTable table)
      {
        UpdateTable(table, ZipStreetsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTable table, ZipStreetsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTable table, int commandTimeout)
      {
        UpdateTable(table, ZipStreetsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTable table, ZipStreetsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipStreetsTable table, ZipStreetsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string UpdateKeyColumnName { get { return "UpdateKey"; } }

      public static string DirectionPrefixColumnName { get { return "StPreDirAbbr"; } }

      public static string StreetNameColumnName { get { return "StName"; } }

      public static string StreetSuffixColumnName { get { return "StSuffixAbbr"; } }

      public static string DirectionSuffixColumnName { get { return "StPostDirAbbr"; } }

      public static string PrimaryLowNumberColumnName { get { return "AddressPrimaryLowNumber"; } }

      public static string PrimaryHighNumberColumnName { get { return "AddressPrimaryHighNumber"; } }

      public static string PrimaryOddEvenColumnName { get { return "AddressPrimaryEvenOdd"; } }

      public static string BuildingNameColumnName { get { return "BuildingName"; } }

      public static string SecondaryTypeColumnName { get { return "AddressSecAbbr"; } }

      public static string SecondaryLowNumberColumnName { get { return "AddressSecLowNumber"; } }

      public static string SecondaryHighNumberColumnName { get { return "AddressSecHighNumber"; } }

      public static string SecondaryOddEvenColumnName { get { return "AddressSecOddEven"; } }

      public static string MetaphoneColumnName { get { return "Metaphone"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int UpdateKeyMaxLength { get { return 14; } }

      public static int DirectionPrefixMaxLength { get { return 2; } }

      public static int StreetNameMaxLength { get { return 28; } }

      public static int StreetSuffixMaxLength { get { return 4; } }

      public static int DirectionSuffixMaxLength { get { return 2; } }

      public static int PrimaryLowNumberMaxLength { get { return 10; } }

      public static int PrimaryHighNumberMaxLength { get { return 10; } }

      public static int PrimaryOddEvenMaxLength { get { return 1; } }

      public static int BuildingNameMaxLength { get { return 40; } }

      public static int SecondaryTypeMaxLength { get { return 4; } }

      public static int SecondaryLowNumberMaxLength { get { return 10; } }

      public static int SecondaryHighNumberMaxLength { get { return 10; } }

      public static int SecondaryOddEvenMaxLength { get { return 1; } }

      public static int MetaphoneMaxLength { get { return 28; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CongressMaxLength { get { return 3; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static int CountByZipCode(String zipCode, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCode(String zipCode)
      {
        return CountByZipCode(zipCode, -1);
      }

      public static object GetColumnByZipCode(Column _column, String zipCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreets WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTable GetDataByZipCode(String zipCode)
      {
        return GetDataByZipCode(zipCode, -1);
      }

      public static ZipStreetsTable GetDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetDataReaderByZipCode(String zipCode)
      {
        return GetDataReaderByZipCode(zipCode, -1);
      }

      public static ZipStreetsReader GetDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET ZipCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET UpdateKey=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET BuildingName=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET Metaphone=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StateCode=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET Congress=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StateSenate=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET StateHouse=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCode(String newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET County=@newValue WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCode(Column _column, object newValue, String zipCode)
      {
        string cmdText = "UPDATE ZipStreets SET {0}=@newValue WHERE ZipCode=@ZipCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCode(String zipCode)
      {
        return DeleteByZipCode(zipCode, -1);
      }

      public static int DeleteByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreets WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return CountByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static object GetColumnByFullStreetName(Column _column, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreets WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTable GetDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDataByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsTable GetDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDataReaderByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsReader GetDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StName=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StateCode=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET Congress=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET County=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFullStreetName(Column _column, object newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreets SET {0}=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return DeleteByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static int DeleteByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreets WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static bool UpdateKeyExists(String updateKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByUpdateKey(String updateKey)
      {
        return GetZipCodeByUpdateKey(updateKey, null);
      }

      public static String GetZipCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey)
      {
        return GetUpdateKeyByUpdateKey(updateKey, null);
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UpdateKey FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionPrefixByUpdateKey(String updateKey)
      {
        return GetDirectionPrefixByUpdateKey(updateKey, null);
      }

      public static String GetDirectionPrefixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPreDirAbbr FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetNameByUpdateKey(String updateKey)
      {
        return GetStreetNameByUpdateKey(updateKey, null);
      }

      public static String GetStreetNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StName FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetSuffixByUpdateKey(String updateKey)
      {
        return GetStreetSuffixByUpdateKey(updateKey, null);
      }

      public static String GetStreetSuffixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StSuffixAbbr FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionSuffixByUpdateKey(String updateKey)
      {
        return GetDirectionSuffixByUpdateKey(updateKey, null);
      }

      public static String GetDirectionSuffixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPostDirAbbr FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryLowNumberByUpdateKey(String updateKey)
      {
        return GetPrimaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryLowNumber FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryHighNumberByUpdateKey(String updateKey)
      {
        return GetPrimaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryHighNumber FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryOddEvenByUpdateKey(String updateKey)
      {
        return GetPrimaryOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryEvenOdd FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBuildingNameByUpdateKey(String updateKey)
      {
        return GetBuildingNameByUpdateKey(updateKey, null);
      }

      public static String GetBuildingNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT BuildingName FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryTypeByUpdateKey(String updateKey)
      {
        return GetSecondaryTypeByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryTypeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecAbbr FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryLowNumberByUpdateKey(String updateKey)
      {
        return GetSecondaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecLowNumber FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryHighNumberByUpdateKey(String updateKey)
      {
        return GetSecondaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecHighNumber FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryOddEvenByUpdateKey(String updateKey)
      {
        return GetSecondaryOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecOddEven FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneByUpdateKey(String updateKey)
      {
        return GetMetaphoneByUpdateKey(updateKey, null);
      }

      public static String GetMetaphoneByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Metaphone FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByUpdateKey(String updateKey)
      {
        return GetStateCodeByUpdateKey(updateKey, null);
      }

      public static String GetStateCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByUpdateKey(String updateKey)
      {
        return GetCongressByUpdateKey(updateKey, null);
      }

      public static String GetCongressByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByUpdateKey(String updateKey)
      {
        return GetStateSenateByUpdateKey(updateKey, null);
      }

      public static String GetStateSenateByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByUpdateKey(String updateKey)
      {
        return GetStateHouseByUpdateKey(updateKey, null);
      }

      public static String GetStateHouseByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByUpdateKey(String updateKey)
      {
        return GetCountyByUpdateKey(updateKey, null);
      }

      public static String GetCountyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByUpdateKey(Column _column, String updateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTable GetDataByUpdateKey(String updateKey)
      {
        return GetDataByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsTable GetDataByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetDataReaderByUpdateKey(String updateKey)
      {
        return GetDataReaderByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsReader GetDataReaderByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsTable.ColumnSet.All) + " WHERE UpdateKey=@UpdateKey";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET ZipCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET UpdateKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StPreDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StSuffixAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StPostDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryEvenOdd=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET BuildingName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecOddEven=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET Metaphone=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StateCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET Congress=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StateSenate=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET StateHouse=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET County=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUpdateKey(Column _column, object newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreets SET {0}=@newValue WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUpdateKey(String updateKey)
      {
        return DeleteByUpdateKey(updateKey, -1);
      }

      public static int DeleteByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreets WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeStreetName(String zipCode, String streetName)
      {
        return CountByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static object GetColumnByZipCodeStreetName(Column _column, String zipCode, String streetName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreets WHERE ZipCode=@ZipCode AND StName=@StreetName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTable GetDataByZipCodeStreetName(String zipCode, String streetName)
      {
        return GetDataByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static ZipStreetsTable GetDataByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetDataReaderByZipCodeStreetName(String zipCode, String streetName)
      {
        return GetDataReaderByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static ZipStreetsReader GetDataReaderByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StName=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StateCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET Congress=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET County=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeStreetName(Column _column, object newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreets SET {0}=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeStreetName(String zipCode, String streetName)
      {
        return DeleteByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static int DeleteByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreets WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreets WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return CountByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static object GetColumnByZipCodeMetaphone(Column _column, String zipCode, String metaphone)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreets WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTable GetDataByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return GetDataByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static ZipStreetsTable GetDataByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreets WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return FillTable(cmd, ZipStreetsTable.ColumnSet.All);
      }

      public static ZipStreetsReader GetDataReaderByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return GetDataReaderByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static ZipStreetsReader GetDataReaderByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return new ZipStreetsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StateCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET Congress=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET County=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeMetaphone(Column _column, object newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreets SET {0}=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return DeleteByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreets WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipStreetsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipStreetsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipStreets()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class ZipStreetsReader : DataReaderBase
    {
      public ZipStreetsReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
      }

      public String PrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
      }

      public String PrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
      }

      public String PrimaryOddEven
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
      }

      public String SecondaryType
      {
        get { return this["AddressSecAbbr"] as String; }
      }

      public String SecondaryLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
      }

      public String SecondaryHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
      }

      public String SecondaryOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
      }

      public String Metaphone
      {
        get { return this["Metaphone"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }
    }

    #endregion votezipnew.ZipStreets

    #region votezipnew.ZipStreetsDownloaded

    public partial class ZipStreetsDownloadedRow : DataRow
    {
      internal ZipStreetsDownloadedRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
        set { if (value == null) this["UpdateKey"] = DBNull.Value; else this["UpdateKey"] = value; }
      }

      public String Action
      {
        get { return this["Action"] as String; }
        set { if (value == null) this["Action"] = DBNull.Value; else this["Action"] = value; }
      }

      public String RecordType
      {
        get { return this["RecordType"] as String; }
        set { if (value == null) this["RecordType"] = DBNull.Value; else this["RecordType"] = value; }
      }

      public String CarrierRoute
      {
        get { return this["CarrierRoute"] as String; }
        set { if (value == null) this["CarrierRoute"] = DBNull.Value; else this["CarrierRoute"] = value; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
        set { if (value == null) this["StPreDirAbbr"] = DBNull.Value; else this["StPreDirAbbr"] = value; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
        set { if (value == null) this["StName"] = DBNull.Value; else this["StName"] = value; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
        set { if (value == null) this["StSuffixAbbr"] = DBNull.Value; else this["StSuffixAbbr"] = value; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
        set { if (value == null) this["StPostDirAbbr"] = DBNull.Value; else this["StPostDirAbbr"] = value; }
      }

      public String PrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
        set { if (value == null) this["AddressPrimaryLowNumber"] = DBNull.Value; else this["AddressPrimaryLowNumber"] = value; }
      }

      public String PrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
        set { if (value == null) this["AddressPrimaryHighNumber"] = DBNull.Value; else this["AddressPrimaryHighNumber"] = value; }
      }

      public String PrimaryOddEven
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
        set { if (value == null) this["AddressPrimaryEvenOdd"] = DBNull.Value; else this["AddressPrimaryEvenOdd"] = value; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
        set { if (value == null) this["BuildingName"] = DBNull.Value; else this["BuildingName"] = value; }
      }

      public String SecondaryType
      {
        get { return this["AddressSecAbbr"] as String; }
        set { if (value == null) this["AddressSecAbbr"] = DBNull.Value; else this["AddressSecAbbr"] = value; }
      }

      public String SecondaryLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
        set { if (value == null) this["AddressSecLowNumber"] = DBNull.Value; else this["AddressSecLowNumber"] = value; }
      }

      public String SecondaryHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
        set { if (value == null) this["AddressSecHighNumber"] = DBNull.Value; else this["AddressSecHighNumber"] = value; }
      }

      public String SecondaryOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
        set { if (value == null) this["AddressSecOddEven"] = DBNull.Value; else this["AddressSecOddEven"] = value; }
      }

      public String Plus4Low
      {
        get { return this["Plus4Low"] as String; }
        set { if (value == null) this["Plus4Low"] = DBNull.Value; else this["Plus4Low"] = value; }
      }

      public String Plus4High
      {
        get { return this["Plus4High"] as String; }
        set { if (value == null) this["Plus4High"] = DBNull.Value; else this["Plus4High"] = value; }
      }

      public String BaseAlternateCode
      {
        get { return this["BaseAlternateCode"] as String; }
        set { if (value == null) this["BaseAlternateCode"] = DBNull.Value; else this["BaseAlternateCode"] = value; }
      }

      public String LacsStatus
      {
        get { return this["LACSStatus"] as String; }
        set { if (value == null) this["LACSStatus"] = DBNull.Value; else this["LACSStatus"] = value; }
      }

      public String GovernmentBuilding
      {
        get { return this["GovernmentBuilding"] as String; }
        set { if (value == null) this["GovernmentBuilding"] = DBNull.Value; else this["GovernmentBuilding"] = value; }
      }

      public String FinanceNumber
      {
        get { return this["FinanceNumber"] as String; }
        set { if (value == null) this["FinanceNumber"] = DBNull.Value; else this["FinanceNumber"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String CountyFips
      {
        get { return this["CountyFIPS"] as String; }
        set { if (value == null) this["CountyFIPS"] = DBNull.Value; else this["CountyFIPS"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String MunicipalityKey
      {
        get { return this["MunicipalityKey"] as String; }
        set { if (value == null) this["MunicipalityKey"] = DBNull.Value; else this["MunicipalityKey"] = value; }
      }

      public String UrbanizationKey
      {
        get { return this["UrbanizationKey"] as String; }
        set { if (value == null) this["UrbanizationKey"] = DBNull.Value; else this["UrbanizationKey"] = value; }
      }

      public String PreferredLastLineKey
      {
        get { return this["PreferredLastLineKey"] as String; }
        set { if (value == null) this["PreferredLastLineKey"] = DBNull.Value; else this["PreferredLastLineKey"] = value; }
      }

      public Decimal? ToLatitude
      {
        get { if (this.IsNull("ToLatitude")) return null; else return (Decimal) this["ToLatitude"]; }
        set { if (value.HasValue) this["ToLatitude"] = value.Value; else this["ToLatitude"] = DBNull.Value; }
      }

      public Decimal? FromLatitude
      {
        get { if (this.IsNull("FromLatitude")) return null; else return (Decimal) this["FromLatitude"]; }
        set { if (value.HasValue) this["FromLatitude"] = value.Value; else this["FromLatitude"] = DBNull.Value; }
      }

      public Decimal? ToLongitude
      {
        get { if (this.IsNull("ToLongitude")) return null; else return (Decimal) this["ToLongitude"]; }
        set { if (value.HasValue) this["ToLongitude"] = value.Value; else this["ToLongitude"] = DBNull.Value; }
      }

      public Decimal? FromLongitude
      {
        get { if (this.IsNull("FromLongitude")) return null; else return (Decimal) this["FromLongitude"]; }
        set { if (value.HasValue) this["FromLongitude"] = value.Value; else this["FromLongitude"] = DBNull.Value; }
      }

      public String CensusTract
      {
        get { return this["CensusTract"] as String; }
        set { if (value == null) this["CensusTract"] = DBNull.Value; else this["CensusTract"] = value; }
      }

      public String CensusBlock
      {
        get { return this["CensusBlock"] as String; }
        set { if (value == null) this["CensusBlock"] = DBNull.Value; else this["CensusBlock"] = value; }
      }

      public String Tlid
      {
        get { return this["TLID"] as String; }
        set { if (value == null) this["TLID"] = DBNull.Value; else this["TLID"] = value; }
      }

      public String LatitudeLongitudeMultiMatch
      {
        get { return this["LatLonMultiMatch"] as String; }
        set { if (value == null) this["LatLonMultiMatch"] = DBNull.Value; else this["LatLonMultiMatch"] = value; }
      }
    }

    [Serializable]
    public partial class ZipStreetsDownloadedTable : TypedTableBase<ZipStreetsDownloadedRow>
    {
      public ZipStreetsDownloadedRow this[int index] { get { return (ZipStreetsDownloadedRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipStreetsDownloadedRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipStreetsDownloadedTable(); }

      new public ZipStreetsDownloadedRow NewRow() { return (ZipStreetsDownloadedRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipStreetsDownloadedRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipStreetsDownloadedRow); }

      public void RemoveRow(ZipStreetsDownloadedRow row) { this.Rows.Remove(row); }

      public ZipStreetsDownloadedRow NewRow(String zipCode, String updateKey, String action, String recordType, String carrierRoute, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String plus4Low, String plus4High, String baseAlternateCode, String lacsStatus, String governmentBuilding, String financeNumber, String state, String countyFips, String congressionalDistrict, String municipalityKey, String urbanizationKey, String preferredLastLineKey, Decimal? toLatitude, Decimal? fromLatitude, Decimal? toLongitude, Decimal? fromLongitude, String censusTract, String censusBlock, String tlid, String latitudeLongitudeMultiMatch)
      {
        ZipStreetsDownloadedRow row = NewRow();
        row.ZipCode = zipCode;
        row.UpdateKey = updateKey;
        row.Action = action;
        row.RecordType = recordType;
        row.CarrierRoute = carrierRoute;
        row.DirectionPrefix = directionPrefix;
        row.StreetName = streetName;
        row.StreetSuffix = streetSuffix;
        row.DirectionSuffix = directionSuffix;
        row.PrimaryLowNumber = primaryLowNumber;
        row.PrimaryHighNumber = primaryHighNumber;
        row.PrimaryOddEven = primaryOddEven;
        row.BuildingName = buildingName;
        row.SecondaryType = secondaryType;
        row.SecondaryLowNumber = secondaryLowNumber;
        row.SecondaryHighNumber = secondaryHighNumber;
        row.SecondaryOddEven = secondaryOddEven;
        row.Plus4Low = plus4Low;
        row.Plus4High = plus4High;
        row.BaseAlternateCode = baseAlternateCode;
        row.LacsStatus = lacsStatus;
        row.GovernmentBuilding = governmentBuilding;
        row.FinanceNumber = financeNumber;
        row.State = state;
        row.CountyFips = countyFips;
        row.CongressionalDistrict = congressionalDistrict;
        row.MunicipalityKey = municipalityKey;
        row.UrbanizationKey = urbanizationKey;
        row.PreferredLastLineKey = preferredLastLineKey;
        row.ToLatitude = toLatitude;
        row.FromLatitude = fromLatitude;
        row.ToLongitude = toLongitude;
        row.FromLongitude = fromLongitude;
        row.CensusTract = censusTract;
        row.CensusBlock = censusBlock;
        row.Tlid = tlid;
        row.LatitudeLongitudeMultiMatch = latitudeLongitudeMultiMatch;
        return row;
      }

      public void AddRow(String zipCode, String updateKey, String action, String recordType, String carrierRoute, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String plus4Low, String plus4High, String baseAlternateCode, String lacsStatus, String governmentBuilding, String financeNumber, String state, String countyFips, String congressionalDistrict, String municipalityKey, String urbanizationKey, String preferredLastLineKey, Decimal? toLatitude, Decimal? fromLatitude, Decimal? toLongitude, Decimal? fromLongitude, String censusTract, String censusBlock, String tlid, String latitudeLongitudeMultiMatch)
      {
        ZipStreetsDownloadedRow row = NewRow(zipCode, updateKey, action, recordType, carrierRoute, directionPrefix, streetName, streetSuffix, directionSuffix, primaryLowNumber, primaryHighNumber, primaryOddEven, buildingName, secondaryType, secondaryLowNumber, secondaryHighNumber, secondaryOddEven, plus4Low, plus4High, baseAlternateCode, lacsStatus, governmentBuilding, financeNumber, state, countyFips, congressionalDistrict, municipalityKey, urbanizationKey, preferredLastLineKey, toLatitude, fromLatitude, toLongitude, fromLongitude, censusTract, censusBlock, tlid, latitudeLongitudeMultiMatch);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn UpdateKeyColumn { get { return this.Columns["UpdateKey"]; } }

      public DataColumn ActionColumn { get { return this.Columns["Action"]; } }

      public DataColumn RecordTypeColumn { get { return this.Columns["RecordType"]; } }

      public DataColumn CarrierRouteColumn { get { return this.Columns["CarrierRoute"]; } }

      public DataColumn DirectionPrefixColumn { get { return this.Columns["StPreDirAbbr"]; } }

      public DataColumn StreetNameColumn { get { return this.Columns["StName"]; } }

      public DataColumn StreetSuffixColumn { get { return this.Columns["StSuffixAbbr"]; } }

      public DataColumn DirectionSuffixColumn { get { return this.Columns["StPostDirAbbr"]; } }

      public DataColumn PrimaryLowNumberColumn { get { return this.Columns["AddressPrimaryLowNumber"]; } }

      public DataColumn PrimaryHighNumberColumn { get { return this.Columns["AddressPrimaryHighNumber"]; } }

      public DataColumn PrimaryOddEvenColumn { get { return this.Columns["AddressPrimaryEvenOdd"]; } }

      public DataColumn BuildingNameColumn { get { return this.Columns["BuildingName"]; } }

      public DataColumn SecondaryTypeColumn { get { return this.Columns["AddressSecAbbr"]; } }

      public DataColumn SecondaryLowNumberColumn { get { return this.Columns["AddressSecLowNumber"]; } }

      public DataColumn SecondaryHighNumberColumn { get { return this.Columns["AddressSecHighNumber"]; } }

      public DataColumn SecondaryOddEvenColumn { get { return this.Columns["AddressSecOddEven"]; } }

      public DataColumn Plus4LowColumn { get { return this.Columns["Plus4Low"]; } }

      public DataColumn Plus4HighColumn { get { return this.Columns["Plus4High"]; } }

      public DataColumn BaseAlternateCodeColumn { get { return this.Columns["BaseAlternateCode"]; } }

      public DataColumn LacsStatusColumn { get { return this.Columns["LACSStatus"]; } }

      public DataColumn GovernmentBuildingColumn { get { return this.Columns["GovernmentBuilding"]; } }

      public DataColumn FinanceNumberColumn { get { return this.Columns["FinanceNumber"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn CountyFipsColumn { get { return this.Columns["CountyFIPS"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn MunicipalityKeyColumn { get { return this.Columns["MunicipalityKey"]; } }

      public DataColumn UrbanizationKeyColumn { get { return this.Columns["UrbanizationKey"]; } }

      public DataColumn PreferredLastLineKeyColumn { get { return this.Columns["PreferredLastLineKey"]; } }

      public DataColumn ToLatitudeColumn { get { return this.Columns["ToLatitude"]; } }

      public DataColumn FromLatitudeColumn { get { return this.Columns["FromLatitude"]; } }

      public DataColumn ToLongitudeColumn { get { return this.Columns["ToLongitude"]; } }

      public DataColumn FromLongitudeColumn { get { return this.Columns["FromLongitude"]; } }

      public DataColumn CensusTractColumn { get { return this.Columns["CensusTract"]; } }

      public DataColumn CensusBlockColumn { get { return this.Columns["CensusBlock"]; } }

      public DataColumn TlidColumn { get { return this.Columns["TLID"]; } }

      public DataColumn LatitudeLongitudeMultiMatchColumn { get { return this.Columns["LatLonMultiMatch"]; } }

      public enum ColumnSet { All, Lookup, Analysis }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("UpdateKey", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Action", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("RecordType", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("CarrierRoute", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("BuildingName", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecAbbr", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecLowNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecHighNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecOddEven", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4Low", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4High", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("BaseAlternateCode", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("LACSStatus", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("GovernmentBuilding", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("FinanceNumber", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyFIPS", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("MunicipalityKey", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("UrbanizationKey", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("PreferredLastLineKey", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("ToLatitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("FromLatitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("ToLongitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("FromLongitude", typeof(Decimal));
        base.Columns.Add(_column);
        _column = new DataColumn("CensusTract", typeof(String));
        _column.MaxLength = 6;
        base.Columns.Add(_column);
        _column = new DataColumn("CensusBlock", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("TLID", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("LatLonMultiMatch", typeof(String));
        _column.MaxLength = 50;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitLookupColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4Low", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4High", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAnalysisColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("UpdateKey", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("BuildingName", typeof(String));
        _column.MaxLength = 40;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecAbbr", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecLowNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecHighNumber", typeof(String));
        _column.MaxLength = 10;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecOddEven", typeof(String));
        _column.MaxLength = 1;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4Low", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("Plus4High", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
      }

      public ZipStreetsDownloadedTable() : this(ColumnSet.All) { }

      public ZipStreetsDownloadedTable(ColumnSet columnSet)
      {
        this.TableName = "ZipStreetsDownloaded";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Lookup:
            InitLookupColumns();
            break;

          case ColumnSet.Analysis:
            InitAnalysisColumns();
            break;
        }
      }

      protected ZipStreetsDownloadedTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipStreetsDownloaded
    {
      public const string TableName = "ZipStreetsDownloaded";

      public enum Column { ZipCode, UpdateKey, Action, RecordType, CarrierRoute, DirectionPrefix, StreetName, StreetSuffix, DirectionSuffix, PrimaryLowNumber, PrimaryHighNumber, PrimaryOddEven, BuildingName, SecondaryType, SecondaryLowNumber, SecondaryHighNumber, SecondaryOddEven, Plus4Low, Plus4High, BaseAlternateCode, LacsStatus, GovernmentBuilding, FinanceNumber, State, CountyFips, CongressionalDistrict, MunicipalityKey, UrbanizationKey, PreferredLastLineKey, ToLatitude, FromLatitude, ToLongitude, FromLongitude, CensusTract, CensusBlock, Tlid, LatitudeLongitudeMultiMatch }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.UpdateKey, "UpdateKey" },
        { Column.Action, "Action" },
        { Column.RecordType, "RecordType" },
        { Column.CarrierRoute, "CarrierRoute" },
        { Column.DirectionPrefix, "StPreDirAbbr" },
        { Column.StreetName, "StName" },
        { Column.StreetSuffix, "StSuffixAbbr" },
        { Column.DirectionSuffix, "StPostDirAbbr" },
        { Column.PrimaryLowNumber, "AddressPrimaryLowNumber" },
        { Column.PrimaryHighNumber, "AddressPrimaryHighNumber" },
        { Column.PrimaryOddEven, "AddressPrimaryEvenOdd" },
        { Column.BuildingName, "BuildingName" },
        { Column.SecondaryType, "AddressSecAbbr" },
        { Column.SecondaryLowNumber, "AddressSecLowNumber" },
        { Column.SecondaryHighNumber, "AddressSecHighNumber" },
        { Column.SecondaryOddEven, "AddressSecOddEven" },
        { Column.Plus4Low, "Plus4Low" },
        { Column.Plus4High, "Plus4High" },
        { Column.BaseAlternateCode, "BaseAlternateCode" },
        { Column.LacsStatus, "LACSStatus" },
        { Column.GovernmentBuilding, "GovernmentBuilding" },
        { Column.FinanceNumber, "FinanceNumber" },
        { Column.State, "State" },
        { Column.CountyFips, "CountyFIPS" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.MunicipalityKey, "MunicipalityKey" },
        { Column.UrbanizationKey, "UrbanizationKey" },
        { Column.PreferredLastLineKey, "PreferredLastLineKey" },
        { Column.ToLatitude, "ToLatitude" },
        { Column.FromLatitude, "FromLatitude" },
        { Column.ToLongitude, "ToLongitude" },
        { Column.FromLongitude, "FromLongitude" },
        { Column.CensusTract, "CensusTract" },
        { Column.CensusBlock, "CensusBlock" },
        { Column.Tlid, "TLID" },
        { Column.LatitudeLongitudeMultiMatch, "LatLonMultiMatch" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE ZipStreetsDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String zipCode, String updateKey, String action, String recordType, String carrierRoute, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String plus4Low, String plus4High, String baseAlternateCode, String lacsStatus, String governmentBuilding, String financeNumber, String state, String countyFips, String congressionalDistrict, String municipalityKey, String urbanizationKey, String preferredLastLineKey, Decimal? toLatitude, Decimal? fromLatitude, Decimal? toLongitude, Decimal? fromLongitude, String censusTract, String censusBlock, String tlid, String latitudeLongitudeMultiMatch)
      {
        Insert(zipCode, updateKey, action, recordType, carrierRoute, directionPrefix, streetName, streetSuffix, directionSuffix, primaryLowNumber, primaryHighNumber, primaryOddEven, buildingName, secondaryType, secondaryLowNumber, secondaryHighNumber, secondaryOddEven, plus4Low, plus4High, baseAlternateCode, lacsStatus, governmentBuilding, financeNumber, state, countyFips, congressionalDistrict, municipalityKey, urbanizationKey, preferredLastLineKey, toLatitude, fromLatitude, toLongitude, fromLongitude, censusTract, censusBlock, tlid, latitudeLongitudeMultiMatch, -1);
      }

      public static void Insert(String zipCode, String updateKey, String action, String recordType, String carrierRoute, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String primaryLowNumber, String primaryHighNumber, String primaryOddEven, String buildingName, String secondaryType, String secondaryLowNumber, String secondaryHighNumber, String secondaryOddEven, String plus4Low, String plus4High, String baseAlternateCode, String lacsStatus, String governmentBuilding, String financeNumber, String state, String countyFips, String congressionalDistrict, String municipalityKey, String urbanizationKey, String preferredLastLineKey, Decimal? toLatitude, Decimal? fromLatitude, Decimal? toLongitude, Decimal? fromLongitude, String censusTract, String censusBlock, String tlid, String latitudeLongitudeMultiMatch, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipStreetsDownloaded (ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch) VALUES (@ZipCode,@UpdateKey,@Action,@RecordType,@CarrierRoute,@DirectionPrefix,@StreetName,@StreetSuffix,@DirectionSuffix,@PrimaryLowNumber,@PrimaryHighNumber,@PrimaryOddEven,@BuildingName,@SecondaryType,@SecondaryLowNumber,@SecondaryHighNumber,@SecondaryOddEven,@Plus4Low,@Plus4High,@BaseAlternateCode,@LacsStatus,@GovernmentBuilding,@FinanceNumber,@State,@CountyFips,@CongressionalDistrict,@MunicipalityKey,@UrbanizationKey,@PreferredLastLineKey,@ToLatitude,@FromLatitude,@ToLongitude,@FromLongitude,@CensusTract,@CensusBlock,@Tlid,@LatitudeLongitudeMultiMatch)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "Action", action);
        VoteZipNewDb.AddCommandParameter(cmd, "RecordType", recordType);
        VoteZipNewDb.AddCommandParameter(cmd, "CarrierRoute", carrierRoute);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryLowNumber", primaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryHighNumber", primaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "PrimaryOddEven", primaryOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "BuildingName", buildingName);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryType", secondaryType);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryLowNumber", secondaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryHighNumber", secondaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "SecondaryOddEven", secondaryOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "Plus4Low", plus4Low);
        VoteZipNewDb.AddCommandParameter(cmd, "Plus4High", plus4High);
        VoteZipNewDb.AddCommandParameter(cmd, "BaseAlternateCode", baseAlternateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "LacsStatus", lacsStatus);
        VoteZipNewDb.AddCommandParameter(cmd, "GovernmentBuilding", governmentBuilding);
        VoteZipNewDb.AddCommandParameter(cmd, "FinanceNumber", financeNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "CountyFips", countyFips);
        VoteZipNewDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteZipNewDb.AddCommandParameter(cmd, "MunicipalityKey", municipalityKey);
        VoteZipNewDb.AddCommandParameter(cmd, "UrbanizationKey", urbanizationKey);
        VoteZipNewDb.AddCommandParameter(cmd, "PreferredLastLineKey", preferredLastLineKey);
        VoteZipNewDb.AddCommandParameter(cmd, "ToLatitude", toLatitude);
        VoteZipNewDb.AddCommandParameter(cmd, "FromLatitude", fromLatitude);
        VoteZipNewDb.AddCommandParameter(cmd, "ToLongitude", toLongitude);
        VoteZipNewDb.AddCommandParameter(cmd, "FromLongitude", fromLongitude);
        VoteZipNewDb.AddCommandParameter(cmd, "CensusTract", censusTract);
        VoteZipNewDb.AddCommandParameter(cmd, "CensusBlock", censusBlock);
        VoteZipNewDb.AddCommandParameter(cmd, "Tlid", tlid);
        VoteZipNewDb.AddCommandParameter(cmd, "LatitudeLongitudeMultiMatch", latitudeLongitudeMultiMatch);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch FROM ZipStreetsDownloaded";
        }
      }

      public static ZipStreetsDownloadedTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipStreetsDownloadedTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch FROM ZipStreetsDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.All);
      }

      public static ZipStreetsDownloadedReader GetAllDataReader()
      {
        return GetAllDataReader(-1);
      }

      public static ZipStreetsDownloadedReader GetAllDataReader(int commandTimeout)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipStreetsDownloadedTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipStreetsDownloadedTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipStreetsDownloadedTable FillTable(DbCommand command, ZipStreetsDownloadedTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipStreetsDownloadedTable table = new ZipStreetsDownloadedTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table)
      {
        UpdateTable(table, ZipStreetsDownloadedTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table, ZipStreetsDownloadedTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table, int commandTimeout)
      {
        UpdateTable(table, ZipStreetsDownloadedTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table, ZipStreetsDownloadedTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsDownloadedTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipStreetsDownloadedTable table, ZipStreetsDownloadedTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string UpdateKeyColumnName { get { return "UpdateKey"; } }

      public static string ActionColumnName { get { return "Action"; } }

      public static string RecordTypeColumnName { get { return "RecordType"; } }

      public static string CarrierRouteColumnName { get { return "CarrierRoute"; } }

      public static string DirectionPrefixColumnName { get { return "StPreDirAbbr"; } }

      public static string StreetNameColumnName { get { return "StName"; } }

      public static string StreetSuffixColumnName { get { return "StSuffixAbbr"; } }

      public static string DirectionSuffixColumnName { get { return "StPostDirAbbr"; } }

      public static string PrimaryLowNumberColumnName { get { return "AddressPrimaryLowNumber"; } }

      public static string PrimaryHighNumberColumnName { get { return "AddressPrimaryHighNumber"; } }

      public static string PrimaryOddEvenColumnName { get { return "AddressPrimaryEvenOdd"; } }

      public static string BuildingNameColumnName { get { return "BuildingName"; } }

      public static string SecondaryTypeColumnName { get { return "AddressSecAbbr"; } }

      public static string SecondaryLowNumberColumnName { get { return "AddressSecLowNumber"; } }

      public static string SecondaryHighNumberColumnName { get { return "AddressSecHighNumber"; } }

      public static string SecondaryOddEvenColumnName { get { return "AddressSecOddEven"; } }

      public static string Plus4LowColumnName { get { return "Plus4Low"; } }

      public static string Plus4HighColumnName { get { return "Plus4High"; } }

      public static string BaseAlternateCodeColumnName { get { return "BaseAlternateCode"; } }

      public static string LacsStatusColumnName { get { return "LACSStatus"; } }

      public static string GovernmentBuildingColumnName { get { return "GovernmentBuilding"; } }

      public static string FinanceNumberColumnName { get { return "FinanceNumber"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string CountyFipsColumnName { get { return "CountyFIPS"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string MunicipalityKeyColumnName { get { return "MunicipalityKey"; } }

      public static string UrbanizationKeyColumnName { get { return "UrbanizationKey"; } }

      public static string PreferredLastLineKeyColumnName { get { return "PreferredLastLineKey"; } }

      public static string ToLatitudeColumnName { get { return "ToLatitude"; } }

      public static string FromLatitudeColumnName { get { return "FromLatitude"; } }

      public static string ToLongitudeColumnName { get { return "ToLongitude"; } }

      public static string FromLongitudeColumnName { get { return "FromLongitude"; } }

      public static string CensusTractColumnName { get { return "CensusTract"; } }

      public static string CensusBlockColumnName { get { return "CensusBlock"; } }

      public static string TlidColumnName { get { return "TLID"; } }

      public static string LatitudeLongitudeMultiMatchColumnName { get { return "LatLonMultiMatch"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int UpdateKeyMaxLength { get { return 10; } }

      public static int ActionMaxLength { get { return 1; } }

      public static int RecordTypeMaxLength { get { return 1; } }

      public static int CarrierRouteMaxLength { get { return 4; } }

      public static int DirectionPrefixMaxLength { get { return 2; } }

      public static int StreetNameMaxLength { get { return 28; } }

      public static int StreetSuffixMaxLength { get { return 4; } }

      public static int DirectionSuffixMaxLength { get { return 2; } }

      public static int PrimaryLowNumberMaxLength { get { return 10; } }

      public static int PrimaryHighNumberMaxLength { get { return 10; } }

      public static int PrimaryOddEvenMaxLength { get { return 1; } }

      public static int BuildingNameMaxLength { get { return 40; } }

      public static int SecondaryTypeMaxLength { get { return 4; } }

      public static int SecondaryLowNumberMaxLength { get { return 10; } }

      public static int SecondaryHighNumberMaxLength { get { return 10; } }

      public static int SecondaryOddEvenMaxLength { get { return 1; } }

      public static int Plus4LowMaxLength { get { return 4; } }

      public static int Plus4HighMaxLength { get { return 4; } }

      public static int BaseAlternateCodeMaxLength { get { return 1; } }

      public static int LacsStatusMaxLength { get { return 1; } }

      public static int GovernmentBuildingMaxLength { get { return 1; } }

      public static int FinanceNumberMaxLength { get { return 6; } }

      public static int StateMaxLength { get { return 2; } }

      public static int CountyFipsMaxLength { get { return 3; } }

      public static int CongressionalDistrictMaxLength { get { return 2; } }

      public static int MunicipalityKeyMaxLength { get { return 6; } }

      public static int UrbanizationKeyMaxLength { get { return 6; } }

      public static int PreferredLastLineKeyMaxLength { get { return 6; } }

      public static int CensusTractMaxLength { get { return 6; } }

      public static int CensusBlockMaxLength { get { return 4; } }

      public static int TlidMaxLength { get { return 10; } }

      public static int LatitudeLongitudeMultiMatchMaxLength { get { return 50; } }

      public static int CountByState(String state, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsDownloaded WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByState(String state)
      {
        return CountByState(state, -1);
      }

      public static object GetColumnByState(Column _column, String state)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsDownloaded WHERE State=@State";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsDownloadedTable GetDataByState(String state)
      {
        return GetDataByState(state, -1);
      }

      public static ZipStreetsDownloadedTable GetDataByState(String state, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch FROM ZipStreetsDownloaded WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.All);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByState(String state)
      {
        return GetDataReaderByState(state, -1);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByState(String state, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.All) + " WHERE State=@State";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ZipCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UpdateKey=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateActionByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Action=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRecordTypeByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET RecordType=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CarrierRoute=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPreDirAbbr=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StName=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StSuffixAbbr=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPostDirAbbr=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryLowNumber=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryHighNumber=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryEvenOdd=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BuildingName=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecAbbr=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecLowNumber=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecHighNumber=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecOddEven=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4LowByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4Low=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4HighByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4High=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBaseAlternateCodeByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BaseAlternateCode=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLacsStatusByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LACSStatus=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGovernmentBuildingByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET GovernmentBuilding=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FinanceNumber=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET State=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CountyFIPS=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CongressionalDistrict=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMunicipalityKeyByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET MunicipalityKey=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrbanizationKeyByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UrbanizationKey=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET PreferredLastLineKey=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLatitudeByState(Decimal? newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLatitude=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLatitudeByState(Decimal? newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLatitude=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLongitudeByState(Decimal? newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLongitude=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLongitudeByState(Decimal? newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLongitude=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusTractByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusTract=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusBlockByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusBlock=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTlidByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET TLID=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeLongitudeMultiMatchByState(String newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LatLonMultiMatch=@newValue WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByState(Column _column, object newValue, String state)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET {0}=@newValue WHERE State=@State";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByState(String state)
      {
        return DeleteByState(state, -1);
      }

      public static int DeleteByState(String state, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsDownloaded WHERE State=@State";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "State", state);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static bool UpdateKeyExists(String updateKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByUpdateKey(String updateKey)
      {
        return GetZipCodeByUpdateKey(updateKey, null);
      }

      public static String GetZipCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey)
      {
        return GetUpdateKeyByUpdateKey(updateKey, null);
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UpdateKey FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetActionByUpdateKey(String updateKey)
      {
        return GetActionByUpdateKey(updateKey, null);
      }

      public static String GetActionByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Action FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRecordTypeByUpdateKey(String updateKey)
      {
        return GetRecordTypeByUpdateKey(updateKey, null);
      }

      public static String GetRecordTypeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT RecordType FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCarrierRouteByUpdateKey(String updateKey)
      {
        return GetCarrierRouteByUpdateKey(updateKey, null);
      }

      public static String GetCarrierRouteByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CarrierRoute FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionPrefixByUpdateKey(String updateKey)
      {
        return GetDirectionPrefixByUpdateKey(updateKey, null);
      }

      public static String GetDirectionPrefixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPreDirAbbr FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetNameByUpdateKey(String updateKey)
      {
        return GetStreetNameByUpdateKey(updateKey, null);
      }

      public static String GetStreetNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StName FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetSuffixByUpdateKey(String updateKey)
      {
        return GetStreetSuffixByUpdateKey(updateKey, null);
      }

      public static String GetStreetSuffixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StSuffixAbbr FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionSuffixByUpdateKey(String updateKey)
      {
        return GetDirectionSuffixByUpdateKey(updateKey, null);
      }

      public static String GetDirectionSuffixByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPostDirAbbr FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryLowNumberByUpdateKey(String updateKey)
      {
        return GetPrimaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryLowNumber FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryHighNumberByUpdateKey(String updateKey)
      {
        return GetPrimaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryHighNumber FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPrimaryOddEvenByUpdateKey(String updateKey)
      {
        return GetPrimaryOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetPrimaryOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryEvenOdd FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBuildingNameByUpdateKey(String updateKey)
      {
        return GetBuildingNameByUpdateKey(updateKey, null);
      }

      public static String GetBuildingNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT BuildingName FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryTypeByUpdateKey(String updateKey)
      {
        return GetSecondaryTypeByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryTypeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecAbbr FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryLowNumberByUpdateKey(String updateKey)
      {
        return GetSecondaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecLowNumber FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryHighNumberByUpdateKey(String updateKey)
      {
        return GetSecondaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecHighNumber FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSecondaryOddEvenByUpdateKey(String updateKey)
      {
        return GetSecondaryOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetSecondaryOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecOddEven FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlus4LowByUpdateKey(String updateKey)
      {
        return GetPlus4LowByUpdateKey(updateKey, null);
      }

      public static String GetPlus4LowByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Plus4Low FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPlus4HighByUpdateKey(String updateKey)
      {
        return GetPlus4HighByUpdateKey(updateKey, null);
      }

      public static String GetPlus4HighByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Plus4High FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBaseAlternateCodeByUpdateKey(String updateKey)
      {
        return GetBaseAlternateCodeByUpdateKey(updateKey, null);
      }

      public static String GetBaseAlternateCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT BaseAlternateCode FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLacsStatusByUpdateKey(String updateKey)
      {
        return GetLacsStatusByUpdateKey(updateKey, null);
      }

      public static String GetLacsStatusByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LACSStatus FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetGovernmentBuildingByUpdateKey(String updateKey)
      {
        return GetGovernmentBuildingByUpdateKey(updateKey, null);
      }

      public static String GetGovernmentBuildingByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT GovernmentBuilding FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFinanceNumberByUpdateKey(String updateKey)
      {
        return GetFinanceNumberByUpdateKey(updateKey, null);
      }

      public static String GetFinanceNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT FinanceNumber FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateByUpdateKey(String updateKey)
      {
        return GetStateByUpdateKey(updateKey, null);
      }

      public static String GetStateByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT State FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyFipsByUpdateKey(String updateKey)
      {
        return GetCountyFipsByUpdateKey(updateKey, null);
      }

      public static String GetCountyFipsByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CountyFIPS FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictByUpdateKey(String updateKey)
      {
        return GetCongressionalDistrictByUpdateKey(updateKey, null);
      }

      public static String GetCongressionalDistrictByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMunicipalityKeyByUpdateKey(String updateKey)
      {
        return GetMunicipalityKeyByUpdateKey(updateKey, null);
      }

      public static String GetMunicipalityKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT MunicipalityKey FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUrbanizationKeyByUpdateKey(String updateKey)
      {
        return GetUrbanizationKeyByUpdateKey(updateKey, null);
      }

      public static String GetUrbanizationKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UrbanizationKey FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPreferredLastLineKeyByUpdateKey(String updateKey)
      {
        return GetPreferredLastLineKeyByUpdateKey(updateKey, null);
      }

      public static String GetPreferredLastLineKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PreferredLastLineKey FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Decimal? GetToLatitudeByUpdateKey(String updateKey)
      {
        return _GetToLatitudeByUpdateKey(updateKey, null);
      }

      public static Decimal GetToLatitudeByUpdateKey(String updateKey, Decimal defaultValue)
      {
        return _GetToLatitudeByUpdateKey(updateKey, defaultValue).Value;
      }

      private static Decimal? _GetToLatitudeByUpdateKey(String updateKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT ToLatitude FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetFromLatitudeByUpdateKey(String updateKey)
      {
        return _GetFromLatitudeByUpdateKey(updateKey, null);
      }

      public static Decimal GetFromLatitudeByUpdateKey(String updateKey, Decimal defaultValue)
      {
        return _GetFromLatitudeByUpdateKey(updateKey, defaultValue).Value;
      }

      private static Decimal? _GetFromLatitudeByUpdateKey(String updateKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT FromLatitude FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetToLongitudeByUpdateKey(String updateKey)
      {
        return _GetToLongitudeByUpdateKey(updateKey, null);
      }

      public static Decimal GetToLongitudeByUpdateKey(String updateKey, Decimal defaultValue)
      {
        return _GetToLongitudeByUpdateKey(updateKey, defaultValue).Value;
      }

      private static Decimal? _GetToLongitudeByUpdateKey(String updateKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT ToLongitude FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static Decimal? GetFromLongitudeByUpdateKey(String updateKey)
      {
        return _GetFromLongitudeByUpdateKey(updateKey, null);
      }

      public static Decimal GetFromLongitudeByUpdateKey(String updateKey, Decimal defaultValue)
      {
        return _GetFromLongitudeByUpdateKey(updateKey, defaultValue).Value;
      }

      private static Decimal? _GetFromLongitudeByUpdateKey(String updateKey, Decimal? defaultValue)
      {
        object result;
        string cmdText = "SELECT FromLongitude FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Decimal) result;
      }

      public static String GetCensusTractByUpdateKey(String updateKey)
      {
        return GetCensusTractByUpdateKey(updateKey, null);
      }

      public static String GetCensusTractByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CensusTract FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCensusBlockByUpdateKey(String updateKey)
      {
        return GetCensusBlockByUpdateKey(updateKey, null);
      }

      public static String GetCensusBlockByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT CensusBlock FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTlidByUpdateKey(String updateKey)
      {
        return GetTlidByUpdateKey(updateKey, null);
      }

      public static String GetTlidByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT TLID FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLatitudeLongitudeMultiMatchByUpdateKey(String updateKey)
      {
        return GetLatitudeLongitudeMultiMatchByUpdateKey(updateKey, null);
      }

      public static String GetLatitudeLongitudeMultiMatchByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT LatLonMultiMatch FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByUpdateKey(Column _column, String updateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsDownloadedTable GetDataByUpdateKey(String updateKey)
      {
        return GetDataByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsDownloadedTable GetDataByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.All);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByUpdateKey(String updateKey)
      {
        return GetDataReaderByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.All) + " WHERE UpdateKey=@UpdateKey";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ZipCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UpdateKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateActionByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Action=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRecordTypeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET RecordType=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CarrierRoute=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPreDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StSuffixAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPostDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryEvenOdd=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BuildingName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecOddEven=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4LowByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4Low=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4HighByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4High=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBaseAlternateCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BaseAlternateCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLacsStatusByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LACSStatus=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGovernmentBuildingByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET GovernmentBuilding=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FinanceNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET State=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CountyFIPS=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CongressionalDistrict=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMunicipalityKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET MunicipalityKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrbanizationKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UrbanizationKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET PreferredLastLineKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLatitudeByUpdateKey(Decimal? newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLatitude=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLatitudeByUpdateKey(Decimal? newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLatitude=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLongitudeByUpdateKey(Decimal? newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLongitude=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLongitudeByUpdateKey(Decimal? newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLongitude=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusTractByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusTract=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusBlockByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusBlock=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTlidByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET TLID=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeLongitudeMultiMatchByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LatLonMultiMatch=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUpdateKey(Column _column, object newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET {0}=@newValue WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUpdateKey(String updateKey)
      {
        return DeleteByUpdateKey(updateKey, -1);
      }

      public static int DeleteByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsDownloaded WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeStreetName(String zipCode, String streetName)
      {
        return CountByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static object GetColumnByZipCodeStreetName(Column _column, String zipCode, String streetName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode AND StName=@StreetName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsDownloadedTable GetDataByZipCodeStreetName(String zipCode, String streetName)
      {
        return GetDataByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static ZipStreetsDownloadedTable GetDataByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,Action,RecordType,CarrierRoute,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,BaseAlternateCode,LACSStatus,GovernmentBuilding,FinanceNumber,State,CountyFIPS,CongressionalDistrict,MunicipalityKey,UrbanizationKey,PreferredLastLineKey,ToLatitude,FromLatitude,ToLongitude,FromLongitude,CensusTract,CensusBlock,TLID,LatLonMultiMatch FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.All);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByZipCodeStreetName(String zipCode, String streetName)
      {
        return GetDataReaderByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static ZipStreetsDownloadedReader GetDataReaderByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateActionByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Action=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRecordTypeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET RecordType=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCarrierRouteByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CarrierRoute=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StName=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryLowNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryHighNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePrimaryOddEvenByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryTypeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryLowNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryHighNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSecondaryOddEvenByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4LowByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4Low=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePlus4HighByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET Plus4High=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBaseAlternateCodeByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET BaseAlternateCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLacsStatusByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LACSStatus=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateGovernmentBuildingByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET GovernmentBuilding=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFinanceNumberByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FinanceNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET State=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyFipsByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CountyFIPS=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CongressionalDistrict=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMunicipalityKeyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET MunicipalityKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUrbanizationKeyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET UrbanizationKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePreferredLastLineKeyByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET PreferredLastLineKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLatitudeByZipCodeStreetName(Decimal? newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLatitude=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLatitudeByZipCodeStreetName(Decimal? newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLatitude=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToLongitudeByZipCodeStreetName(Decimal? newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET ToLongitude=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromLongitudeByZipCodeStreetName(Decimal? newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET FromLongitude=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", o);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusTractByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusTract=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCensusBlockByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET CensusBlock=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTlidByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET TLID=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLatitudeLongitudeMultiMatchByZipCodeStreetName(String newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET LatLonMultiMatch=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeStreetName(Column _column, object newValue, String zipCode, String streetName)
      {
        string cmdText = "UPDATE ZipStreetsDownloaded SET {0}=@newValue WHERE ZipCode=@ZipCode AND StName=@StreetName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeStreetName(String zipCode, String streetName)
      {
        return DeleteByZipCodeStreetName(zipCode, streetName, -1);
      }

      public static int DeleteByZipCodeStreetName(String zipCode, String streetName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode AND StName=@StreetName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectLookupCommandText
      {
        get
        {
          return "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded";
        }
      }

      public static ZipStreetsDownloadedTable GetAllLookupData()
      {
        return GetAllLookupData(-1);
      }

      public static ZipStreetsDownloadedTable GetAllLookupData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.Lookup);
      }

      public static ZipStreetsDownloadedReader GetAllLookupDataReader()
      {
        return GetAllLookupDataReader(-1);
      }

      public static ZipStreetsDownloadedReader GetAllLookupDataReader(int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.Lookup);
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateLookup(ZipStreetsDownloadedTable table)
      {
        UpdateLookup(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateLookup(ZipStreetsDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsDownloadedTable.ColumnSet.Lookup, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ZipStreetsDownloadedTable GetLookupDataByZipCode(String zipCode)
      {
        return GetLookupDataByZipCode(zipCode, -1);
      }

      public static ZipStreetsDownloadedTable GetLookupDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.Lookup);
      }

      public static ZipStreetsDownloadedReader GetLookupDataReaderByZipCode(String zipCode)
      {
        return GetLookupDataReaderByZipCode(zipCode, -1);
      }

      public static ZipStreetsDownloadedReader GetLookupDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.Lookup) + " WHERE ZipCode=@ZipCode";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static string SelectAnalysisCommandText
      {
        get
        {
          return "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded";
        }
      }

      public static ZipStreetsDownloadedTable GetAllAnalysisData()
      {
        return GetAllAnalysisData(-1);
      }

      public static ZipStreetsDownloadedTable GetAllAnalysisData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.Analysis);
      }

      public static ZipStreetsDownloadedReader GetAllAnalysisDataReader()
      {
        return GetAllAnalysisDataReader(-1);
      }

      public static ZipStreetsDownloadedReader GetAllAnalysisDataReader(int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.Analysis);
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static void UpdateAnalysis(ZipStreetsDownloadedTable table)
      {
        UpdateAnalysis(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateAnalysis(ZipStreetsDownloadedTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsDownloadedTable.ColumnSet.Analysis, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static ZipStreetsDownloadedTable GetAnalysisDataByZipCode(String zipCode)
      {
        return GetAnalysisDataByZipCode(zipCode, -1);
      }

      public static ZipStreetsDownloadedTable GetAnalysisDataByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode ORDER BY StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.Analysis);
      }

      public static ZipStreetsDownloadedReader GetAnalysisDataReaderByZipCode(String zipCode)
      {
        return GetAnalysisDataReaderByZipCode(zipCode, -1);
      }

      public static ZipStreetsDownloadedReader GetAnalysisDataReaderByZipCode(String zipCode, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.Analysis) + " WHERE ZipCode=@ZipCode ORDER BY StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static ZipStreetsDownloadedTable GetAnalysisDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetAnalysisDataByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsDownloadedTable GetAnalysisDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Plus4Low,Plus4High,State FROM ZipStreetsDownloaded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return FillTable(cmd, ZipStreetsDownloadedTable.ColumnSet.Analysis);
      }

      public static ZipStreetsDownloadedReader GetAnalysisDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetAnalysisDataReaderByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsDownloadedReader GetAnalysisDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet.Analysis) + " WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return new ZipStreetsDownloadedReader(cmd.ExecuteReader(), cn);
      }

      public static string GetSelectCommandText(ZipStreetsDownloadedTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipStreetsDownloadedTable.ColumnSet.All:
            return SelectAllCommandText;

          case ZipStreetsDownloadedTable.ColumnSet.Lookup:
            return SelectLookupCommandText;

          case ZipStreetsDownloadedTable.ColumnSet.Analysis:
            return SelectAnalysisCommandText;

          default:
            return null;
        }
      }

      static ZipStreetsDownloaded()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class ZipStreetsDownloadedReader : DataReaderBase
    {
      public ZipStreetsDownloadedReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
      }

      public String Action
      {
        get { return this["Action"] as String; }
      }

      public String RecordType
      {
        get { return this["RecordType"] as String; }
      }

      public String CarrierRoute
      {
        get { return this["CarrierRoute"] as String; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
      }

      public String PrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
      }

      public String PrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
      }

      public String PrimaryOddEven
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
      }

      public String SecondaryType
      {
        get { return this["AddressSecAbbr"] as String; }
      }

      public String SecondaryLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
      }

      public String SecondaryHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
      }

      public String SecondaryOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
      }

      public String Plus4Low
      {
        get { return this["Plus4Low"] as String; }
      }

      public String Plus4High
      {
        get { return this["Plus4High"] as String; }
      }

      public String BaseAlternateCode
      {
        get { return this["BaseAlternateCode"] as String; }
      }

      public String LacsStatus
      {
        get { return this["LACSStatus"] as String; }
      }

      public String GovernmentBuilding
      {
        get { return this["GovernmentBuilding"] as String; }
      }

      public String FinanceNumber
      {
        get { return this["FinanceNumber"] as String; }
      }

      public String State
      {
        get { return this["State"] as String; }
      }

      public String CountyFips
      {
        get { return this["CountyFIPS"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String MunicipalityKey
      {
        get { return this["MunicipalityKey"] as String; }
      }

      public String UrbanizationKey
      {
        get { return this["UrbanizationKey"] as String; }
      }

      public String PreferredLastLineKey
      {
        get { return this["PreferredLastLineKey"] as String; }
      }

      public Decimal? ToLatitude
      {
        get { if (this.IsDBNull(GetOrdinal("ToLatitude"))) return null; else return (Decimal) this["ToLatitude"]; }
      }

      public Decimal? FromLatitude
      {
        get { if (this.IsDBNull(GetOrdinal("FromLatitude"))) return null; else return (Decimal) this["FromLatitude"]; }
      }

      public Decimal? ToLongitude
      {
        get { if (this.IsDBNull(GetOrdinal("ToLongitude"))) return null; else return (Decimal) this["ToLongitude"]; }
      }

      public Decimal? FromLongitude
      {
        get { if (this.IsDBNull(GetOrdinal("FromLongitude"))) return null; else return (Decimal) this["FromLongitude"]; }
      }

      public String CensusTract
      {
        get { return this["CensusTract"] as String; }
      }

      public String CensusBlock
      {
        get { return this["CensusBlock"] as String; }
      }

      public String Tlid
      {
        get { return this["TLID"] as String; }
      }

      public String LatitudeLongitudeMultiMatch
      {
        get { return this["LatLonMultiMatch"] as String; }
      }
    }

    #endregion votezipnew.ZipStreetsDownloaded

    #region votezipnew.ZipStreetsOld

    public partial class ZipStreetsOldRow : DataRow
    {
      internal ZipStreetsOldRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
        set { if (value == null) this["UpdateKey"] = DBNull.Value; else this["UpdateKey"] = value; }
      }

      public String StPreDirAbbr
      {
        get { return this["StPreDirAbbr"] as String; }
        set { if (value == null) this["StPreDirAbbr"] = DBNull.Value; else this["StPreDirAbbr"] = value; }
      }

      public String StName
      {
        get { return this["StName"] as String; }
        set { if (value == null) this["StName"] = DBNull.Value; else this["StName"] = value; }
      }

      public String StSuffixAbbr
      {
        get { return this["StSuffixAbbr"] as String; }
        set { if (value == null) this["StSuffixAbbr"] = DBNull.Value; else this["StSuffixAbbr"] = value; }
      }

      public String StPostDirAbbr
      {
        get { return this["StPostDirAbbr"] as String; }
        set { if (value == null) this["StPostDirAbbr"] = DBNull.Value; else this["StPostDirAbbr"] = value; }
      }

      public String AddressPrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
        set { if (value == null) this["AddressPrimaryLowNumber"] = DBNull.Value; else this["AddressPrimaryLowNumber"] = value; }
      }

      public String AddressPrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
        set { if (value == null) this["AddressPrimaryHighNumber"] = DBNull.Value; else this["AddressPrimaryHighNumber"] = value; }
      }

      public String AddressPrimaryEvenOdd
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
        set { if (value == null) this["AddressPrimaryEvenOdd"] = DBNull.Value; else this["AddressPrimaryEvenOdd"] = value; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
        set { if (value == null) this["BuildingName"] = DBNull.Value; else this["BuildingName"] = value; }
      }

      public String AddressSecAbbr
      {
        get { return this["AddressSecAbbr"] as String; }
        set { if (value == null) this["AddressSecAbbr"] = DBNull.Value; else this["AddressSecAbbr"] = value; }
      }

      public String AddressSecLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
        set { if (value == null) this["AddressSecLowNumber"] = DBNull.Value; else this["AddressSecLowNumber"] = value; }
      }

      public String AddressSecHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
        set { if (value == null) this["AddressSecHighNumber"] = DBNull.Value; else this["AddressSecHighNumber"] = value; }
      }

      public String AddressSecOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
        set { if (value == null) this["AddressSecOddEven"] = DBNull.Value; else this["AddressSecOddEven"] = value; }
      }

      public String Metaphone
      {
        get { return this["Metaphone"] as String; }
        set { if (value == null) this["Metaphone"] = DBNull.Value; else this["Metaphone"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }
    }

    [Serializable]
    public partial class ZipStreetsOldTable : TypedTableBase<ZipStreetsOldRow>
    {
      public ZipStreetsOldRow this[int index] { get { return (ZipStreetsOldRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipStreetsOldRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipStreetsOldTable(); }

      new public ZipStreetsOldRow NewRow() { return (ZipStreetsOldRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipStreetsOldRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipStreetsOldRow); }

      public void RemoveRow(ZipStreetsOldRow row) { this.Rows.Remove(row); }

      public ZipStreetsOldRow NewRow(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsOldRow row = NewRow();
        row.ZipCode = zipCode;
        row.UpdateKey = updateKey;
        row.StPreDirAbbr = stPreDirAbbr;
        row.StName = stName;
        row.StSuffixAbbr = stSuffixAbbr;
        row.StPostDirAbbr = stPostDirAbbr;
        row.AddressPrimaryLowNumber = addressPrimaryLowNumber;
        row.AddressPrimaryHighNumber = addressPrimaryHighNumber;
        row.AddressPrimaryEvenOdd = addressPrimaryEvenOdd;
        row.BuildingName = buildingName;
        row.AddressSecAbbr = addressSecAbbr;
        row.AddressSecLowNumber = addressSecLowNumber;
        row.AddressSecHighNumber = addressSecHighNumber;
        row.AddressSecOddEven = addressSecOddEven;
        row.Metaphone = metaphone;
        row.StateCode = stateCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.County = county;
        return row;
      }

      public void AddRow(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsOldRow row = NewRow(zipCode, updateKey, stPreDirAbbr, stName, stSuffixAbbr, stPostDirAbbr, addressPrimaryLowNumber, addressPrimaryHighNumber, addressPrimaryEvenOdd, buildingName, addressSecAbbr, addressSecLowNumber, addressSecHighNumber, addressSecOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn UpdateKeyColumn { get { return this.Columns["UpdateKey"]; } }

      public DataColumn StPreDirAbbrColumn { get { return this.Columns["StPreDirAbbr"]; } }

      public DataColumn StNameColumn { get { return this.Columns["StName"]; } }

      public DataColumn StSuffixAbbrColumn { get { return this.Columns["StSuffixAbbr"]; } }

      public DataColumn StPostDirAbbrColumn { get { return this.Columns["StPostDirAbbr"]; } }

      public DataColumn AddressPrimaryLowNumberColumn { get { return this.Columns["AddressPrimaryLowNumber"]; } }

      public DataColumn AddressPrimaryHighNumberColumn { get { return this.Columns["AddressPrimaryHighNumber"]; } }

      public DataColumn AddressPrimaryEvenOddColumn { get { return this.Columns["AddressPrimaryEvenOdd"]; } }

      public DataColumn BuildingNameColumn { get { return this.Columns["BuildingName"]; } }

      public DataColumn AddressSecAbbrColumn { get { return this.Columns["AddressSecAbbr"]; } }

      public DataColumn AddressSecLowNumberColumn { get { return this.Columns["AddressSecLowNumber"]; } }

      public DataColumn AddressSecHighNumberColumn { get { return this.Columns["AddressSecHighNumber"]; } }

      public DataColumn AddressSecOddEvenColumn { get { return this.Columns["AddressSecOddEven"]; } }

      public DataColumn MetaphoneColumn { get { return this.Columns["Metaphone"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UpdateKey", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BuildingName", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecOddEven", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Metaphone", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipStreetsOldTable() : this(ColumnSet.All) { }

      public ZipStreetsOldTable(ColumnSet columnSet)
      {
        this.TableName = "ZipStreetsOld";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipStreetsOldTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipStreetsOld
    {
      public const string TableName = "ZipStreetsOld";

      public enum Column { ZipCode, UpdateKey, StPreDirAbbr, StName, StSuffixAbbr, StPostDirAbbr, AddressPrimaryLowNumber, AddressPrimaryHighNumber, AddressPrimaryEvenOdd, BuildingName, AddressSecAbbr, AddressSecLowNumber, AddressSecHighNumber, AddressSecOddEven, Metaphone, StateCode, Congress, StateSenate, StateHouse, County }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.UpdateKey, "UpdateKey" },
        { Column.StPreDirAbbr, "StPreDirAbbr" },
        { Column.StName, "StName" },
        { Column.StSuffixAbbr, "StSuffixAbbr" },
        { Column.StPostDirAbbr, "StPostDirAbbr" },
        { Column.AddressPrimaryLowNumber, "AddressPrimaryLowNumber" },
        { Column.AddressPrimaryHighNumber, "AddressPrimaryHighNumber" },
        { Column.AddressPrimaryEvenOdd, "AddressPrimaryEvenOdd" },
        { Column.BuildingName, "BuildingName" },
        { Column.AddressSecAbbr, "AddressSecAbbr" },
        { Column.AddressSecLowNumber, "AddressSecLowNumber" },
        { Column.AddressSecHighNumber, "AddressSecHighNumber" },
        { Column.AddressSecOddEven, "AddressSecOddEven" },
        { Column.Metaphone, "Metaphone" },
        { Column.StateCode, "StateCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.County, "County" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        Insert(zipCode, updateKey, stPreDirAbbr, stName, stSuffixAbbr, stPostDirAbbr, addressPrimaryLowNumber, addressPrimaryHighNumber, addressPrimaryEvenOdd, buildingName, addressSecAbbr, addressSecLowNumber, addressSecHighNumber, addressSecOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county, -1);
      }

      public static void Insert(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipStreetsOld (ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County) VALUES (@ZipCode,@UpdateKey,@StPreDirAbbr,@StName,@StSuffixAbbr,@StPostDirAbbr,@AddressPrimaryLowNumber,@AddressPrimaryHighNumber,@AddressPrimaryEvenOdd,@BuildingName,@AddressSecAbbr,@AddressSecLowNumber,@AddressSecHighNumber,@AddressSecOddEven,@Metaphone,@StateCode,@Congress,@StateSenate,@StateHouse,@County)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "StPreDirAbbr", stPreDirAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "StSuffixAbbr", stSuffixAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "StPostDirAbbr", stPostDirAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryLowNumber", addressPrimaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryHighNumber", addressPrimaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryEvenOdd", addressPrimaryEvenOdd);
        VoteZipNewDb.AddCommandParameter(cmd, "BuildingName", buildingName);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecAbbr", addressSecAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecLowNumber", addressSecLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecHighNumber", addressSecHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecOddEven", addressSecOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsOld";
        }
      }

      public static ZipStreetsOldTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipStreetsOldTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsOld";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsOldTable.ColumnSet.All);
      }

      public static ZipStreetsOldTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipStreetsOldTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipStreetsOldTable FillTable(DbCommand command, ZipStreetsOldTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipStreetsOldTable table = new ZipStreetsOldTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipStreetsOldTable table)
      {
        UpdateTable(table, ZipStreetsOldTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsOldTable table, ZipStreetsOldTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsOldTable table, int commandTimeout)
      {
        UpdateTable(table, ZipStreetsOldTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsOldTable table, ZipStreetsOldTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsOldTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsOldTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipStreetsOldTable table, ZipStreetsOldTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string UpdateKeyColumnName { get { return "UpdateKey"; } }

      public static string StPreDirAbbrColumnName { get { return "StPreDirAbbr"; } }

      public static string StNameColumnName { get { return "StName"; } }

      public static string StSuffixAbbrColumnName { get { return "StSuffixAbbr"; } }

      public static string StPostDirAbbrColumnName { get { return "StPostDirAbbr"; } }

      public static string AddressPrimaryLowNumberColumnName { get { return "AddressPrimaryLowNumber"; } }

      public static string AddressPrimaryHighNumberColumnName { get { return "AddressPrimaryHighNumber"; } }

      public static string AddressPrimaryEvenOddColumnName { get { return "AddressPrimaryEvenOdd"; } }

      public static string BuildingNameColumnName { get { return "BuildingName"; } }

      public static string AddressSecAbbrColumnName { get { return "AddressSecAbbr"; } }

      public static string AddressSecLowNumberColumnName { get { return "AddressSecLowNumber"; } }

      public static string AddressSecHighNumberColumnName { get { return "AddressSecHighNumber"; } }

      public static string AddressSecOddEvenColumnName { get { return "AddressSecOddEven"; } }

      public static string MetaphoneColumnName { get { return "Metaphone"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int UpdateKeyMaxLength { get { return 14; } }

      public static int StPreDirAbbrMaxLength { get { return 2; } }

      public static int StNameMaxLength { get { return 28; } }

      public static int StSuffixAbbrMaxLength { get { return 4; } }

      public static int StPostDirAbbrMaxLength { get { return 2; } }

      public static int AddressPrimaryLowNumberMaxLength { get { return 10; } }

      public static int AddressPrimaryHighNumberMaxLength { get { return 10; } }

      public static int AddressPrimaryEvenOddMaxLength { get { return 1; } }

      public static int BuildingNameMaxLength { get { return 40; } }

      public static int AddressSecAbbrMaxLength { get { return 4; } }

      public static int AddressSecLowNumberMaxLength { get { return 10; } }

      public static int AddressSecHighNumberMaxLength { get { return 10; } }

      public static int AddressSecOddEvenMaxLength { get { return 1; } }

      public static int MetaphoneMaxLength { get { return 28; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CongressMaxLength { get { return 3; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static bool UpdateKeyExists(String updateKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByUpdateKey(String updateKey)
      {
        return GetZipCodeByUpdateKey(updateKey, null);
      }

      public static String GetZipCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey)
      {
        return GetUpdateKeyByUpdateKey(updateKey, null);
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UpdateKey FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStPreDirAbbrByUpdateKey(String updateKey)
      {
        return GetStPreDirAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStPreDirAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPreDirAbbr FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStNameByUpdateKey(String updateKey)
      {
        return GetStNameByUpdateKey(updateKey, null);
      }

      public static String GetStNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StName FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStSuffixAbbrByUpdateKey(String updateKey)
      {
        return GetStSuffixAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStSuffixAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StSuffixAbbr FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStPostDirAbbrByUpdateKey(String updateKey)
      {
        return GetStPostDirAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStPostDirAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPostDirAbbr FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryLowNumberByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryLowNumber FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryHighNumberByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryHighNumber FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryEvenOddByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryEvenOddByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryEvenOddByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryEvenOdd FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBuildingNameByUpdateKey(String updateKey)
      {
        return GetBuildingNameByUpdateKey(updateKey, null);
      }

      public static String GetBuildingNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT BuildingName FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecAbbrByUpdateKey(String updateKey)
      {
        return GetAddressSecAbbrByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecAbbr FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecLowNumberByUpdateKey(String updateKey)
      {
        return GetAddressSecLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecLowNumber FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecHighNumberByUpdateKey(String updateKey)
      {
        return GetAddressSecHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecHighNumber FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecOddEvenByUpdateKey(String updateKey)
      {
        return GetAddressSecOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecOddEven FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneByUpdateKey(String updateKey)
      {
        return GetMetaphoneByUpdateKey(updateKey, null);
      }

      public static String GetMetaphoneByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Metaphone FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByUpdateKey(String updateKey)
      {
        return GetStateCodeByUpdateKey(updateKey, null);
      }

      public static String GetStateCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByUpdateKey(String updateKey)
      {
        return GetCongressByUpdateKey(updateKey, null);
      }

      public static String GetCongressByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByUpdateKey(String updateKey)
      {
        return GetStateSenateByUpdateKey(updateKey, null);
      }

      public static String GetStateSenateByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByUpdateKey(String updateKey)
      {
        return GetStateHouseByUpdateKey(updateKey, null);
      }

      public static String GetStateHouseByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByUpdateKey(String updateKey)
      {
        return GetCountyByUpdateKey(updateKey, null);
      }

      public static String GetCountyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByUpdateKey(Column _column, String updateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsOldTable GetDataByUpdateKey(String updateKey)
      {
        return GetDataByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsOldTable GetDataByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return FillTable(cmd, ZipStreetsOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET ZipCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET UpdateKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPreDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StSuffixAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPostDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryEvenOdd=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET BuildingName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecOddEven=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Metaphone=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Congress=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateSenate=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateHouse=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET County=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUpdateKey(Column _column, object newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsOld SET {0}=@newValue WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUpdateKey(String updateKey)
      {
        return DeleteByUpdateKey(updateKey, -1);
      }

      public static int DeleteByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsOld WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeStName(String zipCode, String stName)
      {
        return CountByZipCodeStName(zipCode, stName, -1);
      }

      public static object GetColumnByZipCodeStName(Column _column, String zipCode, String stName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND StName=@StName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsOldTable GetDataByZipCodeStName(String zipCode, String stName)
      {
        return GetDataByZipCodeStName(zipCode, stName, -1);
      }

      public static ZipStreetsOldTable GetDataByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        return FillTable(cmd, ZipStreetsOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StName=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Congress=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET County=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeStName(Column _column, object newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsOld SET {0}=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeStName(String zipCode, String stName)
      {
        return DeleteByZipCodeStName(zipCode, stName, -1);
      }

      public static int DeleteByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return CountByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static object GetColumnByZipCodeMetaphone(Column _column, String zipCode, String metaphone)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsOldTable GetDataByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return GetDataByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static ZipStreetsOldTable GetDataByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return FillTable(cmd, ZipStreetsOldTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET Congress=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET County=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeMetaphone(Column _column, object newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsOld SET {0}=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return DeleteByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsOld WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipStreetsOldTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipStreetsOldTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipStreetsOld()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.ZipStreetsOld

    #region votezipnew.ZipStreetsTemp

    public partial class ZipStreetsTempRow : DataRow
    {
      internal ZipStreetsTempRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String UpdateKey
      {
        get { return this["UpdateKey"] as String; }
        set { if (value == null) this["UpdateKey"] = DBNull.Value; else this["UpdateKey"] = value; }
      }

      public String StPreDirAbbr
      {
        get { return this["StPreDirAbbr"] as String; }
        set { if (value == null) this["StPreDirAbbr"] = DBNull.Value; else this["StPreDirAbbr"] = value; }
      }

      public String StName
      {
        get { return this["StName"] as String; }
        set { if (value == null) this["StName"] = DBNull.Value; else this["StName"] = value; }
      }

      public String StSuffixAbbr
      {
        get { return this["StSuffixAbbr"] as String; }
        set { if (value == null) this["StSuffixAbbr"] = DBNull.Value; else this["StSuffixAbbr"] = value; }
      }

      public String StPostDirAbbr
      {
        get { return this["StPostDirAbbr"] as String; }
        set { if (value == null) this["StPostDirAbbr"] = DBNull.Value; else this["StPostDirAbbr"] = value; }
      }

      public String AddressPrimaryLowNumber
      {
        get { return this["AddressPrimaryLowNumber"] as String; }
        set { if (value == null) this["AddressPrimaryLowNumber"] = DBNull.Value; else this["AddressPrimaryLowNumber"] = value; }
      }

      public String AddressPrimaryHighNumber
      {
        get { return this["AddressPrimaryHighNumber"] as String; }
        set { if (value == null) this["AddressPrimaryHighNumber"] = DBNull.Value; else this["AddressPrimaryHighNumber"] = value; }
      }

      public String AddressPrimaryEvenOdd
      {
        get { return this["AddressPrimaryEvenOdd"] as String; }
        set { if (value == null) this["AddressPrimaryEvenOdd"] = DBNull.Value; else this["AddressPrimaryEvenOdd"] = value; }
      }

      public String BuildingName
      {
        get { return this["BuildingName"] as String; }
        set { if (value == null) this["BuildingName"] = DBNull.Value; else this["BuildingName"] = value; }
      }

      public String AddressSecAbbr
      {
        get { return this["AddressSecAbbr"] as String; }
        set { if (value == null) this["AddressSecAbbr"] = DBNull.Value; else this["AddressSecAbbr"] = value; }
      }

      public String AddressSecLowNumber
      {
        get { return this["AddressSecLowNumber"] as String; }
        set { if (value == null) this["AddressSecLowNumber"] = DBNull.Value; else this["AddressSecLowNumber"] = value; }
      }

      public String AddressSecHighNumber
      {
        get { return this["AddressSecHighNumber"] as String; }
        set { if (value == null) this["AddressSecHighNumber"] = DBNull.Value; else this["AddressSecHighNumber"] = value; }
      }

      public String AddressSecOddEven
      {
        get { return this["AddressSecOddEven"] as String; }
        set { if (value == null) this["AddressSecOddEven"] = DBNull.Value; else this["AddressSecOddEven"] = value; }
      }

      public String Metaphone
      {
        get { return this["Metaphone"] as String; }
        set { if (value == null) this["Metaphone"] = DBNull.Value; else this["Metaphone"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Congress
      {
        get { return this["Congress"] as String; }
        set { if (value == null) this["Congress"] = DBNull.Value; else this["Congress"] = value; }
      }

      public String StateSenate
      {
        get { return this["StateSenate"] as String; }
        set { if (value == null) this["StateSenate"] = DBNull.Value; else this["StateSenate"] = value; }
      }

      public String StateHouse
      {
        get { return this["StateHouse"] as String; }
        set { if (value == null) this["StateHouse"] = DBNull.Value; else this["StateHouse"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }
    }

    [Serializable]
    public partial class ZipStreetsTempTable : TypedTableBase<ZipStreetsTempRow>
    {
      public ZipStreetsTempRow this[int index] { get { return (ZipStreetsTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipStreetsTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipStreetsTempTable(); }

      new public ZipStreetsTempRow NewRow() { return (ZipStreetsTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipStreetsTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipStreetsTempRow); }

      public void RemoveRow(ZipStreetsTempRow row) { this.Rows.Remove(row); }

      public ZipStreetsTempRow NewRow(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsTempRow row = NewRow();
        row.ZipCode = zipCode;
        row.UpdateKey = updateKey;
        row.StPreDirAbbr = stPreDirAbbr;
        row.StName = stName;
        row.StSuffixAbbr = stSuffixAbbr;
        row.StPostDirAbbr = stPostDirAbbr;
        row.AddressPrimaryLowNumber = addressPrimaryLowNumber;
        row.AddressPrimaryHighNumber = addressPrimaryHighNumber;
        row.AddressPrimaryEvenOdd = addressPrimaryEvenOdd;
        row.BuildingName = buildingName;
        row.AddressSecAbbr = addressSecAbbr;
        row.AddressSecLowNumber = addressSecLowNumber;
        row.AddressSecHighNumber = addressSecHighNumber;
        row.AddressSecOddEven = addressSecOddEven;
        row.Metaphone = metaphone;
        row.StateCode = stateCode;
        row.Congress = congress;
        row.StateSenate = stateSenate;
        row.StateHouse = stateHouse;
        row.County = county;
        return row;
      }

      public void AddRow(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        ZipStreetsTempRow row = NewRow(zipCode, updateKey, stPreDirAbbr, stName, stSuffixAbbr, stPostDirAbbr, addressPrimaryLowNumber, addressPrimaryHighNumber, addressPrimaryEvenOdd, buildingName, addressSecAbbr, addressSecLowNumber, addressSecHighNumber, addressSecOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn UpdateKeyColumn { get { return this.Columns["UpdateKey"]; } }

      public DataColumn StPreDirAbbrColumn { get { return this.Columns["StPreDirAbbr"]; } }

      public DataColumn StNameColumn { get { return this.Columns["StName"]; } }

      public DataColumn StSuffixAbbrColumn { get { return this.Columns["StSuffixAbbr"]; } }

      public DataColumn StPostDirAbbrColumn { get { return this.Columns["StPostDirAbbr"]; } }

      public DataColumn AddressPrimaryLowNumberColumn { get { return this.Columns["AddressPrimaryLowNumber"]; } }

      public DataColumn AddressPrimaryHighNumberColumn { get { return this.Columns["AddressPrimaryHighNumber"]; } }

      public DataColumn AddressPrimaryEvenOddColumn { get { return this.Columns["AddressPrimaryEvenOdd"]; } }

      public DataColumn BuildingNameColumn { get { return this.Columns["BuildingName"]; } }

      public DataColumn AddressSecAbbrColumn { get { return this.Columns["AddressSecAbbr"]; } }

      public DataColumn AddressSecLowNumberColumn { get { return this.Columns["AddressSecLowNumber"]; } }

      public DataColumn AddressSecHighNumberColumn { get { return this.Columns["AddressSecHighNumber"]; } }

      public DataColumn AddressSecOddEvenColumn { get { return this.Columns["AddressSecOddEven"]; } }

      public DataColumn MetaphoneColumn { get { return this.Columns["Metaphone"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CongressColumn { get { return this.Columns["Congress"]; } }

      public DataColumn StateSenateColumn { get { return this.Columns["StateSenate"]; } }

      public DataColumn StateHouseColumn { get { return this.Columns["StateHouse"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UpdateKey", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressPrimaryEvenOdd", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BuildingName", typeof(String));
        _column.MaxLength = 40;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecLowNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecHighNumber", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressSecOddEven", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Metaphone", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Congress", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenate", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouse", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipStreetsTempTable() : this(ColumnSet.All) { }

      public ZipStreetsTempTable(ColumnSet columnSet)
      {
        this.TableName = "ZipStreetsTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipStreetsTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipStreetsTemp
    {
      public const string TableName = "ZipStreetsTemp";

      public enum Column { ZipCode, UpdateKey, StPreDirAbbr, StName, StSuffixAbbr, StPostDirAbbr, AddressPrimaryLowNumber, AddressPrimaryHighNumber, AddressPrimaryEvenOdd, BuildingName, AddressSecAbbr, AddressSecLowNumber, AddressSecHighNumber, AddressSecOddEven, Metaphone, StateCode, Congress, StateSenate, StateHouse, County }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.UpdateKey, "UpdateKey" },
        { Column.StPreDirAbbr, "StPreDirAbbr" },
        { Column.StName, "StName" },
        { Column.StSuffixAbbr, "StSuffixAbbr" },
        { Column.StPostDirAbbr, "StPostDirAbbr" },
        { Column.AddressPrimaryLowNumber, "AddressPrimaryLowNumber" },
        { Column.AddressPrimaryHighNumber, "AddressPrimaryHighNumber" },
        { Column.AddressPrimaryEvenOdd, "AddressPrimaryEvenOdd" },
        { Column.BuildingName, "BuildingName" },
        { Column.AddressSecAbbr, "AddressSecAbbr" },
        { Column.AddressSecLowNumber, "AddressSecLowNumber" },
        { Column.AddressSecHighNumber, "AddressSecHighNumber" },
        { Column.AddressSecOddEven, "AddressSecOddEven" },
        { Column.Metaphone, "Metaphone" },
        { Column.StateCode, "StateCode" },
        { Column.Congress, "Congress" },
        { Column.StateSenate, "StateSenate" },
        { Column.StateHouse, "StateHouse" },
        { Column.County, "County" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsTemp";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county)
      {
        Insert(zipCode, updateKey, stPreDirAbbr, stName, stSuffixAbbr, stPostDirAbbr, addressPrimaryLowNumber, addressPrimaryHighNumber, addressPrimaryEvenOdd, buildingName, addressSecAbbr, addressSecLowNumber, addressSecHighNumber, addressSecOddEven, metaphone, stateCode, congress, stateSenate, stateHouse, county, -1);
      }

      public static void Insert(String zipCode, String updateKey, String stPreDirAbbr, String stName, String stSuffixAbbr, String stPostDirAbbr, String addressPrimaryLowNumber, String addressPrimaryHighNumber, String addressPrimaryEvenOdd, String buildingName, String addressSecAbbr, String addressSecLowNumber, String addressSecHighNumber, String addressSecOddEven, String metaphone, String stateCode, String congress, String stateSenate, String stateHouse, String county, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipStreetsTemp (ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County) VALUES (@ZipCode,@UpdateKey,@StPreDirAbbr,@StName,@StSuffixAbbr,@StPostDirAbbr,@AddressPrimaryLowNumber,@AddressPrimaryHighNumber,@AddressPrimaryEvenOdd,@BuildingName,@AddressSecAbbr,@AddressSecLowNumber,@AddressSecHighNumber,@AddressSecOddEven,@Metaphone,@StateCode,@Congress,@StateSenate,@StateHouse,@County)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "StPreDirAbbr", stPreDirAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "StSuffixAbbr", stSuffixAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "StPostDirAbbr", stPostDirAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryLowNumber", addressPrimaryLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryHighNumber", addressPrimaryHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressPrimaryEvenOdd", addressPrimaryEvenOdd);
        VoteZipNewDb.AddCommandParameter(cmd, "BuildingName", buildingName);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecAbbr", addressSecAbbr);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecLowNumber", addressSecLowNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecHighNumber", addressSecHighNumber);
        VoteZipNewDb.AddCommandParameter(cmd, "AddressSecOddEven", addressSecOddEven);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Congress", congress);
        VoteZipNewDb.AddCommandParameter(cmd, "StateSenate", stateSenate);
        VoteZipNewDb.AddCommandParameter(cmd, "StateHouse", stateHouse);
        VoteZipNewDb.AddCommandParameter(cmd, "County", county);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsTemp";
        }
      }

      public static ZipStreetsTempTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipStreetsTempTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsTemp";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsTempTable.ColumnSet.All);
      }

      public static ZipStreetsTempTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipStreetsTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipStreetsTempTable FillTable(DbCommand command, ZipStreetsTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipStreetsTempTable table = new ZipStreetsTempTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipStreetsTempTable table)
      {
        UpdateTable(table, ZipStreetsTempTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTempTable table, ZipStreetsTempTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTempTable table, int commandTimeout)
      {
        UpdateTable(table, ZipStreetsTempTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTempTable table, ZipStreetsTempTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsTempTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipStreetsTempTable table, ZipStreetsTempTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string UpdateKeyColumnName { get { return "UpdateKey"; } }

      public static string StPreDirAbbrColumnName { get { return "StPreDirAbbr"; } }

      public static string StNameColumnName { get { return "StName"; } }

      public static string StSuffixAbbrColumnName { get { return "StSuffixAbbr"; } }

      public static string StPostDirAbbrColumnName { get { return "StPostDirAbbr"; } }

      public static string AddressPrimaryLowNumberColumnName { get { return "AddressPrimaryLowNumber"; } }

      public static string AddressPrimaryHighNumberColumnName { get { return "AddressPrimaryHighNumber"; } }

      public static string AddressPrimaryEvenOddColumnName { get { return "AddressPrimaryEvenOdd"; } }

      public static string BuildingNameColumnName { get { return "BuildingName"; } }

      public static string AddressSecAbbrColumnName { get { return "AddressSecAbbr"; } }

      public static string AddressSecLowNumberColumnName { get { return "AddressSecLowNumber"; } }

      public static string AddressSecHighNumberColumnName { get { return "AddressSecHighNumber"; } }

      public static string AddressSecOddEvenColumnName { get { return "AddressSecOddEven"; } }

      public static string MetaphoneColumnName { get { return "Metaphone"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CongressColumnName { get { return "Congress"; } }

      public static string StateSenateColumnName { get { return "StateSenate"; } }

      public static string StateHouseColumnName { get { return "StateHouse"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int UpdateKeyMaxLength { get { return 14; } }

      public static int StPreDirAbbrMaxLength { get { return 2; } }

      public static int StNameMaxLength { get { return 28; } }

      public static int StSuffixAbbrMaxLength { get { return 4; } }

      public static int StPostDirAbbrMaxLength { get { return 2; } }

      public static int AddressPrimaryLowNumberMaxLength { get { return 10; } }

      public static int AddressPrimaryHighNumberMaxLength { get { return 10; } }

      public static int AddressPrimaryEvenOddMaxLength { get { return 1; } }

      public static int BuildingNameMaxLength { get { return 40; } }

      public static int AddressSecAbbrMaxLength { get { return 4; } }

      public static int AddressSecLowNumberMaxLength { get { return 10; } }

      public static int AddressSecHighNumberMaxLength { get { return 10; } }

      public static int AddressSecOddEvenMaxLength { get { return 1; } }

      public static int MetaphoneMaxLength { get { return 28; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CongressMaxLength { get { return 3; } }

      public static int StateSenateMaxLength { get { return 3; } }

      public static int StateHouseMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static bool UpdateKeyExists(String updateKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByUpdateKey(String updateKey)
      {
        return GetZipCodeByUpdateKey(updateKey, null);
      }

      public static String GetZipCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey)
      {
        return GetUpdateKeyByUpdateKey(updateKey, null);
      }

      public static String GetUpdateKeyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT UpdateKey FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStPreDirAbbrByUpdateKey(String updateKey)
      {
        return GetStPreDirAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStPreDirAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPreDirAbbr FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStNameByUpdateKey(String updateKey)
      {
        return GetStNameByUpdateKey(updateKey, null);
      }

      public static String GetStNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StName FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStSuffixAbbrByUpdateKey(String updateKey)
      {
        return GetStSuffixAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStSuffixAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StSuffixAbbr FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStPostDirAbbrByUpdateKey(String updateKey)
      {
        return GetStPostDirAbbrByUpdateKey(updateKey, null);
      }

      public static String GetStPostDirAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPostDirAbbr FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryLowNumberByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryLowNumber FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryHighNumberByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryHighNumber FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressPrimaryEvenOddByUpdateKey(String updateKey)
      {
        return GetAddressPrimaryEvenOddByUpdateKey(updateKey, null);
      }

      public static String GetAddressPrimaryEvenOddByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressPrimaryEvenOdd FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBuildingNameByUpdateKey(String updateKey)
      {
        return GetBuildingNameByUpdateKey(updateKey, null);
      }

      public static String GetBuildingNameByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT BuildingName FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecAbbrByUpdateKey(String updateKey)
      {
        return GetAddressSecAbbrByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecAbbrByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecAbbr FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecLowNumberByUpdateKey(String updateKey)
      {
        return GetAddressSecLowNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecLowNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecLowNumber FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecHighNumberByUpdateKey(String updateKey)
      {
        return GetAddressSecHighNumberByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecHighNumberByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecHighNumber FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressSecOddEvenByUpdateKey(String updateKey)
      {
        return GetAddressSecOddEvenByUpdateKey(updateKey, null);
      }

      public static String GetAddressSecOddEvenByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT AddressSecOddEven FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMetaphoneByUpdateKey(String updateKey)
      {
        return GetMetaphoneByUpdateKey(updateKey, null);
      }

      public static String GetMetaphoneByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Metaphone FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByUpdateKey(String updateKey)
      {
        return GetStateCodeByUpdateKey(updateKey, null);
      }

      public static String GetStateCodeByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateCode FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressByUpdateKey(String updateKey)
      {
        return GetCongressByUpdateKey(updateKey, null);
      }

      public static String GetCongressByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT Congress FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateByUpdateKey(String updateKey)
      {
        return GetStateSenateByUpdateKey(updateKey, null);
      }

      public static String GetStateSenateByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateSenate FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseByUpdateKey(String updateKey)
      {
        return GetStateHouseByUpdateKey(updateKey, null);
      }

      public static String GetStateHouseByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StateHouse FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByUpdateKey(String updateKey)
      {
        return GetCountyByUpdateKey(updateKey, null);
      }

      public static String GetCountyByUpdateKey(String updateKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT County FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByUpdateKey(Column _column, String updateKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTempTable GetDataByUpdateKey(String updateKey)
      {
        return GetDataByUpdateKey(updateKey, -1);
      }

      public static ZipStreetsTempTable GetDataByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return FillTable(cmd, ZipStreetsTempTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET ZipCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET UpdateKey=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPreDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StSuffixAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPostDirAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryEvenOdd=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET BuildingName=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecAbbr=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecLowNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecHighNumber=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecOddEven=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Metaphone=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateCode=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Congress=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateSenate=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateHouse=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByUpdateKey(String newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET County=@newValue WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUpdateKey(Column _column, object newValue, String updateKey)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET {0}=@newValue WHERE UpdateKey=@UpdateKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUpdateKey(String updateKey)
      {
        return DeleteByUpdateKey(updateKey, -1);
      }

      public static int DeleteByUpdateKey(String updateKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsTemp WHERE UpdateKey=@UpdateKey";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "UpdateKey", updateKey);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeStName(String zipCode, String stName)
      {
        return CountByZipCodeStName(zipCode, stName, -1);
      }

      public static object GetColumnByZipCodeStName(Column _column, String zipCode, String stName)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND StName=@StName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTempTable GetDataByZipCodeStName(String zipCode, String stName)
      {
        return GetDataByZipCodeStName(zipCode, stName, -1);
      }

      public static ZipStreetsTempTable GetDataByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        return FillTable(cmd, ZipStreetsTempTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StName=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateCode=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Congress=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeStName(String newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET County=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeStName(Column _column, object newValue, String zipCode, String stName)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET {0}=@newValue WHERE ZipCode=@ZipCode AND StName=@StName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeStName(String zipCode, String stName)
      {
        return DeleteByZipCodeStName(zipCode, stName, -1);
      }

      public static int DeleteByZipCodeStName(String zipCode, String stName, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND StName=@StName";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "StName", stName);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static int CountByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return CountByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static object GetColumnByZipCodeMetaphone(Column _column, String zipCode, String metaphone)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsTempTable GetDataByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return GetDataByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static ZipStreetsTempTable GetDataByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,UpdateKey,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr,AddressPrimaryLowNumber,AddressPrimaryHighNumber,AddressPrimaryEvenOdd,BuildingName,AddressSecAbbr,AddressSecLowNumber,AddressSecHighNumber,AddressSecOddEven,Metaphone,StateCode,Congress,StateSenate,StateHouse,County FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return FillTable(cmd, ZipStreetsTempTable.ColumnSet.All);
      }

      public static int UpdateZipCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUpdateKeyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET UpdateKey=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPreDirAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStSuffixAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStPostDirAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressPrimaryEvenOddByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressPrimaryEvenOdd=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBuildingNameByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET BuildingName=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecAbbrByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecAbbr=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecLowNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecLowNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecHighNumberByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecHighNumber=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressSecOddEvenByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET AddressSecOddEven=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMetaphoneByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Metaphone=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateCode=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET Congress=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateSenate=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET StateHouse=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByZipCodeMetaphone(String newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET County=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByZipCodeMetaphone(Column _column, object newValue, String zipCode, String metaphone)
      {
        string cmdText = "UPDATE ZipStreetsTemp SET {0}=@newValue WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone)
      {
        return DeleteByZipCodeMetaphone(zipCode, metaphone, -1);
      }

      public static int DeleteByZipCodeMetaphone(String zipCode, String metaphone, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsTemp WHERE ZipCode=@ZipCode AND Metaphone=@Metaphone";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "Metaphone", metaphone);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipStreetsTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipStreetsTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipStreetsTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votezipnew.ZipStreetsTemp

    #region votezipnew.ZipStreetsUpdatesNeeded

    public partial class ZipStreetsUpdatesNeededRow : DataRow
    {
      internal ZipStreetsUpdatesNeededRow(DataRowBuilder rb) : base(rb) {}

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
        set { if (value == null) this["ZipCode"] = DBNull.Value; else this["ZipCode"] = value; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
        set { if (value == null) this["StPreDirAbbr"] = DBNull.Value; else this["StPreDirAbbr"] = value; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
        set { if (value == null) this["StName"] = DBNull.Value; else this["StName"] = value; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
        set { if (value == null) this["StSuffixAbbr"] = DBNull.Value; else this["StSuffixAbbr"] = value; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
        set { if (value == null) this["StPostDirAbbr"] = DBNull.Value; else this["StPostDirAbbr"] = value; }
      }
    }

    [Serializable]
    public partial class ZipStreetsUpdatesNeededTable : TypedTableBase<ZipStreetsUpdatesNeededRow>
    {
      public ZipStreetsUpdatesNeededRow this[int index] { get { return (ZipStreetsUpdatesNeededRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(ZipStreetsUpdatesNeededRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new ZipStreetsUpdatesNeededTable(); }

      new public ZipStreetsUpdatesNeededRow NewRow() { return (ZipStreetsUpdatesNeededRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new ZipStreetsUpdatesNeededRow(rb); }

      protected override Type GetRowType()
      { return typeof(ZipStreetsUpdatesNeededRow); }

      public void RemoveRow(ZipStreetsUpdatesNeededRow row) { this.Rows.Remove(row); }

      public ZipStreetsUpdatesNeededRow NewRow(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        ZipStreetsUpdatesNeededRow row = NewRow();
        row.ZipCode = zipCode;
        row.DirectionPrefix = directionPrefix;
        row.StreetName = streetName;
        row.StreetSuffix = streetSuffix;
        row.DirectionSuffix = directionSuffix;
        return row;
      }

      public void AddRow(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        ZipStreetsUpdatesNeededRow row = NewRow(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix);
        AddRow(row);
      }

      public DataColumn ZipCodeColumn { get { return this.Columns["ZipCode"]; } }

      public DataColumn DirectionPrefixColumn { get { return this.Columns["StPreDirAbbr"]; } }

      public DataColumn StreetNameColumn { get { return this.Columns["StName"]; } }

      public DataColumn StreetSuffixColumn { get { return this.Columns["StSuffixAbbr"]; } }

      public DataColumn DirectionSuffixColumn { get { return this.Columns["StPostDirAbbr"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ZipCode", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPreDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StName", typeof(String));
        _column.MaxLength = 28;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StSuffixAbbr", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StPostDirAbbr", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public ZipStreetsUpdatesNeededTable() : this(ColumnSet.All) { }

      public ZipStreetsUpdatesNeededTable(ColumnSet columnSet)
      {
        this.TableName = "ZipStreetsUpdatesNeeded";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected ZipStreetsUpdatesNeededTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class ZipStreetsUpdatesNeeded
    {
      public const string TableName = "ZipStreetsUpdatesNeeded";

      public enum Column { ZipCode, DirectionPrefix, StreetName, StreetSuffix, DirectionSuffix }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.ZipCode, "ZipCode" },
        { Column.DirectionPrefix, "StPreDirAbbr" },
        { Column.StreetName, "StName" },
        { Column.StreetSuffix, "StSuffixAbbr" },
        { Column.DirectionSuffix, "StPostDirAbbr" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsUpdatesNeeded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable()
      {
        TruncateTable(-1);
      }

      public static void TruncateTable(int commandTimeout)
      {
        string cmdText = "TRUNCATE TABLE ZipStreetsUpdatesNeeded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static void Insert(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        Insert(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static void Insert(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "INSERT INTO ZipStreetsUpdatesNeeded (ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr) VALUES (@ZipCode,@DirectionPrefix,@StreetName,@StreetSuffix,@DirectionSuffix)";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr FROM ZipStreetsUpdatesNeeded";
        }
      }

      public static ZipStreetsUpdatesNeededTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static ZipStreetsUpdatesNeededTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr FROM ZipStreetsUpdatesNeeded";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, ZipStreetsUpdatesNeededTable.ColumnSet.All);
      }

      public static ZipStreetsUpdatesNeededReader GetAllDataReader()
      {
        return GetAllDataReader(-1);
      }

      public static ZipStreetsUpdatesNeededReader GetAllDataReader(int commandTimeout)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        return new ZipStreetsUpdatesNeededReader(cmd.ExecuteReader(), cn);
      }

      public static ZipStreetsUpdatesNeededTable FillTable(DbCommand command)
      {
        return FillTable(command, ZipStreetsUpdatesNeededTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static ZipStreetsUpdatesNeededTable FillTable(DbCommand command, ZipStreetsUpdatesNeededTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          command.Connection = cn;
          ZipStreetsUpdatesNeededTable table = new ZipStreetsUpdatesNeededTable(columnSet);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table)
      {
        UpdateTable(table, ZipStreetsUpdatesNeededTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table, ZipStreetsUpdatesNeededTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table, int commandTimeout)
      {
        UpdateTable(table, ZipStreetsUpdatesNeededTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table, ZipStreetsUpdatesNeededTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, ZipStreetsUpdatesNeededTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(ZipStreetsUpdatesNeededTable table, ZipStreetsUpdatesNeededTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteZipNewDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteZipNewDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteZipNewDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string ZipCodeColumnName { get { return "ZipCode"; } }

      public static string DirectionPrefixColumnName { get { return "StPreDirAbbr"; } }

      public static string StreetNameColumnName { get { return "StName"; } }

      public static string StreetSuffixColumnName { get { return "StSuffixAbbr"; } }

      public static string DirectionSuffixColumnName { get { return "StPostDirAbbr"; } }

      public static int ZipCodeMaxLength { get { return 5; } }

      public static int DirectionPrefixMaxLength { get { return 2; } }

      public static int StreetNameMaxLength { get { return 28; } }

      public static int StreetSuffixMaxLength { get { return 4; } }

      public static int DirectionSuffixMaxLength { get { return 2; } }

      public static bool FullStreetNameExists(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetZipCodeByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetZipCodeByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, null);
      }

      public static String GetZipCodeByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String defaultValue)
      {
        object result;
        string cmdText = "SELECT ZipCode FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionPrefixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDirectionPrefixByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, null);
      }

      public static String GetDirectionPrefixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPreDirAbbr FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetNameByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetStreetNameByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, null);
      }

      public static String GetStreetNameByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StName FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStreetSuffixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetStreetSuffixByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, null);
      }

      public static String GetStreetSuffixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StSuffixAbbr FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDirectionSuffixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDirectionSuffixByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, null);
      }

      public static String GetDirectionSuffixByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, String defaultValue)
      {
        object result;
        string cmdText = "SELECT StPostDirAbbr FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByFullStreetName(Column _column, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        object result;
        string cmdText = "SELECT {0} FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        result = VoteZipNewDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static ZipStreetsUpdatesNeededTable GetDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDataByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsUpdatesNeededTable GetDataByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "SELECT ZipCode,StPreDirAbbr,StName,StSuffixAbbr,StPostDirAbbr FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return FillTable(cmd, ZipStreetsUpdatesNeededTable.ColumnSet.All);
      }

      public static ZipStreetsUpdatesNeededReader GetDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return GetDataReaderByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static ZipStreetsUpdatesNeededReader GetDataReaderByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = GetSelectCommandText(ZipStreetsUpdatesNeededTable.ColumnSet.All) + " WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbConnection cn = VoteZipNewDb.GetOpenConnection();
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, cn, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return new ZipStreetsUpdatesNeededReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateZipCodeByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET ZipCode=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionPrefixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET StPreDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetNameByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET StName=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStreetSuffixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET StSuffixAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDirectionSuffixByFullStreetName(String newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET StPostDirAbbr=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFullStreetName(Column _column, object newValue, String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        string cmdText = "UPDATE ZipStreetsUpdatesNeeded SET {0}=@newValue WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, -1);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix)
      {
        return DeleteByFullStreetName(zipCode, directionPrefix, streetName, streetSuffix, directionSuffix, -1);
      }

      public static int DeleteByFullStreetName(String zipCode, String directionPrefix, String streetName, String streetSuffix, String directionSuffix, int commandTimeout)
      {
        string cmdText = "DELETE FROM ZipStreetsUpdatesNeeded WHERE ZipCode=@ZipCode AND StPreDirAbbr=@DirectionPrefix AND StName=@StreetName AND StSuffixAbbr=@StreetSuffix AND StPostDirAbbr=@DirectionSuffix";
        DbCommand cmd = VoteZipNewDb.GetCommand(cmdText, commandTimeout);
        VoteZipNewDb.AddCommandParameter(cmd, "ZipCode", zipCode);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionPrefix", directionPrefix);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetName", streetName);
        VoteZipNewDb.AddCommandParameter(cmd, "StreetSuffix", streetSuffix);
        VoteZipNewDb.AddCommandParameter(cmd, "DirectionSuffix", directionSuffix);
        return VoteZipNewDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(ZipStreetsUpdatesNeededTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case ZipStreetsUpdatesNeededTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static ZipStreetsUpdatesNeeded()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class ZipStreetsUpdatesNeededReader : DataReaderBase
    {
      public ZipStreetsUpdatesNeededReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String ZipCode
      {
        get { return this["ZipCode"] as String; }
      }

      public String DirectionPrefix
      {
        get { return this["StPreDirAbbr"] as String; }
      }

      public String StreetName
      {
        get { return this["StName"] as String; }
      }

      public String StreetSuffix
      {
        get { return this["StSuffixAbbr"] as String; }
      }

      public String DirectionSuffix
      {
        get { return this["StPostDirAbbr"] as String; }
      }
    }

    #endregion votezipnew.ZipStreetsUpdatesNeeded
  }
}
