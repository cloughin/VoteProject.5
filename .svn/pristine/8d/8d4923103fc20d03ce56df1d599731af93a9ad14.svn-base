using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using DB.Vote;
using Vote.Reports;

namespace Vote
{
  public partial class OfficialsPageX : CacheablePage
  {
    protected OfficialsPageX()
    {
      No404OnUrlNormalizeError = true;
      NoUrlEdit = true; /* bacause disabled */
      NoIndex = true; /* bacause disabled */
    }

    #region Caching support

    protected override bool SuppressCaching
    {
      get { return true; }
    }

    protected override string GetCacheKey()
    {
      var key = UrlManager.GetStateCodeFromHostName() + "." + QueryReport + "." +
        QueryState + "." + QueryCounty + "." + QueryLocal;
      var siteId = UrlManager.CurrentQuerySiteId;
      if (!string.IsNullOrEmpty(siteId))
        key += "." + siteId;

      return key;
    }

    protected override string GetCacheType()
    {
      return "Officials";
    }

    #endregion Caching support

    private string _StateCode;
    private string _CountyCode;
    private string _LocalCode;
    private ElectoralClass _ElectoralClass;
    private string _ElectoralClassDescription;

    private const string TitleTagAllStatesDomain =
      "Federal Elected Officials’ Pictures, Bios, Social Media and Issue Positions";

    private const string MetaDescriptionAllStatesDomain =
      "Federal elected officials’ pictures, bios, social media and positions on the issues; plus your customized sample ballot.";

    private const string MetaKeywordsAllStatesDomain =
      "sample ballot, sample ballots, vote, voter, ballot, election, voting, candidates";

    private const string TitleTagSingleStateDomain =
      "{0} Elected Officials’ Pictures, Bios, Social Media and Issue Positions";

    private const string MetaDescriptionSingleStateDomain =
      "{0} and Federal elected officials’ pictures, bios, social media and positions on the issues; plus your customized sample ballot.";

    private const string MetaKeywordsSingleStateDomain =
      "{0} sample ballot, {0} sample ballots, {0} vote, {0} voter, {0} ballot, {0} election, {0} voting, {0} candidates";

    private string GetDirectoryName()
    {
      switch (_ElectoralClass)
      {
        case ElectoralClass.USSenate:
          return "Directory of Currently Elected U.S. Senators";
        case ElectoralClass.USHouse:
          return "Directory of Currently Elected U.S. House Members";
        case ElectoralClass.USGovernors:
          return "Directory of Currently Elected State Governors";
        case ElectoralClass.State:
          return
            "Directory of Currently Elected State and Federal Elected Representatives";
        case ElectoralClass.County:
          return "Directories of Currently Elected County Representatives";
        case ElectoralClass.Local:
          return "Directories of Currently Elected Local District Representatives";
        default:
          return string.Empty;
      }
    }

    private string GetMetaTagContent()
    {
      return _ElectoralClassDescription + " " + GetDirectoryName();
    }

    private string FillInInstructions()
    {
      var intro = "This is a {0}. Use the picture or name links to obtain" +
        " biographical information and the individual's views and opinions" +
        " on issues. The links navigation bars links above provide additional" +
        " electoral information of possible interest. The first link in the" +
        " first navigation bar will take you to a page where you can obtain" +
        " information about any other State or DC. And please help us with" +
        " a donation so we can continue to provide the information you need" +
        " to become a more informed and participating citizen.";

      switch (_ElectoralClass)
      {
        case ElectoralClass.USPresident:
          intro = "These are the currently-elected U.S. President and Vice" +
            " President. Use the picture or name links to obtain biographical" +
            " information and the individual's views and opinions on issues." +
            " The links navigation bars links above provide additional electoral" +
            " information of possible interest. The first link in the first" +
            " navigation bar will take you to a page where you can obtain" +
            " information about any other State or DC. And please help us with" +
            " a donation so we can continue to provide the information you need" +
            " to become a more informed and participating citizen.";
          break;

        case ElectoralClass.County:
          if (_CountyCode == "000")
            intro =
              "Use these links to obtain reports of the elected county officials" +
                " in the various " + StateCache.GetStateName(_StateCode) +
                " Counties. The reports will also provide links" +
                " to obtain reports of the elected local district officials.";
          break;

        case ElectoralClass.Local:
          if (_LocalCode == "00")
            intro =
              "Use these links to obtain elected local district officials in the" +
                " various " + _ElectoralClassDescription + " Local Districts.";
          break;
      }

      return string.Format(intro, GetMetaTagContent());
    }

    private void PopulateMetaTags()
    {
      if (DomainData.IsValidStateCode) // Single state
      {
        TitleTag.Text = TitleTagSingleStateDomain;
        MetaDescriptionTag.Content = MetaDescriptionSingleStateDomain;
        MetaKeywordsTag.Content = MetaKeywordsSingleStateDomain;
      }
      else
      {
        TitleTag.Text = TitleTagAllStatesDomain;
        MetaDescriptionTag.Content = MetaDescriptionAllStatesDomain;
        MetaKeywordsTag.Content = MetaKeywordsAllStatesDomain;
      }

      TitleTag.Text = string.Format(TitleTag.Text, _StateCode);
      MetaDescriptionTag.Content = string.Format(MetaDescriptionTag.Content,
        _StateCode);
      MetaKeywordsTag.Content = string.Format(MetaKeywordsTag.Content, _StateCode);
      if (string.IsNullOrEmpty(UrlManager.CurrentQuerySiteId)) return;
      ForVotersLink.HRef = UrlManager.GetForVotersPageUri(_StateCode)
        .ToString();
    }

    private string GetReportTitle()
    {
      switch (_ElectoralClass)
      {
        case ElectoralClass.USPresident:
          return "Current US President and Vice President";
        case ElectoralClass.USSenate:
          return "Current US Senators";
        case ElectoralClass.USHouse:
          return "Current US House Members";
        case ElectoralClass.USGovernors:
          return "Current State Governors and Lieutenant Governors";
        case ElectoralClass.State:
          return string.Format("Current {0} Elected Representatives",
            StateCache.GetStateName(_StateCode));
        case ElectoralClass.County:
          return "Current County Representatives";
        case ElectoralClass.Local:
          return "Current Local District Representatives";
        default:
          return string.Empty;
      }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
      // The OnPreInit method of the parent class handles serving from cache, 
      // in which case this method is never called.

      this.IncludeCss("~/css/MainCommon.css");
      this.IncludeCss("~/css/SecondaryCommon.css");
      this.IncludeCss("~/css/All.css");
      this.IncludeCss("~/css/Officials.css");

      if (HasUrlError)
      {
        InnerContent.Controls.Clear();
        var p = new HtmlGenericControl("p").AddTo(InnerContent, "not-found-error");
        new LiteralControl("We could not show the information you requested: " +
          UrlError).AddTo(p);
        return;
      }

      _StateCode = QueryReport;
      if (string.IsNullOrWhiteSpace(_StateCode))
        _StateCode = QueryState;
      if (StateCache.IsValidStateCode(_StateCode))
      {
        _CountyCode = QueryCounty;
        _LocalCode = QueryLocal;
      }
      else
      {
        _CountyCode = string.Empty;
        _LocalCode = string.Empty;
      }

      _ElectoralClass = Offices.GetElectoralClass(_StateCode, _CountyCode,
        _LocalCode);
      _ElectoralClassDescription = Offices.GetElectoralClassDescription(
        _StateCode, _CountyCode, _LocalCode);

      PopulateMetaTags();
      PageHeading.MainHeadingText = GetReportTitle();
      ReportInstructionsLabel.Text = FillInInstructions();
      OfficialsReport.GetReport(Report.SignedInReportUser, _StateCode, _CountyCode,
        _LocalCode)
        .AddTo(ReportPlaceHolder);
    }
  }
}