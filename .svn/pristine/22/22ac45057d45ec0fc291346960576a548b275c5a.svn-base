using System;
using System.Net.Mail;
using System.Web.UI;

namespace Vote.Controls
{
  public partial class EmailFormResponsive : UserControl
  {
    private bool? _IsHuman;
    private string[] _Texts;
    public string ToEmailAddress { get; set; }
    //private const bool EnableDebugLog = false;

    //private void DebugLog(string message)
    //{
    //  if (EnableDebugLog)
    //  {
    //    DB.Vote.DebugLog.Insert("EmailFormResponsive", message);
    //  }
    //}

    //protected override void OnInit(EventArgs e)
    //{
    //  //DebugLog("enter OnInit");
    //  base.OnInit(e);
    //}

    protected void Page_Load(object sender, EventArgs e)
    {
      //DebugLog("Enter Page_Load");
      Page.IncludeJs("~/js/EmailFormResponsive.js");

      EmailFormErrorLabel.Visible = false;
      EmailFormGoodLabel.Visible = false;

      // setup client-side input processing
      EmailFormCaptcha.UserInputClientID = EmailFormCaptchaCodeTextBox.ClientID;

      if (!IsPostBack)
        AddItems();

// ReSharper disable InvertIf
      if (IsPostBack)
// ReSharper restore InvertIf
      {
        //var subject = Request.Form["ctl00$MasterMainContent$EmailForm$EmailFormSubject"];
        var subject = EmailFormSubject.Value;
        if (subject == "Other")
          subject = EmailFormOtherSubject.Text;
        AddItems();
        // validate the Captcha to check we're not dealing with a bot
        if (IsHuman)
          try
          {
            if (!Validation.IsValidEmailAddress(EmailFormFromEmailAddress.Text))
              throw new VoteException("The email address you entered is not valid");
            if (string.IsNullOrWhiteSpace(subject))
              throw new VoteException(
                "Please select a subject for the email");
            if (string.IsNullOrWhiteSpace(EmailFormMessage.Text))
              throw new VoteException("The email message body is missing");
            var email = new MailMessage
              {
                IsBodyHtml = false,
                From = new MailAddress(EmailFormFromEmailAddress.Text)
              };
            email.To.Add(ToEmailAddress);
            email.Subject = subject;
            email.Body = EmailFormMessage.Text;

 #if !NoEmail
           //var smtpClient = new SmtpClient("localhost");
           // smtpClient.Send(email);
            EmailUtility.GetConfiguredSmtpClient().Send(email);
#endif
            EmailFormGoodLabel.Text = "Email has been sent";
            EmailFormGoodLabel.Visible = true;
          }
          catch (Exception ex)
          {
            EmailFormErrorLabel.Text = ex.Message;
            EmailFormErrorLabel.Visible = true;
          }
        else
        {
          EmailFormErrorLabel.Text = "The typed characters did not match the picture";
          EmailFormErrorLabel.Visible = true;
        }
        EmailFormCaptchaCodeTextBox.Text = null; // clear previous user input
      }
    }

    private void AddItem(string text, string value)
    {
      EmailFormSubject.AddItem(text, value);
    }

    public void SetItems(params string[] texts)
    {
      _Texts = texts;
    }

    private void AddItems()
    {
      EmailFormSubject.Items.Clear();
      AddItem("Select a subject", "");
      if (_Texts != null)
        foreach (var text in _Texts)
          AddItem(text, text);
      AddItem("Other, please specify", "Other");
    }

    private bool IsHuman
    {
      get
      {
        if (_IsHuman == null)
          _IsHuman = EmailFormCaptcha.Validate(EmailFormCaptchaCodeTextBox.Text);
        return _IsHuman.Value;
      }
    }
  }
}