//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteLog
  {
    #region votelog Database

    public static partial class VoteLogDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=votelog";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteLogDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteLog.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVoteLog.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout = -1)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion votelog Database

    #region votelog.Log301Redirect

    public partial class Log301RedirectRow : DataRow
    {
      internal Log301RedirectRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String PageFrom
      {
        get { return this["PageFrom"] as String; }
        set { if (value == null) this["PageFrom"] = DBNull.Value; else this["PageFrom"] = value; }
      }

      public String PageTo
      {
        get { return this["PageTo"] as String; }
        set { if (value == null) this["PageTo"] = DBNull.Value; else this["PageTo"] = value; }
      }
    }

    [Serializable]
    public partial class Log301RedirectTable : TypedTableBase<Log301RedirectRow>
    {
      public Log301RedirectRow this[int index] { get { return (Log301RedirectRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Log301RedirectRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Log301RedirectTable(); }

      new public Log301RedirectRow NewRow() { return (Log301RedirectRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Log301RedirectRow(rb); }

      protected override Type GetRowType()
      { return typeof(Log301RedirectRow); }

      public void RemoveRow(Log301RedirectRow row) { this.Rows.Remove(row); }

      public Log301RedirectRow NewRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow(primaryKey, dateStamp, pageFrom, pageTo);
        AddRow(row);
      }

      public Log301RedirectRow NewRow(DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow();
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String pageFrom, String pageTo)
      {
        Log301RedirectRow row = NewRow(dateStamp, pageFrom, pageTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageFromColumn { get { return this.Columns["PageFrom"]; } }

      public DataColumn PageToColumn { get { return this.Columns["PageTo"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Log301RedirectTable() : this(ColumnSet.All) { }

      public Log301RedirectTable(ColumnSet columnSet)
      {
        this.TableName = "Log301Redirect";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Log301RedirectTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Log301Redirect
    {
      public const string TableName = "Log301Redirect";

      public enum Column { PrimaryKey, DateStamp, PageFrom, PageTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.PageFrom, "PageFrom" },
        { Column.PageTo, "PageTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log301Redirect (PrimaryKey,DateStamp,PageFrom,PageTo) VALUES (@PrimaryKey,@DateStamp,@PageFrom,@PageTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String pageFrom, String pageTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log301Redirect (DateStamp,PageFrom,PageTo) VALUES (@DateStamp,@PageFrom,@PageTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect";
        }
      }

      public static Log301RedirectTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Log301RedirectTable.ColumnSet.All);
      }

      public static Log301RedirectTable FillTable(DbCommand command)
      {
        return FillTable(command, Log301RedirectTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Log301RedirectTable FillTable(DbCommand command, Log301RedirectTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          Log301RedirectTable table = new Log301RedirectTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Log301RedirectTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Log301RedirectTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Log301RedirectTable table, Log301RedirectTable.ColumnSet columnSet = Log301RedirectTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageFromColumnName { get { return "PageFrom"; } }

      public static string PageToColumnName { get { return "PageTo"; } }

      public static int PageFromMaxLength { get { return int.MaxValue; } }

      public static int PageToMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageFrom FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageTo FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Log301RedirectTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, Log301RedirectTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PageFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET PageTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log301Redirect SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Log301Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Log301RedirectTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Log301RedirectTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Log301Redirect()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.Log301Redirect

    #region votelog.Log302Redirect

    public partial class Log302RedirectRow : DataRow
    {
      internal Log302RedirectRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String PageFrom
      {
        get { return this["PageFrom"] as String; }
        set { if (value == null) this["PageFrom"] = DBNull.Value; else this["PageFrom"] = value; }
      }

      public String PageTo
      {
        get { return this["PageTo"] as String; }
        set { if (value == null) this["PageTo"] = DBNull.Value; else this["PageTo"] = value; }
      }

      public String StackTrace
      {
        get { return this["StackTrace"] as String; }
        set { if (value == null) this["StackTrace"] = DBNull.Value; else this["StackTrace"] = value; }
      }
    }

    [Serializable]
    public partial class Log302RedirectTable : TypedTableBase<Log302RedirectRow>
    {
      public Log302RedirectRow this[int index] { get { return (Log302RedirectRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Log302RedirectRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Log302RedirectTable(); }

      new public Log302RedirectRow NewRow() { return (Log302RedirectRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Log302RedirectRow(rb); }

      protected override Type GetRowType()
      { return typeof(Log302RedirectRow); }

      public void RemoveRow(Log302RedirectRow row) { this.Rows.Remove(row); }

      public Log302RedirectRow NewRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo, String stackTrace)
      {
        Log302RedirectRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo, String stackTrace)
      {
        Log302RedirectRow row = NewRow(primaryKey, dateStamp, pageFrom, pageTo, stackTrace);
        AddRow(row);
      }

      public Log302RedirectRow NewRow(DateTime dateStamp, String pageFrom, String pageTo, String stackTrace)
      {
        Log302RedirectRow row = NewRow();
        row.DateStamp = dateStamp;
        row.PageFrom = pageFrom;
        row.PageTo = pageTo;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(DateTime dateStamp, String pageFrom, String pageTo, String stackTrace)
      {
        Log302RedirectRow row = NewRow(dateStamp, pageFrom, pageTo, stackTrace);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageFromColumn { get { return this.Columns["PageFrom"]; } }

      public DataColumn PageToColumn { get { return this.Columns["PageTo"]; } }

      public DataColumn StackTraceColumn { get { return this.Columns["StackTrace"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PageTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StackTrace", typeof(String));
        _column.MaxLength = 4000;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Log302RedirectTable() : this(ColumnSet.All) { }

      public Log302RedirectTable(ColumnSet columnSet)
      {
        this.TableName = "Log302Redirect";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Log302RedirectTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Log302Redirect
    {
      public const string TableName = "Log302Redirect";

      public enum Column { PrimaryKey, DateStamp, PageFrom, PageTo, StackTrace }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.PageFrom, "PageFrom" },
        { Column.PageTo, "PageTo" },
        { Column.StackTrace, "StackTrace" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log302Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Log302Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String pageFrom, String pageTo, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log302Redirect (PrimaryKey,DateStamp,PageFrom,PageTo,StackTrace) VALUES (@PrimaryKey,@DateStamp,@PageFrom,@PageTo,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String pageFrom, String pageTo, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log302Redirect (DateStamp,PageFrom,PageTo,StackTrace) VALUES (@DateStamp,@PageFrom,@PageTo,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PageFrom", pageFrom);
        VoteLogDb.AddCommandParameter(cmd, "PageTo", pageTo);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,PageFrom,PageTo,StackTrace FROM Log302Redirect";
        }
      }

      public static Log302RedirectTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo,StackTrace FROM Log302Redirect";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Log302RedirectTable.ColumnSet.All);
      }

      public static Log302RedirectTable FillTable(DbCommand command)
      {
        return FillTable(command, Log302RedirectTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Log302RedirectTable FillTable(DbCommand command, Log302RedirectTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          Log302RedirectTable table = new Log302RedirectTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Log302RedirectTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Log302RedirectTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Log302RedirectTable table, Log302RedirectTable.ColumnSet columnSet = Log302RedirectTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageFromColumnName { get { return "PageFrom"; } }

      public static string PageToColumnName { get { return "PageTo"; } }

      public static string StackTraceColumnName { get { return "StackTrace"; } }

      public static int PageFromMaxLength { get { return int.MaxValue; } }

      public static int PageToMaxLength { get { return int.MaxValue; } }

      public static int StackTraceMaxLength { get { return 4000; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageFrom FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PageTo FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStackTraceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StackTrace FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Log302RedirectTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,PageFrom,PageTo,StackTrace FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, Log302RedirectTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET PageFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET PageTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET StackTrace=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log302Redirect SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Log302Redirect WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Log302RedirectTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Log302RedirectTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Log302Redirect()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.Log302Redirect

    #region votelog.Log404PageNotFound

    public partial class Log404PageNotFoundRow : DataRow
    {
      internal Log404PageNotFoundRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class Log404PageNotFoundTable : TypedTableBase<Log404PageNotFoundRow>
    {
      public Log404PageNotFoundRow this[int index] { get { return (Log404PageNotFoundRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(Log404PageNotFoundRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new Log404PageNotFoundTable(); }

      new public Log404PageNotFoundRow NewRow() { return (Log404PageNotFoundRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new Log404PageNotFoundRow(rb); }

      protected override Type GetRowType()
      { return typeof(Log404PageNotFoundRow); }

      public void RemoveRow(Log404PageNotFoundRow row) { this.Rows.Remove(row); }

      public Log404PageNotFoundRow NewRow(Int32 primaryKey, DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow(primaryKey, dateStamp, page, message);
        AddRow(row);
      }

      public Log404PageNotFoundRow NewRow(DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime dateStamp, String page, String message)
      {
        Log404PageNotFoundRow row = NewRow(dateStamp, page, message);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public Log404PageNotFoundTable() : this(ColumnSet.All) { }

      public Log404PageNotFoundTable(ColumnSet columnSet)
      {
        this.TableName = "Log404PageNotFound";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected Log404PageNotFoundTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class Log404PageNotFound
    {
      public const string TableName = "Log404PageNotFound";

      public enum Column { PrimaryKey, DateStamp, Page, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Page, "Page" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String page, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log404PageNotFound (PrimaryKey,DateStamp,Page,Message) VALUES (@PrimaryKey,@DateStamp,@Page,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String page, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO Log404PageNotFound (DateStamp,Page,Message) VALUES (@DateStamp,@Page,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound";
        }
      }

      public static Log404PageNotFoundTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, Log404PageNotFoundTable.ColumnSet.All);
      }

      public static Log404PageNotFoundTable FillTable(DbCommand command)
      {
        return FillTable(command, Log404PageNotFoundTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static Log404PageNotFoundTable FillTable(DbCommand command, Log404PageNotFoundTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          Log404PageNotFoundTable table = new Log404PageNotFoundTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(Log404PageNotFoundTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, Log404PageNotFoundTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(Log404PageNotFoundTable table, Log404PageNotFoundTable.ColumnSet columnSet = Log404PageNotFoundTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static Log404PageNotFoundTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, Log404PageNotFoundTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE Log404PageNotFound SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM Log404PageNotFound WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(Log404PageNotFoundTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case Log404PageNotFoundTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static Log404PageNotFound()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.Log404PageNotFound

    #region votelog.LogAddressesBad

    public partial class LogAddressesBadRow : DataRow
    {
      internal LogAddressesBadRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String AddressType
      {
        get { return this["AddressType"] as String; }
        set { if (value == null) this["AddressType"] = DBNull.Value; else this["AddressType"] = value; }
      }

      public String Address1
      {
        get { return this["Addr1"] as String; }
        set { if (value == null) this["Addr1"] = DBNull.Value; else this["Addr1"] = value; }
      }

      public String Address2
      {
        get { return this["Addr2"] as String; }
        set { if (value == null) this["Addr2"] = DBNull.Value; else this["Addr2"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }
    }

    [Serializable]
    public partial class LogAddressesBadTable : TypedTableBase<LogAddressesBadRow>
    {
      public LogAddressesBadRow this[int index] { get { return (LogAddressesBadRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAddressesBadRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAddressesBadTable(); }

      new public LogAddressesBadRow NewRow() { return (LogAddressesBadRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAddressesBadRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAddressesBadRow); }

      public void RemoveRow(LogAddressesBadRow row) { this.Rows.Remove(row); }

      public LogAddressesBadRow NewRow(Int32 primaryKey, DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode)
      {
        LogAddressesBadRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.AddressType = addressType;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.State = state;
        row.StateCode = stateCode;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode)
      {
        LogAddressesBadRow row = NewRow(primaryKey, dateStamp, addressType, address1, address2, city, state, stateCode);
        AddRow(row);
      }

      public LogAddressesBadRow NewRow(DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode)
      {
        LogAddressesBadRow row = NewRow();
        row.DateStamp = dateStamp;
        row.AddressType = addressType;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.State = state;
        row.StateCode = stateCode;
        return row;
      }

      public void AddRow(DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode)
      {
        LogAddressesBadRow row = NewRow(dateStamp, addressType, address1, address2, city, state, stateCode);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn AddressTypeColumn { get { return this.Columns["AddressType"]; } }

      public DataColumn Address1Column { get { return this.Columns["Addr1"]; } }

      public DataColumn Address2Column { get { return this.Columns["Addr2"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressType", typeof(String));
        _column.MaxLength = 16;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Addr1", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Addr2", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogAddressesBadTable() : this(ColumnSet.All) { }

      public LogAddressesBadTable(ColumnSet columnSet)
      {
        this.TableName = "LogAddressesBad";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogAddressesBadTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAddressesBad
    {
      public const string TableName = "LogAddressesBad";

      public enum Column { PrimaryKey, DateStamp, AddressType, Address1, Address2, City, State, StateCode }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.AddressType, "AddressType" },
        { Column.Address1, "Addr1" },
        { Column.Address2, "Addr2" },
        { Column.City, "City" },
        { Column.State, "State" },
        { Column.StateCode, "StateCode" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesBad";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesBad (PrimaryKey,DateStamp,AddressType,Addr1,Addr2,City,State,StateCode) VALUES (@PrimaryKey,@DateStamp,@AddressType,@Address1,@Address2,@City,@State,@StateCode)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddressType", addressType);
        VoteLogDb.AddCommandParameter(cmd, "Address1", address1);
        VoteLogDb.AddCommandParameter(cmd, "Address2", address2);
        VoteLogDb.AddCommandParameter(cmd, "City", city);
        VoteLogDb.AddCommandParameter(cmd, "State", state);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String addressType, String address1, String address2, String city, String state, String stateCode, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesBad (DateStamp,AddressType,Addr1,Addr2,City,State,StateCode) VALUES (@DateStamp,@AddressType,@Address1,@Address2,@City,@State,@StateCode)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddressType", addressType);
        VoteLogDb.AddCommandParameter(cmd, "Address1", address1);
        VoteLogDb.AddCommandParameter(cmd, "Address2", address2);
        VoteLogDb.AddCommandParameter(cmd, "City", city);
        VoteLogDb.AddCommandParameter(cmd, "State", state);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,AddressType,Addr1,Addr2,City,State,StateCode FROM LogAddressesBad";
        }
      }

      public static LogAddressesBadTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddressType,Addr1,Addr2,City,State,StateCode FROM LogAddressesBad";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAddressesBadTable.ColumnSet.All);
      }

      public static LogAddressesBadReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        return new LogAddressesBadReader(cmd.ExecuteReader(), cn);
      }

      public static LogAddressesBadTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAddressesBadTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAddressesBadTable FillTable(DbCommand command, LogAddressesBadTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAddressesBadTable table = new LogAddressesBadTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAddressesBadTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAddressesBadTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAddressesBadTable table, LogAddressesBadTable.ColumnSet columnSet = LogAddressesBadTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string AddressTypeColumnName { get { return "AddressType"; } }

      public static string Address1ColumnName { get { return "Addr1"; } }

      public static string Address2ColumnName { get { return "Addr2"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static int AddressTypeMaxLength { get { return 16; } }

      public static int Address1MaxLength { get { return 400; } }

      public static int Address2MaxLength { get { return 400; } }

      public static int CityMaxLength { get { return 400; } }

      public static int StateMaxLength { get { return 100; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetAddressTypeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressType FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress1ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Addr1 FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress2ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Addr2 FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesBadTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddressType,Addr1,Addr2,City,State,StateCode FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogAddressesBadTable.ColumnSet.All);
      }

      public static LogAddressesBadReader GetDataReaderByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogAddressesBadTable.ColumnSet.All) + " WHERE PrimaryKey=@PrimaryKey";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return new LogAddressesBadReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressTypeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET AddressType=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress1ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET Addr1=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress2ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET Addr2=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET City=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET State=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesBad SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesBad WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogAddressesBadTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAddressesBadTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogAddressesBad()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class LogAddressesBadReader : DataReaderBase
    {
      public LogAddressesBadReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String AddressType
      {
        get { return this["AddressType"] as String; }
      }

      public String Address1
      {
        get { return this["Addr1"] as String; }
      }

      public String Address2
      {
        get { return this["Addr2"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String State
      {
        get { return this["State"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }
    }

    #endregion votelog.LogAddressesBad

    #region votelog.LogAddressesBadNew

    public partial class LogAddressesBadNewRow : DataRow
    {
      internal LogAddressesBadNewRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime? DateStamp
      {
        get { if (this.IsNull("DateStamp")) return null; else return (DateTime) this["DateStamp"]; }
        set { if (value.HasValue) this["DateStamp"] = value.Value; else this["DateStamp"] = DBNull.Value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String RawAddress
      {
        get { return this["RawAddress"] as String; }
        set { if (value == null) this["RawAddress"] = DBNull.Value; else this["RawAddress"] = value; }
      }

      public String ErrorMessage
      {
        get { return this["ErrorMessage"] as String; }
        set { if (value == null) this["ErrorMessage"] = DBNull.Value; else this["ErrorMessage"] = value; }
      }
    }

    [Serializable]
    public partial class LogAddressesBadNewTable : TypedTableBase<LogAddressesBadNewRow>
    {
      public LogAddressesBadNewRow this[int index] { get { return (LogAddressesBadNewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAddressesBadNewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAddressesBadNewTable(); }

      new public LogAddressesBadNewRow NewRow() { return (LogAddressesBadNewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAddressesBadNewRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAddressesBadNewRow); }

      public void RemoveRow(LogAddressesBadNewRow row) { this.Rows.Remove(row); }

      public LogAddressesBadNewRow NewRow(Int32 id, DateTime? dateStamp, String email, String rawAddress, String errorMessage)
      {
        LogAddressesBadNewRow row = NewRow();
        row.Id = id;
        row.DateStamp = dateStamp;
        row.Email = email;
        row.RawAddress = rawAddress;
        row.ErrorMessage = errorMessage;
        return row;
      }

      public void AddRow(Int32 id, DateTime? dateStamp, String email, String rawAddress, String errorMessage)
      {
        LogAddressesBadNewRow row = NewRow(id, dateStamp, email, rawAddress, errorMessage);
        AddRow(row);
      }

      public LogAddressesBadNewRow NewRow(DateTime? dateStamp, String email, String rawAddress, String errorMessage)
      {
        LogAddressesBadNewRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Email = email;
        row.RawAddress = rawAddress;
        row.ErrorMessage = errorMessage;
        return row;
      }

      public void AddRow(DateTime? dateStamp, String email, String rawAddress, String errorMessage)
      {
        LogAddressesBadNewRow row = NewRow(dateStamp, email, rawAddress, errorMessage);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn RawAddressColumn { get { return this.Columns["RawAddress"]; } }

      public DataColumn ErrorMessageColumn { get { return this.Columns["ErrorMessage"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("RawAddress", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("ErrorMessage", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
      }

      public LogAddressesBadNewTable() : this(ColumnSet.All) { }

      public LogAddressesBadNewTable(ColumnSet columnSet)
      {
        this.TableName = "LogAddressesBadNew";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogAddressesBadNewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAddressesBadNew
    {
      public const string TableName = "LogAddressesBadNew";

      public enum Column { Id, DateStamp, Email, RawAddress, ErrorMessage }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateStamp, "DateStamp" },
        { Column.Email, "Email" },
        { Column.RawAddress, "RawAddress" },
        { Column.ErrorMessage, "ErrorMessage" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesBadNew";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime? dateStamp, String email, String rawAddress, String errorMessage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesBadNew (Id,DateStamp,Email,RawAddress,ErrorMessage) VALUES (@Id,@DateStamp,@Email,@RawAddress,@ErrorMessage)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "RawAddress", rawAddress);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime? dateStamp, String email, String rawAddress, String errorMessage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesBadNew (DateStamp,Email,RawAddress,ErrorMessage) VALUES (@DateStamp,@Email,@RawAddress,@ErrorMessage)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "RawAddress", rawAddress);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateStamp,Email,RawAddress,ErrorMessage FROM LogAddressesBadNew";
        }
      }

      public static LogAddressesBadNewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,ErrorMessage FROM LogAddressesBadNew";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAddressesBadNewTable.ColumnSet.All);
      }

      public static LogAddressesBadNewTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAddressesBadNewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAddressesBadNewTable FillTable(DbCommand command, LogAddressesBadNewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAddressesBadNewTable table = new LogAddressesBadNewTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAddressesBadNewTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAddressesBadNewTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAddressesBadNewTable table, LogAddressesBadNewTable.ColumnSet columnSet = LogAddressesBadNewTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string RawAddressColumnName { get { return "RawAddress"; } }

      public static string ErrorMessageColumnName { get { return "ErrorMessage"; } }

      public static int EmailMaxLength { get { return 255; } }

      public static int RawAddressMaxLength { get { return 255; } }

      public static int ErrorMessageMaxLength { get { return 255; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRawAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RawAddress FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetErrorMessageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ErrorMessage FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesBadNew WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesBadNewTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,ErrorMessage FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAddressesBadNewTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime? newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRawAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET RawAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET ErrorMessage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesBadNew SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesBadNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogAddressesBadNewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAddressesBadNewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogAddressesBadNew()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogAddressesBadNew

    #region votelog.LogAddressesGood

    public partial class LogAddressesGoodRow : DataRow
    {
      internal LogAddressesGoodRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String DomainServerName
      {
        get { return this["DomainServerName"] as String; }
        set { if (value == null) this["DomainServerName"] = DBNull.Value; else this["DomainServerName"] = value; }
      }

      public String AddressType
      {
        get { return this["AddressType"] as String; }
        set { if (value == null) this["AddressType"] = DBNull.Value; else this["AddressType"] = value; }
      }

      public String Requested
      {
        get { return this["Requested"] as String; }
        set { if (value == null) this["Requested"] = DBNull.Value; else this["Requested"] = value; }
      }

      public String Address1
      {
        get { return this["Addr1"] as String; }
        set { if (value == null) this["Addr1"] = DBNull.Value; else this["Addr1"] = value; }
      }

      public String Address2
      {
        get { return this["Addr2"] as String; }
        set { if (value == null) this["Addr2"] = DBNull.Value; else this["Addr2"] = value; }
      }

      public String City
      {
        get { return this["City"] as String; }
        set { if (value == null) this["City"] = DBNull.Value; else this["City"] = value; }
      }

      public String State
      {
        get { return this["State"] as String; }
        set { if (value == null) this["State"] = DBNull.Value; else this["State"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
        set { if (value == null) this["Zip5"] = DBNull.Value; else this["Zip5"] = value; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
        set { if (value == null) this["Zip4"] = DBNull.Value; else this["Zip4"] = value; }
      }

      public String CongressCode
      {
        get { return this["CongressCode"] as String; }
        set { if (value == null) this["CongressCode"] = DBNull.Value; else this["CongressCode"] = value; }
      }

      public String StateSenateCode
      {
        get { return this["StateSenateCode"] as String; }
        set { if (value == null) this["StateSenateCode"] = DBNull.Value; else this["StateSenateCode"] = value; }
      }

      public String StateHouseCode
      {
        get { return this["StateHouseCode"] as String; }
        set { if (value == null) this["StateHouseCode"] = DBNull.Value; else this["StateHouseCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String CountyName
      {
        get { return this["CountyName"] as String; }
        set { if (value == null) this["CountyName"] = DBNull.Value; else this["CountyName"] = value; }
      }
    }

    [Serializable]
    public partial class LogAddressesGoodTable : TypedTableBase<LogAddressesGoodRow>
    {
      public LogAddressesGoodRow this[int index] { get { return (LogAddressesGoodRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAddressesGoodRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAddressesGoodTable(); }

      new public LogAddressesGoodRow NewRow() { return (LogAddressesGoodRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAddressesGoodRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAddressesGoodRow); }

      public void RemoveRow(LogAddressesGoodRow row) { this.Rows.Remove(row); }

      public LogAddressesGoodRow NewRow(Int32 primaryKey, DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName)
      {
        LogAddressesGoodRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.DomainServerName = domainServerName;
        row.AddressType = addressType;
        row.Requested = requested;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.State = state;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.CongressCode = congressCode;
        row.StateSenateCode = stateSenateCode;
        row.StateHouseCode = stateHouseCode;
        row.CountyCode = countyCode;
        row.CountyName = countyName;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName)
      {
        LogAddressesGoodRow row = NewRow(primaryKey, dateStamp, domainServerName, addressType, requested, address1, address2, city, state, stateCode, zip5, zip4, congressCode, stateSenateCode, stateHouseCode, countyCode, countyName);
        AddRow(row);
      }

      public LogAddressesGoodRow NewRow(DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName)
      {
        LogAddressesGoodRow row = NewRow();
        row.DateStamp = dateStamp;
        row.DomainServerName = domainServerName;
        row.AddressType = addressType;
        row.Requested = requested;
        row.Address1 = address1;
        row.Address2 = address2;
        row.City = city;
        row.State = state;
        row.StateCode = stateCode;
        row.Zip5 = zip5;
        row.Zip4 = zip4;
        row.CongressCode = congressCode;
        row.StateSenateCode = stateSenateCode;
        row.StateHouseCode = stateHouseCode;
        row.CountyCode = countyCode;
        row.CountyName = countyName;
        return row;
      }

      public void AddRow(DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName)
      {
        LogAddressesGoodRow row = NewRow(dateStamp, domainServerName, addressType, requested, address1, address2, city, state, stateCode, zip5, zip4, congressCode, stateSenateCode, stateHouseCode, countyCode, countyName);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn DomainServerNameColumn { get { return this.Columns["DomainServerName"]; } }

      public DataColumn AddressTypeColumn { get { return this.Columns["AddressType"]; } }

      public DataColumn RequestedColumn { get { return this.Columns["Requested"]; } }

      public DataColumn Address1Column { get { return this.Columns["Addr1"]; } }

      public DataColumn Address2Column { get { return this.Columns["Addr2"]; } }

      public DataColumn CityColumn { get { return this.Columns["City"]; } }

      public DataColumn StateColumn { get { return this.Columns["State"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn Zip5Column { get { return this.Columns["Zip5"]; } }

      public DataColumn Zip4Column { get { return this.Columns["Zip4"]; } }

      public DataColumn CongressCodeColumn { get { return this.Columns["CongressCode"]; } }

      public DataColumn StateSenateCodeColumn { get { return this.Columns["StateSenateCode"]; } }

      public DataColumn StateHouseCodeColumn { get { return this.Columns["StateHouseCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn CountyNameColumn { get { return this.Columns["CountyName"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DomainServerName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddressType", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Requested", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Addr1", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Addr2", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("City", typeof(String));
        _column.MaxLength = 400;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("State", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip5", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Zip4", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressCode", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateCode", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseCode", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogAddressesGoodTable() : this(ColumnSet.All) { }

      public LogAddressesGoodTable(ColumnSet columnSet)
      {
        this.TableName = "LogAddressesGood";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogAddressesGoodTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAddressesGood
    {
      public const string TableName = "LogAddressesGood";

      public enum Column { PrimaryKey, DateStamp, DomainServerName, AddressType, Requested, Address1, Address2, City, State, StateCode, Zip5, Zip4, CongressCode, StateSenateCode, StateHouseCode, CountyCode, CountyName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.DomainServerName, "DomainServerName" },
        { Column.AddressType, "AddressType" },
        { Column.Requested, "Requested" },
        { Column.Address1, "Addr1" },
        { Column.Address2, "Addr2" },
        { Column.City, "City" },
        { Column.State, "State" },
        { Column.StateCode, "StateCode" },
        { Column.Zip5, "Zip5" },
        { Column.Zip4, "Zip4" },
        { Column.CongressCode, "CongressCode" },
        { Column.StateSenateCode, "StateSenateCode" },
        { Column.StateHouseCode, "StateHouseCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.CountyName, "CountyName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGood";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesGood (PrimaryKey,DateStamp,DomainServerName,AddressType,Requested,Addr1,Addr2,City,State,StateCode,Zip5,Zip4,CongressCode,StateSenateCode,StateHouseCode,CountyCode,CountyName) VALUES (@PrimaryKey,@DateStamp,@DomainServerName,@AddressType,@Requested,@Address1,@Address2,@City,@State,@StateCode,@Zip5,@Zip4,@CongressCode,@StateSenateCode,@StateHouseCode,@CountyCode,@CountyName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        VoteLogDb.AddCommandParameter(cmd, "AddressType", addressType);
        VoteLogDb.AddCommandParameter(cmd, "Requested", requested);
        VoteLogDb.AddCommandParameter(cmd, "Address1", address1);
        VoteLogDb.AddCommandParameter(cmd, "Address2", address2);
        VoteLogDb.AddCommandParameter(cmd, "City", city);
        VoteLogDb.AddCommandParameter(cmd, "State", state);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteLogDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteLogDb.AddCommandParameter(cmd, "CongressCode", congressCode);
        VoteLogDb.AddCommandParameter(cmd, "StateSenateCode", stateSenateCode);
        VoteLogDb.AddCommandParameter(cmd, "StateHouseCode", stateHouseCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyName", countyName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String domainServerName, String addressType, String requested, String address1, String address2, String city, String state, String stateCode, String zip5, String zip4, String congressCode, String stateSenateCode, String stateHouseCode, String countyCode, String countyName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesGood (DateStamp,DomainServerName,AddressType,Requested,Addr1,Addr2,City,State,StateCode,Zip5,Zip4,CongressCode,StateSenateCode,StateHouseCode,CountyCode,CountyName) VALUES (@DateStamp,@DomainServerName,@AddressType,@Requested,@Address1,@Address2,@City,@State,@StateCode,@Zip5,@Zip4,@CongressCode,@StateSenateCode,@StateHouseCode,@CountyCode,@CountyName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "DomainServerName", domainServerName);
        VoteLogDb.AddCommandParameter(cmd, "AddressType", addressType);
        VoteLogDb.AddCommandParameter(cmd, "Requested", requested);
        VoteLogDb.AddCommandParameter(cmd, "Address1", address1);
        VoteLogDb.AddCommandParameter(cmd, "Address2", address2);
        VoteLogDb.AddCommandParameter(cmd, "City", city);
        VoteLogDb.AddCommandParameter(cmd, "State", state);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "Zip5", zip5);
        VoteLogDb.AddCommandParameter(cmd, "Zip4", zip4);
        VoteLogDb.AddCommandParameter(cmd, "CongressCode", congressCode);
        VoteLogDb.AddCommandParameter(cmd, "StateSenateCode", stateSenateCode);
        VoteLogDb.AddCommandParameter(cmd, "StateHouseCode", stateHouseCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyName", countyName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,DomainServerName,AddressType,Requested,Addr1,Addr2,City,State,StateCode,Zip5,Zip4,CongressCode,StateSenateCode,StateHouseCode,CountyCode,CountyName FROM LogAddressesGood";
        }
      }

      public static LogAddressesGoodTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,DomainServerName,AddressType,Requested,Addr1,Addr2,City,State,StateCode,Zip5,Zip4,CongressCode,StateSenateCode,StateHouseCode,CountyCode,CountyName FROM LogAddressesGood";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAddressesGoodTable.ColumnSet.All);
      }

      public static LogAddressesGoodReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        return new LogAddressesGoodReader(cmd.ExecuteReader(), cn);
      }

      public static LogAddressesGoodTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAddressesGoodTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAddressesGoodTable FillTable(DbCommand command, LogAddressesGoodTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAddressesGoodTable table = new LogAddressesGoodTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAddressesGoodTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAddressesGoodTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAddressesGoodTable table, LogAddressesGoodTable.ColumnSet columnSet = LogAddressesGoodTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string DomainServerNameColumnName { get { return "DomainServerName"; } }

      public static string AddressTypeColumnName { get { return "AddressType"; } }

      public static string RequestedColumnName { get { return "Requested"; } }

      public static string Address1ColumnName { get { return "Addr1"; } }

      public static string Address2ColumnName { get { return "Addr2"; } }

      public static string CityColumnName { get { return "City"; } }

      public static string StateColumnName { get { return "State"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string Zip5ColumnName { get { return "Zip5"; } }

      public static string Zip4ColumnName { get { return "Zip4"; } }

      public static string CongressCodeColumnName { get { return "CongressCode"; } }

      public static string StateSenateCodeColumnName { get { return "StateSenateCode"; } }

      public static string StateHouseCodeColumnName { get { return "StateHouseCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string CountyNameColumnName { get { return "CountyName"; } }

      public static int DomainServerNameMaxLength { get { return 200; } }

      public static int AddressTypeMaxLength { get { return 50; } }

      public static int RequestedMaxLength { get { return 50; } }

      public static int Address1MaxLength { get { return 400; } }

      public static int Address2MaxLength { get { return 400; } }

      public static int CityMaxLength { get { return 400; } }

      public static int StateMaxLength { get { return 100; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int Zip5MaxLength { get { return 5; } }

      public static int Zip4MaxLength { get { return 4; } }

      public static int CongressCodeMaxLength { get { return 4; } }

      public static int StateSenateCodeMaxLength { get { return 4; } }

      public static int StateHouseCodeMaxLength { get { return 4; } }

      public static int CountyCodeMaxLength { get { return 50; } }

      public static int CountyNameMaxLength { get { return 100; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetDomainServerNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DomainServerName FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddressTypeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddressType FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRequestedByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Requested FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress1ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Addr1 FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAddress2ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Addr2 FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT City FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT State FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip5ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip5 FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetZip4ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Zip4 FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressCode FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateCode FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseCode FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyName FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesGoodTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,DomainServerName,AddressType,Requested,Addr1,Addr2,City,State,StateCode,Zip5,Zip4,CongressCode,StateSenateCode,StateHouseCode,CountyCode,CountyName FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogAddressesGoodTable.ColumnSet.All);
      }

      public static LogAddressesGoodReader GetDataReaderByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogAddressesGoodTable.ColumnSet.All) + " WHERE PrimaryKey=@PrimaryKey";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return new LogAddressesGoodReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDomainServerNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET DomainServerName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddressTypeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET AddressType=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRequestedByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET Requested=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress1ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET Addr1=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddress2ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET Addr2=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET City=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET State=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip5ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET Zip5=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateZip4ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET Zip4=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET CongressCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET StateSenateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET StateHouseCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET CountyName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogAddressesGood SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesGood WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogAddressesGoodTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAddressesGoodTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogAddressesGood()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class LogAddressesGoodReader : DataReaderBase
    {
      public LogAddressesGoodReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String DomainServerName
      {
        get { return this["DomainServerName"] as String; }
      }

      public String AddressType
      {
        get { return this["AddressType"] as String; }
      }

      public String Requested
      {
        get { return this["Requested"] as String; }
      }

      public String Address1
      {
        get { return this["Addr1"] as String; }
      }

      public String Address2
      {
        get { return this["Addr2"] as String; }
      }

      public String City
      {
        get { return this["City"] as String; }
      }

      public String State
      {
        get { return this["State"] as String; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String Zip5
      {
        get { return this["Zip5"] as String; }
      }

      public String Zip4
      {
        get { return this["Zip4"] as String; }
      }

      public String CongressCode
      {
        get { return this["CongressCode"] as String; }
      }

      public String StateSenateCode
      {
        get { return this["StateSenateCode"] as String; }
      }

      public String StateHouseCode
      {
        get { return this["StateHouseCode"] as String; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
      }

      public String CountyName
      {
        get { return this["CountyName"] as String; }
      }
    }

    #endregion votelog.LogAddressesGood

    #region votelog.LogAddressesGoodNew

    public partial class LogAddressesGoodNewRow : DataRow
    {
      internal LogAddressesGoodNewRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public String RawAddress
      {
        get { return this["RawAddress"] as String; }
        set { if (value == null) this["RawAddress"] = DBNull.Value; else this["RawAddress"] = value; }
      }

      public String SelectedStateCode
      {
        get { return this["SelectedStateCode"] as String; }
        set { if (value == null) this["SelectedStateCode"] = DBNull.Value; else this["SelectedStateCode"] = value; }
      }

      public String ParsedAddress
      {
        get { return this["ParsedAddress"] as String; }
        set { if (value == null) this["ParsedAddress"] = DBNull.Value; else this["ParsedAddress"] = value; }
      }

      public String ParsedCity
      {
        get { return this["ParsedCity"] as String; }
        set { if (value == null) this["ParsedCity"] = DBNull.Value; else this["ParsedCity"] = value; }
      }

      public String ParsedStateCode
      {
        get { return this["ParsedStateCode"] as String; }
        set { if (value == null) this["ParsedStateCode"] = DBNull.Value; else this["ParsedStateCode"] = value; }
      }

      public String ParsedZip5
      {
        get { return this["ParsedZip5"] as String; }
        set { if (value == null) this["ParsedZip5"] = DBNull.Value; else this["ParsedZip5"] = value; }
      }

      public String ParsedZip4
      {
        get { return this["ParsedZip4"] as String; }
        set { if (value == null) this["ParsedZip4"] = DBNull.Value; else this["ParsedZip4"] = value; }
      }

      public Boolean IsDuplicate
      {
        get { return (Boolean) this["IsDuplicate"]; }
        set { this["IsDuplicate"] = value; }
      }

      public Boolean TransferredToAddresses
      {
        get { return (Boolean) this["TransferredToAddresses"]; }
        set { this["TransferredToAddresses"] = value; }
      }
    }

    [Serializable]
    public partial class LogAddressesGoodNewTable : TypedTableBase<LogAddressesGoodNewRow>
    {
      public LogAddressesGoodNewRow this[int index] { get { return (LogAddressesGoodNewRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAddressesGoodNewRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAddressesGoodNewTable(); }

      new public LogAddressesGoodNewRow NewRow() { return (LogAddressesGoodNewRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAddressesGoodNewRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAddressesGoodNewRow); }

      public void RemoveRow(LogAddressesGoodNewRow row) { this.Rows.Remove(row); }

      public LogAddressesGoodNewRow NewRow(Int32 id, DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses)
      {
        LogAddressesGoodNewRow row = NewRow();
        row.Id = id;
        row.DateStamp = dateStamp;
        row.Email = email;
        row.RawAddress = rawAddress;
        row.SelectedStateCode = selectedStateCode;
        row.ParsedAddress = parsedAddress;
        row.ParsedCity = parsedCity;
        row.ParsedStateCode = parsedStateCode;
        row.ParsedZip5 = parsedZip5;
        row.ParsedZip4 = parsedZip4;
        row.IsDuplicate = isDuplicate;
        row.TransferredToAddresses = transferredToAddresses;
        return row;
      }

      public void AddRow(Int32 id, DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses)
      {
        LogAddressesGoodNewRow row = NewRow(id, dateStamp, email, rawAddress, selectedStateCode, parsedAddress, parsedCity, parsedStateCode, parsedZip5, parsedZip4, isDuplicate, transferredToAddresses);
        AddRow(row);
      }

      public LogAddressesGoodNewRow NewRow(DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses)
      {
        LogAddressesGoodNewRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Email = email;
        row.RawAddress = rawAddress;
        row.SelectedStateCode = selectedStateCode;
        row.ParsedAddress = parsedAddress;
        row.ParsedCity = parsedCity;
        row.ParsedStateCode = parsedStateCode;
        row.ParsedZip5 = parsedZip5;
        row.ParsedZip4 = parsedZip4;
        row.IsDuplicate = isDuplicate;
        row.TransferredToAddresses = transferredToAddresses;
        return row;
      }

      public void AddRow(DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses)
      {
        LogAddressesGoodNewRow row = NewRow(dateStamp, email, rawAddress, selectedStateCode, parsedAddress, parsedCity, parsedStateCode, parsedZip5, parsedZip4, isDuplicate, transferredToAddresses);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn RawAddressColumn { get { return this.Columns["RawAddress"]; } }

      public DataColumn SelectedStateCodeColumn { get { return this.Columns["SelectedStateCode"]; } }

      public DataColumn ParsedAddressColumn { get { return this.Columns["ParsedAddress"]; } }

      public DataColumn ParsedCityColumn { get { return this.Columns["ParsedCity"]; } }

      public DataColumn ParsedStateCodeColumn { get { return this.Columns["ParsedStateCode"]; } }

      public DataColumn ParsedZip5Column { get { return this.Columns["ParsedZip5"]; } }

      public DataColumn ParsedZip4Column { get { return this.Columns["ParsedZip4"]; } }

      public DataColumn IsDuplicateColumn { get { return this.Columns["IsDuplicate"]; } }

      public DataColumn TransferredToAddressesColumn { get { return this.Columns["TransferredToAddresses"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("RawAddress", typeof(String));
        _column.MaxLength = 255;
        base.Columns.Add(_column);
        _column = new DataColumn("SelectedStateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("ParsedAddress", typeof(String));
        _column.MaxLength = 80;
        base.Columns.Add(_column);
        _column = new DataColumn("ParsedCity", typeof(String));
        _column.MaxLength = 35;
        base.Columns.Add(_column);
        _column = new DataColumn("ParsedStateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("ParsedZip5", typeof(String));
        _column.MaxLength = 5;
        base.Columns.Add(_column);
        _column = new DataColumn("ParsedZip4", typeof(String));
        _column.MaxLength = 4;
        base.Columns.Add(_column);
        _column = new DataColumn("IsDuplicate", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TransferredToAddresses", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogAddressesGoodNewTable() : this(ColumnSet.All) { }

      public LogAddressesGoodNewTable(ColumnSet columnSet)
      {
        this.TableName = "LogAddressesGoodNew";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogAddressesGoodNewTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAddressesGoodNew
    {
      public const string TableName = "LogAddressesGoodNew";

      public enum Column { Id, DateStamp, Email, RawAddress, SelectedStateCode, ParsedAddress, ParsedCity, ParsedStateCode, ParsedZip5, ParsedZip4, IsDuplicate, TransferredToAddresses }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateStamp, "DateStamp" },
        { Column.Email, "Email" },
        { Column.RawAddress, "RawAddress" },
        { Column.SelectedStateCode, "SelectedStateCode" },
        { Column.ParsedAddress, "ParsedAddress" },
        { Column.ParsedCity, "ParsedCity" },
        { Column.ParsedStateCode, "ParsedStateCode" },
        { Column.ParsedZip5, "ParsedZip5" },
        { Column.ParsedZip4, "ParsedZip4" },
        { Column.IsDuplicate, "IsDuplicate" },
        { Column.TransferredToAddresses, "TransferredToAddresses" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGoodNew";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesGoodNew (Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses) VALUES (@Id,@DateStamp,@Email,@RawAddress,@SelectedStateCode,@ParsedAddress,@ParsedCity,@ParsedStateCode,@ParsedZip5,@ParsedZip4,@IsDuplicate,@TransferredToAddresses)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "RawAddress", rawAddress);
        VoteLogDb.AddCommandParameter(cmd, "SelectedStateCode", selectedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "ParsedAddress", parsedAddress);
        VoteLogDb.AddCommandParameter(cmd, "ParsedCity", parsedCity);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "ParsedZip5", parsedZip5);
        VoteLogDb.AddCommandParameter(cmd, "ParsedZip4", parsedZip4);
        VoteLogDb.AddCommandParameter(cmd, "IsDuplicate", isDuplicate);
        VoteLogDb.AddCommandParameter(cmd, "TransferredToAddresses", transferredToAddresses);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String email, String rawAddress, String selectedStateCode, String parsedAddress, String parsedCity, String parsedStateCode, String parsedZip5, String parsedZip4, Boolean isDuplicate, Boolean transferredToAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAddressesGoodNew (DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses) VALUES (@DateStamp,@Email,@RawAddress,@SelectedStateCode,@ParsedAddress,@ParsedCity,@ParsedStateCode,@ParsedZip5,@ParsedZip4,@IsDuplicate,@TransferredToAddresses)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "RawAddress", rawAddress);
        VoteLogDb.AddCommandParameter(cmd, "SelectedStateCode", selectedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "ParsedAddress", parsedAddress);
        VoteLogDb.AddCommandParameter(cmd, "ParsedCity", parsedCity);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "ParsedZip5", parsedZip5);
        VoteLogDb.AddCommandParameter(cmd, "ParsedZip4", parsedZip4);
        VoteLogDb.AddCommandParameter(cmd, "IsDuplicate", isDuplicate);
        VoteLogDb.AddCommandParameter(cmd, "TransferredToAddresses", transferredToAddresses);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses FROM LogAddressesGoodNew";
        }
      }

      public static LogAddressesGoodNewTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses FROM LogAddressesGoodNew";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAddressesGoodNewTable.ColumnSet.All);
      }

      public static LogAddressesGoodNewReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        return new LogAddressesGoodNewReader(cmd.ExecuteReader(), cn);
      }

      public static LogAddressesGoodNewTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAddressesGoodNewTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAddressesGoodNewTable FillTable(DbCommand command, LogAddressesGoodNewTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAddressesGoodNewTable table = new LogAddressesGoodNewTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAddressesGoodNewTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAddressesGoodNewTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAddressesGoodNewTable table, LogAddressesGoodNewTable.ColumnSet columnSet = LogAddressesGoodNewTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string EmailColumnName { get { return "Email"; } }

      public static string RawAddressColumnName { get { return "RawAddress"; } }

      public static string SelectedStateCodeColumnName { get { return "SelectedStateCode"; } }

      public static string ParsedAddressColumnName { get { return "ParsedAddress"; } }

      public static string ParsedCityColumnName { get { return "ParsedCity"; } }

      public static string ParsedStateCodeColumnName { get { return "ParsedStateCode"; } }

      public static string ParsedZip5ColumnName { get { return "ParsedZip5"; } }

      public static string ParsedZip4ColumnName { get { return "ParsedZip4"; } }

      public static string IsDuplicateColumnName { get { return "IsDuplicate"; } }

      public static string TransferredToAddressesColumnName { get { return "TransferredToAddresses"; } }

      public static int EmailMaxLength { get { return 255; } }

      public static int RawAddressMaxLength { get { return 255; } }

      public static int SelectedStateCodeMaxLength { get { return 2; } }

      public static int ParsedAddressMaxLength { get { return 80; } }

      public static int ParsedCityMaxLength { get { return 35; } }

      public static int ParsedStateCodeMaxLength { get { return 2; } }

      public static int ParsedZip5MaxLength { get { return 5; } }

      public static int ParsedZip4MaxLength { get { return 4; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetRawAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT RawAddress FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSelectedStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SelectedStateCode FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetParsedAddressById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ParsedAddress FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetParsedCityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ParsedCity FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetParsedStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ParsedStateCode FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetParsedZip5ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ParsedZip5 FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetParsedZip4ById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ParsedZip4 FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsDuplicateById(Int32 id)
      {
        return _GetIsDuplicateById(id, null);
      }

      public static Boolean GetIsDuplicateById(Int32 id, Boolean defaultValue)
      {
        return _GetIsDuplicateById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsDuplicateById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsDuplicate FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetTransferredToAddressesById(Int32 id)
      {
        return _GetTransferredToAddressesById(id, null);
      }

      public static Boolean GetTransferredToAddressesById(Int32 id, Boolean defaultValue)
      {
        return _GetTransferredToAddressesById(id, defaultValue).Value;
      }

      private static Boolean? _GetTransferredToAddressesById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT TransferredToAddresses FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesGoodNew WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesGoodNewTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAddressesGoodNewTable.ColumnSet.All);
      }

      public static LogAddressesGoodNewReader GetDataReaderById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogAddressesGoodNewTable.ColumnSet.All) + " WHERE Id=@Id";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return new LogAddressesGoodNewReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Email=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRawAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET RawAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectedStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET SelectedStateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedAddressById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedAddress=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedCityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedCity=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedStateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip5ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip5=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip4ById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip4=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDuplicateById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET IsDuplicate=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransferredToAddressesById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET TransferredToAddresses=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesGoodNew WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByEmail(String email, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGoodNew WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesGoodNew WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesGoodNewTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses FROM LogAddressesGoodNew WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LogAddressesGoodNewTable.ColumnSet.All);
      }

      public static LogAddressesGoodNewReader GetDataReaderByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogAddressesGoodNewTable.ColumnSet.All) + " WHERE Email=@Email";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return new LogAddressesGoodNewReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdByEmail(Int32 newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Id=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByEmail(DateTime newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET DateStamp=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRawAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET RawAddress=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectedStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET SelectedStateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedAddressByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedAddress=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedCityByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedCity=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedStateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip5ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip5=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip4ByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip4=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDuplicateByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET IsDuplicate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransferredToAddressesByEmail(Boolean newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET TransferredToAddresses=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET {0}=@newValue WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesGoodNew WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByParsedStateCode(String parsedStateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAddressesGoodNew WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByParsedStateCode(Column _column, String parsedStateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAddressesGoodNew WHERE ParsedStateCode=@ParsedStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAddressesGoodNewTable GetDataByParsedStateCode(String parsedStateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,Email,RawAddress,SelectedStateCode,ParsedAddress,ParsedCity,ParsedStateCode,ParsedZip5,ParsedZip4,IsDuplicate,TransferredToAddresses FROM LogAddressesGoodNew WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        return FillTable(cmd, LogAddressesGoodNewTable.ColumnSet.All);
      }

      public static LogAddressesGoodNewReader GetDataReaderByParsedStateCode(String parsedStateCode, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogAddressesGoodNewTable.ColumnSet.All) + " WHERE ParsedStateCode=@ParsedStateCode";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        return new LogAddressesGoodNewReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateIdByParsedStateCode(Int32 newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Id=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByParsedStateCode(DateTime newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET DateStamp=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateEmailByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET Email=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateRawAddressByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET RawAddress=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectedStateCodeByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET SelectedStateCode=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedAddressByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedAddress=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedCityByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedCity=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedStateCodeByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedStateCode=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip5ByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip5=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateParsedZip4ByParsedStateCode(String newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET ParsedZip4=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsDuplicateByParsedStateCode(Boolean newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET IsDuplicate=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransferredToAddressesByParsedStateCode(Boolean newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET TransferredToAddresses=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByParsedStateCode(Column _column, object newValue, String parsedStateCode)
      {
        string cmdText = "UPDATE LogAddressesGoodNew SET {0}=@newValue WHERE ParsedStateCode=@ParsedStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByParsedStateCode(String parsedStateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAddressesGoodNew WHERE ParsedStateCode=@ParsedStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ParsedStateCode", parsedStateCode);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogAddressesGoodNewTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAddressesGoodNewTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogAddressesGoodNew()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class LogAddressesGoodNewReader : DataReaderBase
    {
      public LogAddressesGoodNewReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
      }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public String RawAddress
      {
        get { return this["RawAddress"] as String; }
      }

      public String SelectedStateCode
      {
        get { return this["SelectedStateCode"] as String; }
      }

      public String ParsedAddress
      {
        get { return this["ParsedAddress"] as String; }
      }

      public String ParsedCity
      {
        get { return this["ParsedCity"] as String; }
      }

      public String ParsedStateCode
      {
        get { return this["ParsedStateCode"] as String; }
      }

      public String ParsedZip5
      {
        get { return this["ParsedZip5"] as String; }
      }

      public String ParsedZip4
      {
        get { return this["ParsedZip4"] as String; }
      }

      public Boolean IsDuplicate
      {
        get { return (Boolean) this["IsDuplicate"]; }
      }

      public Boolean TransferredToAddresses
      {
        get { return (Boolean) this["TransferredToAddresses"]; }
      }
    }

    #endregion votelog.LogAddressesGoodNew

    #region votelog.LogAdminData

    public partial class LogAdminDataRow : DataRow
    {
      internal LogAdminDataRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogAdminDataTable : TypedTableBase<LogAdminDataRow>
    {
      public LogAdminDataRow this[int index] { get { return (LogAdminDataRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogAdminDataRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogAdminDataTable(); }

      new public LogAdminDataRow NewRow() { return (LogAdminDataRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogAdminDataRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogAdminDataRow); }

      public void RemoveRow(LogAdminDataRow row) { this.Rows.Remove(row); }

      public LogAdminDataRow NewRow(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow();
        row.Id = id;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow(id, dateStamp, userSecurity, userName, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogAdminDataRow NewRow(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo)
      {
        LogAdminDataRow row = NewRow(dateStamp, userSecurity, userName, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogAdminDataTable() : this(ColumnSet.All) { }

      public LogAdminDataTable(ColumnSet columnSet)
      {
        this.TableName = "LogAdminData";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogAdminDataTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogAdminData
    {
      public const string TableName = "LogAdminData";

      public enum Column { Id, DateStamp, UserSecurity, UserName, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAdminData (Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo) VALUES (@Id,@DateStamp,@UserSecurity,@UserName,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogAdminData (DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData";
        }
      }

      public static LogAdminDataTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.All);
      }

      public static LogAdminDataTable FillTable(DbCommand command)
      {
        return FillTable(command, LogAdminDataTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogAdminDataTable FillTable(DbCommand command, LogAdminDataTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogAdminDataTable table = new LogAdminDataTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogAdminDataTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogAdminDataTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogAdminDataTable table, LogAdminDataTable.ColumnSet columnSet = LogAdminDataTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogAdminData WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogAdminDataTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,DateStamp,UserSecurity,UserName,DataItem,DataFrom,DataTo FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET UserSecurity=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataItem=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataFrom=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET DataTo=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogAdminData SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogAdminData";
        }
      }

      public static LogAdminDataTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogAdminData";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogAdminDataTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogAdminDataTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogAdminDataTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogAdminDataTable GetBillingDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogAdminData WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogAdminDataTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogAdminDataTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogAdminDataTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogAdminDataTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogAdminData()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogAdminData

    #region votelog.LogControl

    public partial class LogControlRow : DataRow
    {
      internal LogControlRow(DataRowBuilder rb) : base(rb) {}

      public String PrimaryKey
      {
        get { return this["PrimaryKey"] as String; }
        set { if (value == null) this["PrimaryKey"] = DBNull.Value; else this["PrimaryKey"] = value; }
      }

      public String ReportEmailAddresses
      {
        get { return this["ReportEmailAddresses"] as String; }
        set { if (value == null) this["ReportEmailAddresses"] = DBNull.Value; else this["ReportEmailAddresses"] = value; }
      }
    }

    [Serializable]
    public partial class LogControlTable : TypedTableBase<LogControlRow>
    {
      public LogControlRow this[int index] { get { return (LogControlRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogControlRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogControlTable(); }

      new public LogControlRow NewRow() { return (LogControlRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogControlRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogControlRow); }

      public void RemoveRow(LogControlRow row) { this.Rows.Remove(row); }

      public LogControlRow NewRow(String primaryKey, String reportEmailAddresses)
      {
        LogControlRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.ReportEmailAddresses = reportEmailAddresses;
        return row;
      }

      public void AddRow(String primaryKey, String reportEmailAddresses)
      {
        LogControlRow row = NewRow(primaryKey, reportEmailAddresses);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn ReportEmailAddressesColumn { get { return this.Columns["ReportEmailAddresses"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(String));
        _column.MaxLength = 10;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ReportEmailAddresses", typeof(String));
        _column.MaxLength = 1024;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogControlTable() : this(ColumnSet.All) { }

      public LogControlTable(ColumnSet columnSet)
      {
        this.TableName = "LogControl";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogControlTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogControl
    {
      public const string TableName = "LogControl";

      public enum Column { PrimaryKey, ReportEmailAddresses }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.ReportEmailAddresses, "ReportEmailAddresses" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String primaryKey, String reportEmailAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogControl (PrimaryKey,ReportEmailAddresses) VALUES (@PrimaryKey,@ReportEmailAddresses)";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "ReportEmailAddresses", reportEmailAddresses);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,ReportEmailAddresses FROM LogControl";
        }
      }

      public static LogControlTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,ReportEmailAddresses FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogControlTable.ColumnSet.All);
      }

      public static LogControlTable FillTable(DbCommand command)
      {
        return FillTable(command, LogControlTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogControlTable FillTable(DbCommand command, LogControlTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogControlTable table = new LogControlTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogControlTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogControlTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogControlTable table, LogControlTable.ColumnSet columnSet = LogControlTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string ReportEmailAddressesColumnName { get { return "ReportEmailAddresses"; } }

      public static int PrimaryKeyMaxLength { get { return 10; } }

      public static int ReportEmailAddressesMaxLength { get { return 1024; } }

      public static bool Exists()
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPrimaryKey(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PrimaryKey FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetReportEmailAddresses(String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ReportEmailAddresses FROM LogControl";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumn(Column _column)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogControl";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static int UpdatePrimaryKey(String newValue)
      {
        string cmdText = "UPDATE LogControl SET PrimaryKey=@newValue";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateReportEmailAddresses(String newValue)
      {
        string cmdText = "UPDATE LogControl SET ReportEmailAddresses=@newValue";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue)
      {
        string cmdText = "UPDATE LogControl SET {0}=@newValue";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogControlTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogControlTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogControl()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogControl

    #region votelog.LogDataChange

    public partial class LogDataChangeRow : DataRow
    {
      internal LogDataChangeRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String TableName
      {
        get { return this["TableName"] as String; }
        set { if (value == null) this["TableName"] = DBNull.Value; else this["TableName"] = value; }
      }

      public String ColumnName
      {
        get { return this["ColumnName"] as String; }
        set { if (value == null) this["ColumnName"] = DBNull.Value; else this["ColumnName"] = value; }
      }

      public String KeyValues
      {
        get { return this["KeyValues"] as String; }
        set { if (value == null) this["KeyValues"] = DBNull.Value; else this["KeyValues"] = value; }
      }

      public String OldValue
      {
        get { return this["OldValue"] as String; }
        set { if (value == null) this["OldValue"] = DBNull.Value; else this["OldValue"] = value; }
      }

      public String NewValue
      {
        get { return this["NewValue"] as String; }
        set { if (value == null) this["NewValue"] = DBNull.Value; else this["NewValue"] = value; }
      }

      public String Program
      {
        get { return this["Program"] as String; }
        set { if (value == null) this["Program"] = DBNull.Value; else this["Program"] = value; }
      }

      public Boolean IsBase64
      {
        get { return (Boolean) this["IsBase64"]; }
        set { this["IsBase64"] = value; }
      }

      public String AdditionalInfo
      {
        get { return this["AdditionalInfo"] as String; }
        set { if (value == null) this["AdditionalInfo"] = DBNull.Value; else this["AdditionalInfo"] = value; }
      }
    }

    [Serializable]
    public partial class LogDataChangeTable : TypedTableBase<LogDataChangeRow>
    {
      public LogDataChangeRow this[int index] { get { return (LogDataChangeRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogDataChangeRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogDataChangeTable(); }

      new public LogDataChangeRow NewRow() { return (LogDataChangeRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogDataChangeRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogDataChangeRow); }

      public void RemoveRow(LogDataChangeRow row) { this.Rows.Remove(row); }

      public LogDataChangeRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.Program = program;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, program, isBase64, additionalInfo);
        AddRow(row);
      }

      public LogDataChangeRow NewRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.Program = program;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeRow row = NewRow(dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, program, isBase64, additionalInfo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn TableNameColumn { get { return this.Columns["TableName"]; } }

      public DataColumn ColumnNameColumn { get { return this.Columns["ColumnName"]; } }

      public DataColumn KeyValuesColumn { get { return this.Columns["KeyValues"]; } }

      public DataColumn OldValueColumn { get { return this.Columns["OldValue"]; } }

      public DataColumn NewValueColumn { get { return this.Columns["NewValue"]; } }

      public DataColumn ProgramColumn { get { return this.Columns["Program"]; } }

      public DataColumn IsBase64Column { get { return this.Columns["IsBase64"]; } }

      public DataColumn AdditionalInfoColumn { get { return this.Columns["AdditionalInfo"]; } }

      public enum ColumnSet { All, DateAndUser, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TableName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("KeyValues", typeof(String));
        _column.MaxLength = 4096;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OldValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("NewValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Program", typeof(String));
        _column.MaxLength = 64;
        base.Columns.Add(_column);
        _column = new DataColumn("IsBase64", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdditionalInfo", typeof(String));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDateAndUserColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TableName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogDataChangeTable() : this(ColumnSet.All) { }

      public LogDataChangeTable(ColumnSet columnSet)
      {
        this.TableName = "LogDataChange";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.DateAndUser:
            InitDateAndUserColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogDataChangeTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogDataChange
    {
      public const string TableName = "LogDataChange";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, TableName, ColumnName, KeyValues, OldValue, NewValue, Program, IsBase64, AdditionalInfo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.TableName, "TableName" },
        { Column.ColumnName, "ColumnName" },
        { Column.KeyValues, "KeyValues" },
        { Column.OldValue, "OldValue" },
        { Column.NewValue, "NewValue" },
        { Column.Program, "Program" },
        { Column.IsBase64, "IsBase64" },
        { Column.AdditionalInfo, "AdditionalInfo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChange (PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@Program,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "Program", program);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, String program, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChange (DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo) VALUES (@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@Program,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "Program", program);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static LogDataChangeTable FillTable(DbCommand command)
      {
        return FillTable(command, LogDataChangeTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogDataChangeTable FillTable(DbCommand command, LogDataChangeTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogDataChangeTable table = new LogDataChangeTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogDataChangeTable table, LogDataChangeTable.ColumnSet columnSet = LogDataChangeTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string TableNameColumnName { get { return "TableName"; } }

      public static string ColumnNameColumnName { get { return "ColumnName"; } }

      public static string KeyValuesColumnName { get { return "KeyValues"; } }

      public static string OldValueColumnName { get { return "OldValue"; } }

      public static string NewValueColumnName { get { return "NewValue"; } }

      public static string ProgramColumnName { get { return "Program"; } }

      public static string IsBase64ColumnName { get { return "IsBase64"; } }

      public static string AdditionalInfoColumnName { get { return "AdditionalInfo"; } }

      public static int UserNameMaxLength { get { return 256; } }

      public static int UserSecurityMaxLength { get { return 64; } }

      public static int TableNameMaxLength { get { return 256; } }

      public static int ColumnNameMaxLength { get { return 256; } }

      public static int KeyValuesMaxLength { get { return 4096; } }

      public static int OldValueMaxLength { get { return int.MaxValue; } }

      public static int NewValueMaxLength { get { return int.MaxValue; } }

      public static int ProgramMaxLength { get { return 64; } }

      public static int AdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static int CountByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTableNameColumnNameKeyValuesDateStamp(Column _column, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByTableNameColumnNameKeyValuesDateStamp(Int32 newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByTableNameColumnNameKeyValuesDateStamp(DateTime newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByTableNameColumnNameKeyValuesDateStamp(Boolean newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByTableNameColumnNameKeyValuesDateStamp(String newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableNameColumnNameKeyValuesDateStamp(Column _column, object newValue, String tableName, String columnName, String keyValues, DateTime dateStamp)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableNameColumnNameKeyValuesDateStamp(String tableName, String columnName, String keyValues, DateTime dateStamp, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues AND DateStamp=@DateStamp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTableNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TableName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetColumnNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ColumnName FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetKeyValuesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT KeyValues FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOldValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OldValue FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNewValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NewValue FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetProgramByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Program FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsBase64ByPrimaryKey(Int32 primaryKey)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, null);
      }

      public static Boolean GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean defaultValue)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Boolean? _GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsBase64 FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdditionalInfoByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdditionalInfo FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByPrimaryKey(Boolean newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTableNameColumnNameKeyValues(Column _column, String tableName, String columnName, String keyValues)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByTableNameColumnNameKeyValues(Int32 newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByTableNameColumnNameKeyValues(DateTime newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByTableNameColumnNameKeyValues(Boolean newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableNameColumnNameKeyValues(Column _column, object newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserNameTableName(Column _column, String userName, String tableName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTable GetDataByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,Program,IsBase64,AdditionalInfo FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserNameTableName(Int32 newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET PrimaryKey=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserNameTableName(DateTime newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET DateStamp=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET UserName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET UserSecurity=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET TableName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET ColumnName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET KeyValues=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET OldValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET NewValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProgramByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET Program=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByUserNameTableName(Boolean newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET IsBase64=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET AdditionalInfo=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserNameTableName(Column _column, object newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChange SET {0}=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChange WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectDateAndUserCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllDateAndUserData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.DateAndUser);
      }

      public static void UpdateDateAndUser(LogDataChangeTable table)
      {
        UpdateDateAndUser(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDateAndUser(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.DateAndUser, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName,TableName,ColumnName FROM LogDataChange";
        }
      }

      public static LogDataChangeTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName,TableName,ColumnName FROM LogDataChange";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogDataChangeTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogDataChangeTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogDataChangeTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(LogDataChangeTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogDataChangeTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogDataChangeTable.ColumnSet.DateAndUser:
            return SelectDateAndUserCommandText;

          case LogDataChangeTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogDataChange()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogDataChange

    #region votelog.LogDataChangeTemp

    public partial class LogDataChangeTempRow : DataRow
    {
      internal LogDataChangeTempRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String TableName
      {
        get { return this["TableName"] as String; }
        set { if (value == null) this["TableName"] = DBNull.Value; else this["TableName"] = value; }
      }

      public String ColumnName
      {
        get { return this["ColumnName"] as String; }
        set { if (value == null) this["ColumnName"] = DBNull.Value; else this["ColumnName"] = value; }
      }

      public String KeyValues
      {
        get { return this["KeyValues"] as String; }
        set { if (value == null) this["KeyValues"] = DBNull.Value; else this["KeyValues"] = value; }
      }

      public String OldValue
      {
        get { return this["OldValue"] as String; }
        set { if (value == null) this["OldValue"] = DBNull.Value; else this["OldValue"] = value; }
      }

      public String NewValue
      {
        get { return this["NewValue"] as String; }
        set { if (value == null) this["NewValue"] = DBNull.Value; else this["NewValue"] = value; }
      }

      public Boolean IsBase64
      {
        get { return (Boolean) this["IsBase64"]; }
        set { this["IsBase64"] = value; }
      }

      public String AdditionalInfo
      {
        get { return this["AdditionalInfo"] as String; }
        set { if (value == null) this["AdditionalInfo"] = DBNull.Value; else this["AdditionalInfo"] = value; }
      }
    }

    [Serializable]
    public partial class LogDataChangeTempTable : TypedTableBase<LogDataChangeTempRow>
    {
      public LogDataChangeTempRow this[int index] { get { return (LogDataChangeTempRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogDataChangeTempRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogDataChangeTempTable(); }

      new public LogDataChangeTempRow NewRow() { return (LogDataChangeTempRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogDataChangeTempRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogDataChangeTempRow); }

      public void RemoveRow(LogDataChangeTempRow row) { this.Rows.Remove(row); }

      public LogDataChangeTempRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeTempRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeTempRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, isBase64, additionalInfo);
        AddRow(row);
      }

      public LogDataChangeTempRow NewRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeTempRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.TableName = tableName;
        row.ColumnName = columnName;
        row.KeyValues = keyValues;
        row.OldValue = oldValue;
        row.NewValue = newValue;
        row.IsBase64 = isBase64;
        row.AdditionalInfo = additionalInfo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo)
      {
        LogDataChangeTempRow row = NewRow(dateStamp, userName, userSecurity, tableName, columnName, keyValues, oldValue, newValue, isBase64, additionalInfo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn TableNameColumn { get { return this.Columns["TableName"]; } }

      public DataColumn ColumnNameColumn { get { return this.Columns["ColumnName"]; } }

      public DataColumn KeyValuesColumn { get { return this.Columns["KeyValues"]; } }

      public DataColumn OldValueColumn { get { return this.Columns["OldValue"]; } }

      public DataColumn NewValueColumn { get { return this.Columns["NewValue"]; } }

      public DataColumn IsBase64Column { get { return this.Columns["IsBase64"]; } }

      public DataColumn AdditionalInfoColumn { get { return this.Columns["AdditionalInfo"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("TableName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ColumnName", typeof(String));
        _column.MaxLength = 256;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("KeyValues", typeof(String));
        _column.MaxLength = 4096;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OldValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("NewValue", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("IsBase64", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AdditionalInfo", typeof(String));
        base.Columns.Add(_column);
      }

      public LogDataChangeTempTable() : this(ColumnSet.All) { }

      public LogDataChangeTempTable(ColumnSet columnSet)
      {
        this.TableName = "LogDataChangeTemp";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogDataChangeTempTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogDataChangeTemp
    {
      public const string TableName = "LogDataChangeTemp";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, TableName, ColumnName, KeyValues, OldValue, NewValue, IsBase64, AdditionalInfo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.TableName, "TableName" },
        { Column.ColumnName, "ColumnName" },
        { Column.KeyValues, "KeyValues" },
        { Column.OldValue, "OldValue" },
        { Column.NewValue, "NewValue" },
        { Column.IsBase64, "IsBase64" },
        { Column.AdditionalInfo, "AdditionalInfo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChangeTemp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChangeTemp (PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String tableName, String columnName, String keyValues, String oldValue, String newValue, Boolean isBase64, String additionalInfo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDataChangeTemp (DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo) VALUES (@DateStamp,@UserName,@UserSecurity,@TableName,@ColumnName,@KeyValues,@OldValue,@NewValue,@IsBase64,@AdditionalInfo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "OldValue", oldValue);
        VoteLogDb.AddCommandParameter(cmd, "NewValue", newValue);
        VoteLogDb.AddCommandParameter(cmd, "IsBase64", isBase64);
        VoteLogDb.AddCommandParameter(cmd, "AdditionalInfo", additionalInfo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo FROM LogDataChangeTemp";
        }
      }

      public static LogDataChangeTempTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo FROM LogDataChangeTemp";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDataChangeTempTable.ColumnSet.All);
      }

      public static LogDataChangeTempTable FillTable(DbCommand command)
      {
        return FillTable(command, LogDataChangeTempTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogDataChangeTempTable FillTable(DbCommand command, LogDataChangeTempTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogDataChangeTempTable table = new LogDataChangeTempTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogDataChangeTempTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogDataChangeTempTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogDataChangeTempTable table, LogDataChangeTempTable.ColumnSet columnSet = LogDataChangeTempTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string TableNameColumnName { get { return "TableName"; } }

      public static string ColumnNameColumnName { get { return "ColumnName"; } }

      public static string KeyValuesColumnName { get { return "KeyValues"; } }

      public static string OldValueColumnName { get { return "OldValue"; } }

      public static string NewValueColumnName { get { return "NewValue"; } }

      public static string IsBase64ColumnName { get { return "IsBase64"; } }

      public static string AdditionalInfoColumnName { get { return "AdditionalInfo"; } }

      public static int UserNameMaxLength { get { return 256; } }

      public static int UserSecurityMaxLength { get { return 64; } }

      public static int TableNameMaxLength { get { return 256; } }

      public static int ColumnNameMaxLength { get { return 256; } }

      public static int KeyValuesMaxLength { get { return 4096; } }

      public static int OldValueMaxLength { get { return int.MaxValue; } }

      public static int NewValueMaxLength { get { return int.MaxValue; } }

      public static int AdditionalInfoMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetTableNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT TableName FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetColumnNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ColumnName FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetKeyValuesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT KeyValues FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOldValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OldValue FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNewValueByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT NewValue FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsBase64ByPrimaryKey(Int32 primaryKey)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, null);
      }

      public static Boolean GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean defaultValue)
      {
        return _GetIsBase64ByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Boolean? _GetIsBase64ByPrimaryKey(Int32 primaryKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsBase64 FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetAdditionalInfoByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AdditionalInfo FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTempTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogDataChangeTempTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET TableName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET ColumnName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET KeyValues=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET OldValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET NewValue=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByPrimaryKey(Boolean newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET IsBase64=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET AdditionalInfo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChangeTemp WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChangeTemp WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByTableNameColumnNameKeyValues(Column _column, String tableName, String columnName, String keyValues)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChangeTemp WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTempTable GetDataByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo FROM LogDataChangeTemp WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return FillTable(cmd, LogDataChangeTempTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByTableNameColumnNameKeyValues(Int32 newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET PrimaryKey=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByTableNameColumnNameKeyValues(DateTime newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET DateStamp=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserSecurity=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET TableName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET ColumnName=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET KeyValues=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET OldValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET NewValue=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByTableNameColumnNameKeyValues(Boolean newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET IsBase64=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByTableNameColumnNameKeyValues(String newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET AdditionalInfo=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByTableNameColumnNameKeyValues(Column _column, object newValue, String tableName, String columnName, String keyValues)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET {0}=@newValue WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByTableNameColumnNameKeyValues(String tableName, String columnName, String keyValues, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChangeTemp WHERE TableName=@TableName AND ColumnName=@ColumnName AND KeyValues=@KeyValues";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "ColumnName", columnName);
        VoteLogDb.AddCommandParameter(cmd, "KeyValues", keyValues);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDataChangeTemp WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserNameTableName(Column _column, String userName, String tableName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDataChangeTemp WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDataChangeTempTable GetDataByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,TableName,ColumnName,KeyValues,OldValue,NewValue,IsBase64,AdditionalInfo FROM LogDataChangeTemp WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return FillTable(cmd, LogDataChangeTempTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserNameTableName(Int32 newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET PrimaryKey=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserNameTableName(DateTime newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET DateStamp=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET UserSecurity=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTableNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET TableName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnNameByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET ColumnName=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateKeyValuesByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET KeyValues=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOldValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET OldValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNewValueByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET NewValue=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsBase64ByUserNameTableName(Boolean newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET IsBase64=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAdditionalInfoByUserNameTableName(String newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET AdditionalInfo=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserNameTableName(Column _column, object newValue, String userName, String tableName)
      {
        string cmdText = "UPDATE LogDataChangeTemp SET {0}=@newValue WHERE UserName=@UserName AND TableName=@TableName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserNameTableName(String userName, String tableName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDataChangeTemp WHERE UserName=@UserName AND TableName=@TableName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "TableName", tableName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogDataChangeTempTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogDataChangeTempTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogDataChangeTemp()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogDataChangeTemp

    #region votelog.LogDebug

    public partial class LogDebugRow : DataRow
    {
      internal LogDebugRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Debug
      {
        get { return this["Debug"] as String; }
        set { if (value == null) this["Debug"] = DBNull.Value; else this["Debug"] = value; }
      }
    }

    [Serializable]
    public partial class LogDebugTable : TypedTableBase<LogDebugRow>
    {
      public LogDebugRow this[int index] { get { return (LogDebugRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogDebugRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogDebugTable(); }

      new public LogDebugRow NewRow() { return (LogDebugRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogDebugRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogDebugRow); }

      public void RemoveRow(LogDebugRow row) { this.Rows.Remove(row); }

      public LogDebugRow NewRow(Int32 primaryKey, DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Debug = debug;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow(primaryKey, dateStamp, debug);
        AddRow(row);
      }

      public LogDebugRow NewRow(DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Debug = debug;
        return row;
      }

      public void AddRow(DateTime dateStamp, String debug)
      {
        LogDebugRow row = NewRow(dateStamp, debug);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn DebugColumn { get { return this.Columns["Debug"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Debug", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogDebugTable() : this(ColumnSet.All) { }

      public LogDebugTable(ColumnSet columnSet)
      {
        this.TableName = "LogDebug";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogDebugTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogDebug
    {
      public const string TableName = "LogDebug";

      public enum Column { PrimaryKey, DateStamp, Debug }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Debug, "Debug" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String debug, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDebug (PrimaryKey,DateStamp,Debug) VALUES (@PrimaryKey,@DateStamp,@Debug)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Debug", debug);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String debug, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogDebug (DateStamp,Debug) VALUES (@DateStamp,@Debug)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Debug", debug);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug";
        }
      }

      public static LogDebugTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogDebugTable.ColumnSet.All);
      }

      public static LogDebugTable FillTable(DbCommand command)
      {
        return FillTable(command, LogDebugTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogDebugTable FillTable(DbCommand command, LogDebugTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogDebugTable table = new LogDebugTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogDebugTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogDebugTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogDebugTable table, LogDebugTable.ColumnSet columnSet = LogDebugTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string DebugColumnName { get { return "Debug"; } }

      public static int DebugMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetDebugByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Debug FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogDebugTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Debug FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogDebugTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDebugByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET Debug=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogDebug SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogDebug WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogDebugTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogDebugTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogDebug()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogDebug

    #region votelog.LogElectionOfficeChanges

    public partial class LogElectionOfficeChangesRow : DataRow
    {
      internal LogElectionOfficeChangesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogElectionOfficeChangesTable : TypedTableBase<LogElectionOfficeChangesRow>
    {
      public LogElectionOfficeChangesRow this[int index] { get { return (LogElectionOfficeChangesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogElectionOfficeChangesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogElectionOfficeChangesTable(); }

      new public LogElectionOfficeChangesRow NewRow() { return (LogElectionOfficeChangesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogElectionOfficeChangesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogElectionOfficeChangesRow); }

      public void RemoveRow(LogElectionOfficeChangesRow row) { this.Rows.Remove(row); }

      public LogElectionOfficeChangesRow NewRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogElectionOfficeChangesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogElectionOfficeChangesRow row = NewRow(primaryKey, dateStamp, userSecurity, userName, electionKey, officeKey, stateCode, countyCode, localCode, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogElectionOfficeChangesRow NewRow(DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogElectionOfficeChangesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogElectionOfficeChangesRow row = NewRow(dateStamp, userSecurity, userName, electionKey, officeKey, stateCode, countyCode, localCode, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogElectionOfficeChangesTable() : this(ColumnSet.All) { }

      public LogElectionOfficeChangesTable(ColumnSet columnSet)
      {
        this.TableName = "LogElectionOfficeChanges";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogElectionOfficeChangesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogElectionOfficeChanges
    {
      public const string TableName = "LogElectionOfficeChanges";

      public enum Column { PrimaryKey, DateStamp, UserSecurity, UserName, ElectionKey, OfficeKey, StateCode, CountyCode, LocalCode, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogElectionOfficeChanges (PrimaryKey,DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo) VALUES (@PrimaryKey,@DateStamp,@UserSecurity,@UserName,@ElectionKey,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String electionKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogElectionOfficeChanges (DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@ElectionKey,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogElectionOfficeChanges";
        }
      }

      public static LogElectionOfficeChangesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogElectionOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.All);
      }

      public static LogElectionOfficeChangesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogElectionOfficeChangesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogElectionOfficeChangesTable FillTable(DbCommand command, LogElectionOfficeChangesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogElectionOfficeChangesTable table = new LogElectionOfficeChangesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogElectionOfficeChangesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogElectionOfficeChangesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogElectionOfficeChangesTable table, LogElectionOfficeChangesTable.ColumnSet columnSet = LogElectionOfficeChangesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int ElectionKeyMaxLength { get { return 20; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogElectionOfficeChangesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET ElectionKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataItem=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogElectionOfficeChanges WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogElectionOfficeChangesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,ElectionKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogElectionOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET ElectionKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataItem=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET DataTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionOfficeChanges SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogElectionOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogElectionOfficeChanges";
        }
      }

      public static LogElectionOfficeChangesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogElectionOfficeChangesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogElectionOfficeChangesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogElectionOfficeChangesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogElectionOfficeChangesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.Billing);
      }

      public static LogElectionOfficeChangesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogElectionOfficeChangesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogElectionOfficeChangesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogElectionOfficeChangesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogElectionOfficeChangesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogElectionOfficeChanges()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogElectionOfficeChanges

    #region votelog.LogElectionPoliticianAddsDeletes

    public partial class LogElectionPoliticianAddsDeletesRow : DataRow
    {
      internal LogElectionPoliticianAddsDeletesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String AddOrDelete
      {
        get { return this["AddOrDelete"] as String; }
        set { if (value == null) this["AddOrDelete"] = DBNull.Value; else this["AddOrDelete"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public Int32 OrderOnBallot
      {
        get { return (Int32) this["OrderOnBallot"]; }
        set { this["OrderOnBallot"] = value; }
      }
    }

    [Serializable]
    public partial class LogElectionPoliticianAddsDeletesTable : TypedTableBase<LogElectionPoliticianAddsDeletesRow>
    {
      public LogElectionPoliticianAddsDeletesRow this[int index] { get { return (LogElectionPoliticianAddsDeletesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogElectionPoliticianAddsDeletesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogElectionPoliticianAddsDeletesTable(); }

      new public LogElectionPoliticianAddsDeletesRow NewRow() { return (LogElectionPoliticianAddsDeletesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogElectionPoliticianAddsDeletesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogElectionPoliticianAddsDeletesRow); }

      public void RemoveRow(LogElectionPoliticianAddsDeletesRow row) { this.Rows.Remove(row); }

      public LogElectionPoliticianAddsDeletesRow NewRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot)
      {
        LogElectionPoliticianAddsDeletesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.ElectionKey = electionKey;
        row.PoliticianKey = politicianKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeKey = officeKey;
        row.OrderOnBallot = orderOnBallot;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot)
      {
        LogElectionPoliticianAddsDeletesRow row = NewRow(primaryKey, dateStamp, addOrDelete, userSecurity, userName, electionKey, politicianKey, stateCode, countyCode, localCode, officeKey, orderOnBallot);
        AddRow(row);
      }

      public LogElectionPoliticianAddsDeletesRow NewRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot)
      {
        LogElectionPoliticianAddsDeletesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.ElectionKey = electionKey;
        row.PoliticianKey = politicianKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeKey = officeKey;
        row.OrderOnBallot = orderOnBallot;
        return row;
      }

      public void AddRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot)
      {
        LogElectionPoliticianAddsDeletesRow row = NewRow(dateStamp, addOrDelete, userSecurity, userName, electionKey, politicianKey, stateCode, countyCode, localCode, officeKey, orderOnBallot);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn AddOrDeleteColumn { get { return this.Columns["AddOrDelete"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn OrderOnBallotColumn { get { return this.Columns["OrderOnBallot"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOrDelete", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OrderOnBallot", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogElectionPoliticianAddsDeletesTable() : this(ColumnSet.All) { }

      public LogElectionPoliticianAddsDeletesTable(ColumnSet columnSet)
      {
        this.TableName = "LogElectionPoliticianAddsDeletes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogElectionPoliticianAddsDeletesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogElectionPoliticianAddsDeletes
    {
      public const string TableName = "LogElectionPoliticianAddsDeletes";

      public enum Column { PrimaryKey, DateStamp, AddOrDelete, UserSecurity, UserName, ElectionKey, PoliticianKey, StateCode, CountyCode, LocalCode, OfficeKey, OrderOnBallot }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.AddOrDelete, "AddOrDelete" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.OrderOnBallot, "OrderOnBallot" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionPoliticianAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogElectionPoliticianAddsDeletes (PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot) VALUES (@PrimaryKey,@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@ElectionKey,@PoliticianKey,@StateCode,@CountyCode,@LocalCode,@OfficeKey,@OrderOnBallot)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String electionKey, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, Int32 orderOnBallot, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogElectionPoliticianAddsDeletes (DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot) VALUES (@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@ElectionKey,@PoliticianKey,@StateCode,@CountyCode,@LocalCode,@OfficeKey,@OrderOnBallot)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "OrderOnBallot", orderOnBallot);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot FROM LogElectionPoliticianAddsDeletes";
        }
      }

      public static LogElectionPoliticianAddsDeletesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot FROM LogElectionPoliticianAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.All);
      }

      public static LogElectionPoliticianAddsDeletesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogElectionPoliticianAddsDeletesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogElectionPoliticianAddsDeletesTable FillTable(DbCommand command, LogElectionPoliticianAddsDeletesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogElectionPoliticianAddsDeletesTable table = new LogElectionPoliticianAddsDeletesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogElectionPoliticianAddsDeletesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogElectionPoliticianAddsDeletesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogElectionPoliticianAddsDeletesTable table, LogElectionPoliticianAddsDeletesTable.ColumnSet columnSet = LogElectionPoliticianAddsDeletesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string AddOrDeleteColumnName { get { return "AddOrDelete"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string OrderOnBallotColumnName { get { return "OrderOnBallot"; } }

      public static int AddOrDeleteMaxLength { get { return 1; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int ElectionKeyMaxLength { get { return 20; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionPoliticianAddsDeletes WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogElectionPoliticianAddsDeletes WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogElectionPoliticianAddsDeletesTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot FROM LogElectionPoliticianAddsDeletes WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET AddOrDelete=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET ElectionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET LocalCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OrderOnBallot=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogElectionPoliticianAddsDeletes WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetAddOrDeleteByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOrDelete FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOrderOnBallotByPrimaryKey(Int32 primaryKey)
      {
        return _GetOrderOnBallotByPrimaryKey(primaryKey, null);
      }

      public static Int32 GetOrderOnBallotByPrimaryKey(Int32 primaryKey, Int32 defaultValue)
      {
        return _GetOrderOnBallotByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Int32? _GetOrderOnBallotByPrimaryKey(Int32 primaryKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OrderOnBallot FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogElectionPoliticianAddsDeletesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET AddOrDelete=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET ElectionKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OrderOnBallot=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogElectionPoliticianAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogElectionPoliticianAddsDeletes WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogElectionPoliticianAddsDeletesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,ElectionKey,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey,OrderOnBallot FROM LogElectionPoliticianAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET AddOrDelete=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET ElectionKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOrderOnBallotByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET OrderOnBallot=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogElectionPoliticianAddsDeletes SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogElectionPoliticianAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogElectionPoliticianAddsDeletes";
        }
      }

      public static LogElectionPoliticianAddsDeletesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionPoliticianAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogElectionPoliticianAddsDeletesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogElectionPoliticianAddsDeletesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogElectionPoliticianAddsDeletesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogElectionPoliticianAddsDeletesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionPoliticianAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.Billing);
      }

      public static LogElectionPoliticianAddsDeletesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogElectionPoliticianAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogElectionPoliticianAddsDeletesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogElectionPoliticianAddsDeletesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogElectionPoliticianAddsDeletesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogElectionPoliticianAddsDeletesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogElectionPoliticianAddsDeletes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogElectionPoliticianAddsDeletes

    #region votelog.LogEmail

    public partial class LogEmailRow : DataRow
    {
      internal LogEmailRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 LogBatchId
      {
        get { return (Int32) this["LogBatchId"]; }
        set { this["LogBatchId"] = value; }
      }

      public DateTime SentTime
      {
        get { return (DateTime) this["SentTime"]; }
        set { this["SentTime"] = value; }
      }

      public Boolean WasSent
      {
        get { return (Boolean) this["WasSent"]; }
        set { this["WasSent"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public Int32 VisitorId
      {
        get { return (Int32) this["VisitorId"]; }
        set { this["VisitorId"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String ToEmail
      {
        get { return this["ToEmail"] as String; }
        set { if (value == null) this["ToEmail"] = DBNull.Value; else this["ToEmail"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Body
      {
        get { return this["Body"] as String; }
        set { if (value == null) this["Body"] = DBNull.Value; else this["Body"] = value; }
      }

      public Int32 ForwardedCount
      {
        get { return (Int32) this["ForwardedCount"]; }
        set { this["ForwardedCount"] = value; }
      }

      public Boolean IsFlagged
      {
        get { return (Boolean) this["IsFlagged"]; }
        set { this["IsFlagged"] = value; }
      }

      public String ErrorMessage
      {
        get { return this["ErrorMessage"] as String; }
        set { if (value == null) this["ErrorMessage"] = DBNull.Value; else this["ErrorMessage"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailTable : TypedTableBase<LogEmailRow>
    {
      public LogEmailRow this[int index] { get { return (LogEmailRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailTable(); }

      new public LogEmailRow NewRow() { return (LogEmailRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailRow); }

      public void RemoveRow(LogEmailRow row) { this.Rows.Remove(row); }

      public LogEmailRow NewRow(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage)
      {
        LogEmailRow row = NewRow();
        row.Id = id;
        row.LogBatchId = logBatchId;
        row.SentTime = sentTime;
        row.WasSent = wasSent;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.VisitorId = visitorId;
        row.Contact = contact;
        row.ToEmail = toEmail;
        row.Subject = subject;
        row.Body = body;
        row.ForwardedCount = forwardedCount;
        row.IsFlagged = isFlagged;
        row.ErrorMessage = errorMessage;
        return row;
      }

      public void AddRow(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage)
      {
        LogEmailRow row = NewRow(id, logBatchId, sentTime, wasSent, stateCode, countyCode, localCode, electionKey, officeKey, politicianKey, visitorId, contact, toEmail, subject, body, forwardedCount, isFlagged, errorMessage);
        AddRow(row);
      }

      public LogEmailRow NewRow(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage)
      {
        LogEmailRow row = NewRow();
        row.LogBatchId = logBatchId;
        row.SentTime = sentTime;
        row.WasSent = wasSent;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.VisitorId = visitorId;
        row.Contact = contact;
        row.ToEmail = toEmail;
        row.Subject = subject;
        row.Body = body;
        row.ForwardedCount = forwardedCount;
        row.IsFlagged = isFlagged;
        row.ErrorMessage = errorMessage;
        return row;
      }

      public void AddRow(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage)
      {
        LogEmailRow row = NewRow(logBatchId, sentTime, wasSent, stateCode, countyCode, localCode, electionKey, officeKey, politicianKey, visitorId, contact, toEmail, subject, body, forwardedCount, isFlagged, errorMessage);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LogBatchIdColumn { get { return this.Columns["LogBatchId"]; } }

      public DataColumn SentTimeColumn { get { return this.Columns["SentTime"]; } }

      public DataColumn WasSentColumn { get { return this.Columns["WasSent"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn VisitorIdColumn { get { return this.Columns["VisitorId"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn ToEmailColumn { get { return this.Columns["ToEmail"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn BodyColumn { get { return this.Columns["Body"]; } }

      public DataColumn ForwardedCountColumn { get { return this.Columns["ForwardedCount"]; } }

      public DataColumn IsFlaggedColumn { get { return this.Columns["IsFlagged"]; } }

      public DataColumn ErrorMessageColumn { get { return this.Columns["ErrorMessage"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("LogBatchId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SentTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WasSent", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VisitorId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ToEmail", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Body", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ForwardedCount", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsFlagged", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ErrorMessage", typeof(String));
        base.Columns.Add(_column);
      }

      public LogEmailTable() : this(ColumnSet.All) { }

      public LogEmailTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmail";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmail
    {
      public const string TableName = "LogEmail";

      public enum Column { Id, LogBatchId, SentTime, WasSent, StateCode, CountyCode, LocalCode, ElectionKey, OfficeKey, PoliticianKey, VisitorId, Contact, ToEmail, Subject, Body, ForwardedCount, IsFlagged, ErrorMessage }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LogBatchId, "LogBatchId" },
        { Column.SentTime, "SentTime" },
        { Column.WasSent, "WasSent" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.VisitorId, "VisitorId" },
        { Column.Contact, "Contact" },
        { Column.ToEmail, "ToEmail" },
        { Column.Subject, "Subject" },
        { Column.Body, "Body" },
        { Column.ForwardedCount, "ForwardedCount" },
        { Column.IsFlagged, "IsFlagged" },
        { Column.ErrorMessage, "ErrorMessage" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmail (Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage) VALUES (@Id,@LogBatchId,@SentTime,@WasSent,@StateCode,@CountyCode,@LocalCode,@ElectionKey,@OfficeKey,@PoliticianKey,@VisitorId,@Contact,@ToEmail,@Subject,@Body,@ForwardedCount,@IsFlagged,@ErrorMessage)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "WasSent", wasSent);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "ToEmail", toEmail);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        VoteLogDb.AddCommandParameter(cmd, "ForwardedCount", forwardedCount);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 logBatchId, DateTime sentTime, Boolean wasSent, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, Int32 visitorId, String contact, String toEmail, String subject, String body, Int32 forwardedCount, Boolean isFlagged, String errorMessage, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmail (LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage) VALUES (@LogBatchId,@SentTime,@WasSent,@StateCode,@CountyCode,@LocalCode,@ElectionKey,@OfficeKey,@PoliticianKey,@VisitorId,@Contact,@ToEmail,@Subject,@Body,@ForwardedCount,@IsFlagged,@ErrorMessage)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "WasSent", wasSent);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "ToEmail", toEmail);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        VoteLogDb.AddCommandParameter(cmd, "ForwardedCount", forwardedCount);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "ErrorMessage", errorMessage);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail";
        }
      }

      public static LogEmailTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static LogEmailTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailTable FillTable(DbCommand command, LogEmailTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailTable table = new LogEmailTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailTable table, LogEmailTable.ColumnSet columnSet = LogEmailTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LogBatchIdColumnName { get { return "LogBatchId"; } }

      public static string SentTimeColumnName { get { return "SentTime"; } }

      public static string WasSentColumnName { get { return "WasSent"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string VisitorIdColumnName { get { return "VisitorId"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string ToEmailColumnName { get { return "ToEmail"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string BodyColumnName { get { return "Body"; } }

      public static string ForwardedCountColumnName { get { return "ForwardedCount"; } }

      public static string IsFlaggedColumnName { get { return "IsFlagged"; } }

      public static string ErrorMessageColumnName { get { return "ErrorMessage"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int ContactMaxLength { get { return 200; } }

      public static int ToEmailMaxLength { get { return 500; } }

      public static int SubjectMaxLength { get { return int.MaxValue; } }

      public static int BodyMaxLength { get { return int.MaxValue; } }

      public static int ErrorMessageMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetLogBatchIdById(Int32 id)
      {
        return _GetLogBatchIdById(id, null);
      }

      public static Int32 GetLogBatchIdById(Int32 id, Int32 defaultValue)
      {
        return _GetLogBatchIdById(id, defaultValue).Value;
      }

      private static Int32? _GetLogBatchIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT LogBatchId FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetSentTimeById(Int32 id)
      {
        return _GetSentTimeById(id, null);
      }

      public static DateTime GetSentTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetSentTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetSentTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT SentTime FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static Boolean? GetWasSentById(Int32 id)
      {
        return _GetWasSentById(id, null);
      }

      public static Boolean GetWasSentById(Int32 id, Boolean defaultValue)
      {
        return _GetWasSentById(id, defaultValue).Value;
      }

      private static Boolean? _GetWasSentById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT WasSent FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetVisitorIdById(Int32 id)
      {
        return _GetVisitorIdById(id, null);
      }

      public static Int32 GetVisitorIdById(Int32 id, Int32 defaultValue)
      {
        return _GetVisitorIdById(id, defaultValue).Value;
      }

      private static Int32? _GetVisitorIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT VisitorId FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetContactById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetToEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ToEmail FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSubjectById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Subject FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBodyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Body FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetForwardedCountById(Int32 id)
      {
        return _GetForwardedCountById(id, null);
      }

      public static Int32 GetForwardedCountById(Int32 id, Int32 defaultValue)
      {
        return _GetForwardedCountById(id, defaultValue).Value;
      }

      private static Int32? _GetForwardedCountById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT ForwardedCount FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Boolean? GetIsFlaggedById(Int32 id)
      {
        return _GetIsFlaggedById(id, null);
      }

      public static Boolean GetIsFlaggedById(Int32 id, Boolean defaultValue)
      {
        return _GetIsFlaggedById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsFlaggedById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsFlagged FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetErrorMessageById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ErrorMessage FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByLogBatchId(Column _column, Int32 logBatchId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE LogBatchId=@LogBatchId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByLogBatchId(DateTime newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByLogBatchId(Boolean newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByLogBatchId(Int32 newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByLogBatchId(Boolean newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByLogBatchId(String newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLogBatchId(Column _column, object newValue, Int32 logBatchId)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE LogBatchId=@LogBatchId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLogBatchId(Int32 logBatchId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE LogBatchId=@LogBatchId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogBatchId", logBatchId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnBySentTime(Column _column, DateTime sentTime)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE SentTime=@SentTime";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeBySentTime(DateTime newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentBySentTime(Boolean newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountBySentTime(Int32 newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedBySentTime(Boolean newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageBySentTime(String newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnBySentTime(Column _column, object newValue, DateTime sentTime)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE SentTime=@SentTime";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteBySentTime(DateTime sentTime, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE SentTime=@SentTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentTime", sentTime);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCodeCountyCodeLocalCode(Column _column, String stateCode, String countyCode, String localCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByStateCodeCountyCodeLocalCode(Int32 newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByStateCodeCountyCodeLocalCode(Int32 newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByStateCodeCountyCodeLocalCode(DateTime newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByStateCodeCountyCodeLocalCode(Boolean newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByStateCodeCountyCodeLocalCode(Int32 newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByStateCodeCountyCodeLocalCode(Int32 newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByStateCodeCountyCodeLocalCode(Boolean newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByStateCodeCountyCodeLocalCode(String newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCodeCountyCodeLocalCode(Column _column, object newValue, String stateCode, String countyCode, String localCode)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCodeCountyCodeLocalCode(String stateCode, String countyCode, String localCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE StateCode=@StateCode AND CountyCode=@CountyCode AND LocalCode=@LocalCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, String electionKey, String officeKey, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByElectionKeyOfficeKeyPoliticianKey(DateTime newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByElectionKeyOfficeKeyPoliticianKey(Int32 newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByElectionKeyOfficeKeyPoliticianKey(Boolean newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByElectionKeyOfficeKeyPoliticianKey(String newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByElectionKeyOfficeKeyPoliticianKey(Column _column, object newValue, String electionKey, String officeKey, String politicianKey)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByElectionKeyOfficeKeyPoliticianKey(String electionKey, String officeKey, String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE ElectionKey=@ElectionKey AND OfficeKey=@OfficeKey AND PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByVisitorId(Column _column, Int32 visitorId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE VisitorId=@VisitorId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByVisitorId(DateTime newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByVisitorId(Boolean newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByVisitorId(Int32 newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByVisitorId(Boolean newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByVisitorId(String newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByVisitorId(Column _column, object newValue, Int32 visitorId)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE VisitorId=@VisitorId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByVisitorId(Int32 visitorId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE VisitorId=@VisitorId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "VisitorId", visitorId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByIsFlagged(Column _column, Boolean isFlagged)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmail WHERE IsFlagged=@IsFlagged";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailTable GetDataByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogBatchId,SentTime,WasSent,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,VisitorId,Contact,ToEmail,Subject,Body,ForwardedCount,IsFlagged,ErrorMessage FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        return FillTable(cmd, LogEmailTable.ColumnSet.All);
      }

      public static int UpdateIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Id=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogBatchIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET LogBatchId=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentTimeByIsFlagged(DateTime newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET SentTime=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWasSentByIsFlagged(Boolean newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET WasSent=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET StateCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET CountyCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET LocalCode=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ElectionKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET OfficeKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET PoliticianKey=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVisitorIdByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET VisitorId=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Contact=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToEmailByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ToEmail=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Subject=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET Body=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateForwardedCountByIsFlagged(Int32 newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ForwardedCount=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsFlaggedByIsFlagged(Boolean newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET IsFlagged=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorMessageByIsFlagged(String newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET ErrorMessage=@newValue WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByIsFlagged(Column _column, object newValue, Boolean isFlagged)
      {
        string cmdText = "UPDATE LogEmail SET {0}=@newValue WHERE IsFlagged=@IsFlagged";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByIsFlagged(Boolean isFlagged, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmail WHERE IsFlagged=@IsFlagged";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "IsFlagged", isFlagged);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmail()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmail

    #region votelog.LogEmailBatches

    public partial class LogEmailBatchesRow : DataRow
    {
      internal LogEmailBatchesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public DateTime CreationTime
      {
        get { return (DateTime) this["CreationTime"]; }
        set { this["CreationTime"] = value; }
      }

      public String ContactType
      {
        get { return this["ContactType"] as String; }
        set { if (value == null) this["ContactType"] = DBNull.Value; else this["ContactType"] = value; }
      }

      public String SelectionCriteria
      {
        get { return this["SelectionCriteria"] as String; }
        set { if (value == null) this["SelectionCriteria"] = DBNull.Value; else this["SelectionCriteria"] = value; }
      }

      public String Description
      {
        get { return this["Description"] as String; }
        set { if (value == null) this["Description"] = DBNull.Value; else this["Description"] = value; }
      }

      public Int32 Found
      {
        get { return (Int32) this["Found"]; }
        set { this["Found"] = value; }
      }

      public Int32 Skipped
      {
        get { return (Int32) this["Skipped"]; }
        set { this["Skipped"] = value; }
      }

      public Int32 Sent
      {
        get { return (Int32) this["Sent"]; }
        set { this["Sent"] = value; }
      }

      public Int32 Failed
      {
        get { return (Int32) this["Failed"]; }
        set { this["Failed"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String FromEmail
      {
        get { return this["FromEmail"] as String; }
        set { if (value == null) this["FromEmail"] = DBNull.Value; else this["FromEmail"] = value; }
      }

      public String CcEmails
      {
        get { return this["CcEmails"] as String; }
        set { if (value == null) this["CcEmails"] = DBNull.Value; else this["CcEmails"] = value; }
      }

      public String BccEmails
      {
        get { return this["BccEmails"] as String; }
        set { if (value == null) this["BccEmails"] = DBNull.Value; else this["BccEmails"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailBatchesTable : TypedTableBase<LogEmailBatchesRow>
    {
      public LogEmailBatchesRow this[int index] { get { return (LogEmailBatchesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailBatchesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailBatchesTable(); }

      new public LogEmailBatchesRow NewRow() { return (LogEmailBatchesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailBatchesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailBatchesRow); }

      public void RemoveRow(LogEmailBatchesRow row) { this.Rows.Remove(row); }

      public LogEmailBatchesRow NewRow(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow();
        row.Id = id;
        row.CreationTime = creationTime;
        row.ContactType = contactType;
        row.SelectionCriteria = selectionCriteria;
        row.Description = description;
        row.Found = found;
        row.Skipped = skipped;
        row.Sent = sent;
        row.Failed = failed;
        row.UserName = userName;
        row.FromEmail = fromEmail;
        row.CcEmails = ccEmails;
        row.BccEmails = bccEmails;
        return row;
      }

      public void AddRow(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow(id, creationTime, contactType, selectionCriteria, description, found, skipped, sent, failed, userName, fromEmail, ccEmails, bccEmails);
        AddRow(row);
      }

      public LogEmailBatchesRow NewRow(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow();
        row.CreationTime = creationTime;
        row.ContactType = contactType;
        row.SelectionCriteria = selectionCriteria;
        row.Description = description;
        row.Found = found;
        row.Skipped = skipped;
        row.Sent = sent;
        row.Failed = failed;
        row.UserName = userName;
        row.FromEmail = fromEmail;
        row.CcEmails = ccEmails;
        row.BccEmails = bccEmails;
        return row;
      }

      public void AddRow(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails)
      {
        LogEmailBatchesRow row = NewRow(creationTime, contactType, selectionCriteria, description, found, skipped, sent, failed, userName, fromEmail, ccEmails, bccEmails);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn CreationTimeColumn { get { return this.Columns["CreationTime"]; } }

      public DataColumn ContactTypeColumn { get { return this.Columns["ContactType"]; } }

      public DataColumn SelectionCriteriaColumn { get { return this.Columns["SelectionCriteria"]; } }

      public DataColumn DescriptionColumn { get { return this.Columns["Description"]; } }

      public DataColumn FoundColumn { get { return this.Columns["Found"]; } }

      public DataColumn SkippedColumn { get { return this.Columns["Skipped"]; } }

      public DataColumn SentColumn { get { return this.Columns["Sent"]; } }

      public DataColumn FailedColumn { get { return this.Columns["Failed"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn FromEmailColumn { get { return this.Columns["FromEmail"]; } }

      public DataColumn CcEmailsColumn { get { return this.Columns["CcEmails"]; } }

      public DataColumn BccEmailsColumn { get { return this.Columns["BccEmails"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("CreationTime", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ContactType", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("SelectionCriteria", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("Description", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Found", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Skipped", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Sent", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Failed", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FromEmail", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CcEmails", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BccEmails", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogEmailBatchesTable() : this(ColumnSet.All) { }

      public LogEmailBatchesTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmailBatches";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailBatchesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmailBatches
    {
      public const string TableName = "LogEmailBatches";

      public enum Column { Id, CreationTime, ContactType, SelectionCriteria, Description, Found, Skipped, Sent, Failed, UserName, FromEmail, CcEmails, BccEmails }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.CreationTime, "CreationTime" },
        { Column.ContactType, "ContactType" },
        { Column.SelectionCriteria, "SelectionCriteria" },
        { Column.Description, "Description" },
        { Column.Found, "Found" },
        { Column.Skipped, "Skipped" },
        { Column.Sent, "Sent" },
        { Column.Failed, "Failed" },
        { Column.UserName, "UserName" },
        { Column.FromEmail, "FromEmail" },
        { Column.CcEmails, "CcEmails" },
        { Column.BccEmails, "BccEmails" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailBatches (Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails) VALUES (@Id,@CreationTime,@ContactType,@SelectionCriteria,@Description,@Found,@Skipped,@Sent,@Failed,@UserName,@FromEmail,@CcEmails,@BccEmails)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "ContactType", contactType);
        VoteLogDb.AddCommandParameter(cmd, "SelectionCriteria", selectionCriteria);
        VoteLogDb.AddCommandParameter(cmd, "Description", description);
        VoteLogDb.AddCommandParameter(cmd, "Found", found);
        VoteLogDb.AddCommandParameter(cmd, "Skipped", skipped);
        VoteLogDb.AddCommandParameter(cmd, "Sent", sent);
        VoteLogDb.AddCommandParameter(cmd, "Failed", failed);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "CcEmails", ccEmails);
        VoteLogDb.AddCommandParameter(cmd, "BccEmails", bccEmails);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime creationTime, String contactType, String selectionCriteria, String description, Int32 found, Int32 skipped, Int32 sent, Int32 failed, String userName, String fromEmail, String ccEmails, String bccEmails, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailBatches (CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails) VALUES (@CreationTime,@ContactType,@SelectionCriteria,@Description,@Found,@Skipped,@Sent,@Failed,@UserName,@FromEmail,@CcEmails,@BccEmails)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "ContactType", contactType);
        VoteLogDb.AddCommandParameter(cmd, "SelectionCriteria", selectionCriteria);
        VoteLogDb.AddCommandParameter(cmd, "Description", description);
        VoteLogDb.AddCommandParameter(cmd, "Found", found);
        VoteLogDb.AddCommandParameter(cmd, "Skipped", skipped);
        VoteLogDb.AddCommandParameter(cmd, "Sent", sent);
        VoteLogDb.AddCommandParameter(cmd, "Failed", failed);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "CcEmails", ccEmails);
        VoteLogDb.AddCommandParameter(cmd, "BccEmails", bccEmails);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches";
        }
      }

      public static LogEmailBatchesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static LogEmailBatchesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailBatchesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailBatchesTable FillTable(DbCommand command, LogEmailBatchesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailBatchesTable table = new LogEmailBatchesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailBatchesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailBatchesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailBatchesTable table, LogEmailBatchesTable.ColumnSet columnSet = LogEmailBatchesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string CreationTimeColumnName { get { return "CreationTime"; } }

      public static string ContactTypeColumnName { get { return "ContactType"; } }

      public static string SelectionCriteriaColumnName { get { return "SelectionCriteria"; } }

      public static string DescriptionColumnName { get { return "Description"; } }

      public static string FoundColumnName { get { return "Found"; } }

      public static string SkippedColumnName { get { return "Skipped"; } }

      public static string SentColumnName { get { return "Sent"; } }

      public static string FailedColumnName { get { return "Failed"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string FromEmailColumnName { get { return "FromEmail"; } }

      public static string CcEmailsColumnName { get { return "CcEmails"; } }

      public static string BccEmailsColumnName { get { return "BccEmails"; } }

      public static int ContactTypeMaxLength { get { return 1; } }

      public static int SelectionCriteriaMaxLength { get { return int.MaxValue; } }

      public static int DescriptionMaxLength { get { return 500; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int FromEmailMaxLength { get { return 100; } }

      public static int CcEmailsMaxLength { get { return 500; } }

      public static int BccEmailsMaxLength { get { return 500; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetCreationTimeById(Int32 id)
      {
        return _GetCreationTimeById(id, null);
      }

      public static DateTime GetCreationTimeById(Int32 id, DateTime defaultValue)
      {
        return _GetCreationTimeById(id, defaultValue).Value;
      }

      private static DateTime? _GetCreationTimeById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT CreationTime FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetContactTypeById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ContactType FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSelectionCriteriaById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SelectionCriteria FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDescriptionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Description FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetFoundById(Int32 id)
      {
        return _GetFoundById(id, null);
      }

      public static Int32 GetFoundById(Int32 id, Int32 defaultValue)
      {
        return _GetFoundById(id, defaultValue).Value;
      }

      private static Int32? _GetFoundById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Found FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetSkippedById(Int32 id)
      {
        return _GetSkippedById(id, null);
      }

      public static Int32 GetSkippedById(Int32 id, Int32 defaultValue)
      {
        return _GetSkippedById(id, defaultValue).Value;
      }

      private static Int32? _GetSkippedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Skipped FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetSentById(Int32 id)
      {
        return _GetSentById(id, null);
      }

      public static Int32 GetSentById(Int32 id, Int32 defaultValue)
      {
        return _GetSentById(id, defaultValue).Value;
      }

      private static Int32? _GetSentById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Sent FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetFailedById(Int32 id)
      {
        return _GetFailedById(id, null);
      }

      public static Int32 GetFailedById(Int32 id, Int32 defaultValue)
      {
        return _GetFailedById(id, defaultValue).Value;
      }

      private static Int32? _GetFailedById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Failed FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetUserNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFromEmailById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FromEmail FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCcEmailsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CcEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBccEmailsById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BccEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByCreationTime(Column _column, DateTime creationTime)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByCreationTime(DateTime newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByCreationTime(Int32 newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByCreationTime(String newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByCreationTime(Column _column, object newValue, DateTime creationTime)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE CreationTime=@CreationTime";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByCreationTime(DateTime creationTime, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE CreationTime=@CreationTime";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "CreationTime", creationTime);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByFromEmail(Column _column, String fromEmail)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailBatchesTable GetDataByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,CreationTime,ContactType,SelectionCriteria,Description,Found,Skipped,Sent,Failed,UserName,FromEmail,CcEmails,BccEmails FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        return FillTable(cmd, LogEmailBatchesTable.ColumnSet.All);
      }

      public static int UpdateIdByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Id=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCreationTimeByFromEmail(DateTime newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET CreationTime=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactTypeByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET ContactType=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSelectionCriteriaByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET SelectionCriteria=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDescriptionByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Description=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFoundByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Found=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSkippedByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Skipped=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Sent=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFailedByFromEmail(Int32 newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET Failed=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET UserName=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromEmailByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET FromEmail=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcEmailsByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET CcEmails=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccEmailsByFromEmail(String newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET BccEmails=@newValue WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByFromEmail(Column _column, object newValue, String fromEmail)
      {
        string cmdText = "UPDATE LogEmailBatches SET {0}=@newValue WHERE FromEmail=@FromEmail";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByFromEmail(String fromEmail, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailBatches WHERE FromEmail=@FromEmail";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "FromEmail", fromEmail);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailBatchesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailBatchesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmailBatches()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmailBatches

    #region votelog.LogEmailNotes

    public partial class LogEmailNotesRow : DataRow
    {
      internal LogEmailNotesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public Int32 LogEmailId
      {
        get { return (Int32) this["LogEmailId"]; }
        set { this["LogEmailId"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Note
      {
        get { return this["Note"] as String; }
        set { if (value == null) this["Note"] = DBNull.Value; else this["Note"] = value; }
      }

      public Boolean IsSystemNote
      {
        get { return (Boolean) this["IsSystemNote"]; }
        set { this["IsSystemNote"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailNotesTable : TypedTableBase<LogEmailNotesRow>
    {
      public LogEmailNotesRow this[int index] { get { return (LogEmailNotesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailNotesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailNotesTable(); }

      new public LogEmailNotesRow NewRow() { return (LogEmailNotesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailNotesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailNotesRow); }

      public void RemoveRow(LogEmailNotesRow row) { this.Rows.Remove(row); }

      public LogEmailNotesRow NewRow(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow();
        row.Id = id;
        row.LogEmailId = logEmailId;
        row.DateStamp = dateStamp;
        row.Note = note;
        row.IsSystemNote = isSystemNote;
        return row;
      }

      public void AddRow(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow(id, logEmailId, dateStamp, note, isSystemNote);
        AddRow(row);
      }

      public LogEmailNotesRow NewRow(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow();
        row.LogEmailId = logEmailId;
        row.DateStamp = dateStamp;
        row.Note = note;
        row.IsSystemNote = isSystemNote;
        return row;
      }

      public void AddRow(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote)
      {
        LogEmailNotesRow row = NewRow(logEmailId, dateStamp, note, isSystemNote);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn LogEmailIdColumn { get { return this.Columns["LogEmailId"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn NoteColumn { get { return this.Columns["Note"]; } }

      public DataColumn IsSystemNoteColumn { get { return this.Columns["IsSystemNote"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("LogEmailId", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Note", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsSystemNote", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogEmailNotesTable() : this(ColumnSet.All) { }

      public LogEmailNotesTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmailNotes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailNotesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmailNotes
    {
      public const string TableName = "LogEmailNotes";

      public enum Column { Id, LogEmailId, DateStamp, Note, IsSystemNote }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.LogEmailId, "LogEmailId" },
        { Column.DateStamp, "DateStamp" },
        { Column.Note, "Note" },
        { Column.IsSystemNote, "IsSystemNote" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailNotes (Id,LogEmailId,DateStamp,Note,IsSystemNote) VALUES (@Id,@LogEmailId,@DateStamp,@Note,@IsSystemNote)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        VoteLogDb.AddCommandParameter(cmd, "IsSystemNote", isSystemNote);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(Int32 logEmailId, DateTime dateStamp, String note, Boolean isSystemNote, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmailNotes (LogEmailId,DateStamp,Note,IsSystemNote) VALUES (@LogEmailId,@DateStamp,@Note,@IsSystemNote)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        VoteLogDb.AddCommandParameter(cmd, "IsSystemNote", isSystemNote);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes";
        }
      }

      public static LogEmailNotesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static LogEmailNotesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailNotesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailNotesTable FillTable(DbCommand command, LogEmailNotesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailNotesTable table = new LogEmailNotesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailNotesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailNotesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailNotesTable table, LogEmailNotesTable.ColumnSet columnSet = LogEmailNotesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string LogEmailIdColumnName { get { return "LogEmailId"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string NoteColumnName { get { return "Note"; } }

      public static string IsSystemNoteColumnName { get { return "IsSystemNote"; } }

      public static int NoteMaxLength { get { return int.MaxValue; } }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static Int32? GetLogEmailIdById(Int32 id)
      {
        return _GetLogEmailIdById(id, null);
      }

      public static Int32 GetLogEmailIdById(Int32 id, Int32 defaultValue)
      {
        return _GetLogEmailIdById(id, defaultValue).Value;
      }

      private static Int32? _GetLogEmailIdById(Int32 id, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT LogEmailId FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetNoteById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Note FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsSystemNoteById(Int32 id)
      {
        return _GetIsSystemNoteById(id, null);
      }

      public static Boolean GetIsSystemNoteById(Int32 id, Boolean defaultValue)
      {
        return _GetIsSystemNoteById(id, defaultValue).Value;
      }

      private static Boolean? _GetIsSystemNoteById(Int32 id, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsSystemNote FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailNotes WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailNotesTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogEmailIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET LogEmailId=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET Note=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSystemNoteById(Boolean newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET IsSystemNote=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogEmailNotes SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailNotes WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByLogEmailId(Column _column, Int32 logEmailId)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailNotesTable GetDataByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,LogEmailId,DateStamp,Note,IsSystemNote FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        return FillTable(cmd, LogEmailNotesTable.ColumnSet.All);
      }

      public static int UpdateIdByLogEmailId(Int32 newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET Id=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLogEmailIdByLogEmailId(Int32 newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET LogEmailId=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByLogEmailId(DateTime newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET DateStamp=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteByLogEmailId(String newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET Note=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsSystemNoteByLogEmailId(Boolean newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET IsSystemNote=@newValue WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByLogEmailId(Column _column, object newValue, Int32 logEmailId)
      {
        string cmdText = "UPDATE LogEmailNotes SET {0}=@newValue WHERE LogEmailId=@LogEmailId";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByLogEmailId(Int32 logEmailId, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmailNotes WHERE LogEmailId=@LogEmailId";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "LogEmailId", logEmailId);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailNotesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailNotesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmailNotes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmailNotes

    #region votelog.LogEmails

    public partial class LogEmailsRow : DataRow
    {
      internal LogEmailsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime SentDate
      {
        get { return (DateTime) this["SentDate"]; }
        set { this["SentDate"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Contact
      {
        get { return this["Contact"] as String; }
        set { if (value == null) this["Contact"] = DBNull.Value; else this["Contact"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String FromAddress
      {
        get { return this["FromAddr"] as String; }
        set { if (value == null) this["FromAddr"] = DBNull.Value; else this["FromAddr"] = value; }
      }

      public String ToAddresses
      {
        get { return this["ToAddr"] as String; }
        set { if (value == null) this["ToAddr"] = DBNull.Value; else this["ToAddr"] = value; }
      }

      public String CcAddresses
      {
        get { return this["CcAddr"] as String; }
        set { if (value == null) this["CcAddr"] = DBNull.Value; else this["CcAddr"] = value; }
      }

      public String BccAddresses
      {
        get { return this["BccAddr"] as String; }
        set { if (value == null) this["BccAddr"] = DBNull.Value; else this["BccAddr"] = value; }
      }

      public String Subject
      {
        get { return this["Subject"] as String; }
        set { if (value == null) this["Subject"] = DBNull.Value; else this["Subject"] = value; }
      }

      public String Body
      {
        get { return this["Body"] as String; }
        set { if (value == null) this["Body"] = DBNull.Value; else this["Body"] = value; }
      }
    }

    [Serializable]
    public partial class LogEmailsTable : TypedTableBase<LogEmailsRow>
    {
      public LogEmailsRow this[int index] { get { return (LogEmailsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogEmailsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogEmailsTable(); }

      new public LogEmailsRow NewRow() { return (LogEmailsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogEmailsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogEmailsRow); }

      public void RemoveRow(LogEmailsRow row) { this.Rows.Remove(row); }

      public LogEmailsRow NewRow(Int32 primaryKey, DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body)
      {
        LogEmailsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.SentDate = sentDate;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.Contact = contact;
        row.UserName = userName;
        row.FromAddress = fromAddress;
        row.ToAddresses = toAddresses;
        row.CcAddresses = ccAddresses;
        row.BccAddresses = bccAddresses;
        row.Subject = subject;
        row.Body = body;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body)
      {
        LogEmailsRow row = NewRow(primaryKey, sentDate, stateCode, countyCode, localCode, electionKey, officeKey, politicianKey, contact, userName, fromAddress, toAddresses, ccAddresses, bccAddresses, subject, body);
        AddRow(row);
      }

      public LogEmailsRow NewRow(DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body)
      {
        LogEmailsRow row = NewRow();
        row.SentDate = sentDate;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.ElectionKey = electionKey;
        row.OfficeKey = officeKey;
        row.PoliticianKey = politicianKey;
        row.Contact = contact;
        row.UserName = userName;
        row.FromAddress = fromAddress;
        row.ToAddresses = toAddresses;
        row.CcAddresses = ccAddresses;
        row.BccAddresses = bccAddresses;
        row.Subject = subject;
        row.Body = body;
        return row;
      }

      public void AddRow(DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body)
      {
        LogEmailsRow row = NewRow(sentDate, stateCode, countyCode, localCode, electionKey, officeKey, politicianKey, contact, userName, fromAddress, toAddresses, ccAddresses, bccAddresses, subject, body);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn SentDateColumn { get { return this.Columns["SentDate"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ContactColumn { get { return this.Columns["Contact"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn FromAddressColumn { get { return this.Columns["FromAddr"]; } }

      public DataColumn ToAddressesColumn { get { return this.Columns["ToAddr"]; } }

      public DataColumn CcAddressesColumn { get { return this.Columns["CcAddr"]; } }

      public DataColumn BccAddressesColumn { get { return this.Columns["BccAddr"]; } }

      public DataColumn SubjectColumn { get { return this.Columns["Subject"]; } }

      public DataColumn BodyColumn { get { return this.Columns["Body"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("SentDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Contact", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FromAddr", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ToAddr", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CcAddr", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("BccAddr", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Subject", typeof(String));
        _column.MaxLength = 500;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Body", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogEmailsTable() : this(ColumnSet.All) { }

      public LogEmailsTable(ColumnSet columnSet)
      {
        this.TableName = "LogEmails";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogEmailsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogEmails
    {
      public const string TableName = "LogEmails";

      public enum Column { PrimaryKey, SentDate, StateCode, CountyCode, LocalCode, ElectionKey, OfficeKey, PoliticianKey, Contact, UserName, FromAddress, ToAddresses, CcAddresses, BccAddresses, Subject, Body }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.SentDate, "SentDate" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Contact, "Contact" },
        { Column.UserName, "UserName" },
        { Column.FromAddress, "FromAddr" },
        { Column.ToAddresses, "ToAddr" },
        { Column.CcAddresses, "CcAddr" },
        { Column.BccAddresses, "BccAddr" },
        { Column.Subject, "Subject" },
        { Column.Body, "Body" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmails";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmails (PrimaryKey,SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body) VALUES (@PrimaryKey,@SentDate,@StateCode,@CountyCode,@LocalCode,@ElectionKey,@OfficeKey,@PoliticianKey,@Contact,@UserName,@FromAddress,@ToAddresses,@CcAddresses,@BccAddresses,@Subject,@Body)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "SentDate", sentDate);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromAddress", fromAddress);
        VoteLogDb.AddCommandParameter(cmd, "ToAddresses", toAddresses);
        VoteLogDb.AddCommandParameter(cmd, "CcAddresses", ccAddresses);
        VoteLogDb.AddCommandParameter(cmd, "BccAddresses", bccAddresses);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime sentDate, String stateCode, String countyCode, String localCode, String electionKey, String officeKey, String politicianKey, String contact, String userName, String fromAddress, String toAddresses, String ccAddresses, String bccAddresses, String subject, String body, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogEmails (SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body) VALUES (@SentDate,@StateCode,@CountyCode,@LocalCode,@ElectionKey,@OfficeKey,@PoliticianKey,@Contact,@UserName,@FromAddress,@ToAddresses,@CcAddresses,@BccAddresses,@Subject,@Body)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "SentDate", sentDate);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "Contact", contact);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "FromAddress", fromAddress);
        VoteLogDb.AddCommandParameter(cmd, "ToAddresses", toAddresses);
        VoteLogDb.AddCommandParameter(cmd, "CcAddresses", ccAddresses);
        VoteLogDb.AddCommandParameter(cmd, "BccAddresses", bccAddresses);
        VoteLogDb.AddCommandParameter(cmd, "Subject", subject);
        VoteLogDb.AddCommandParameter(cmd, "Body", body);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body FROM LogEmails";
        }
      }

      public static LogEmailsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body FROM LogEmails";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogEmailsTable.ColumnSet.All);
      }

      public static LogEmailsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogEmailsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogEmailsTable FillTable(DbCommand command, LogEmailsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogEmailsTable table = new LogEmailsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogEmailsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogEmailsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogEmailsTable table, LogEmailsTable.ColumnSet columnSet = LogEmailsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string SentDateColumnName { get { return "SentDate"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ContactColumnName { get { return "Contact"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string FromAddressColumnName { get { return "FromAddr"; } }

      public static string ToAddressesColumnName { get { return "ToAddr"; } }

      public static string CcAddressesColumnName { get { return "CcAddr"; } }

      public static string BccAddressesColumnName { get { return "BccAddr"; } }

      public static string SubjectColumnName { get { return "Subject"; } }

      public static string BodyColumnName { get { return "Body"; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int ContactMaxLength { get { return int.MaxValue; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int FromAddressMaxLength { get { return 100; } }

      public static int ToAddressesMaxLength { get { return 500; } }

      public static int CcAddressesMaxLength { get { return 500; } }

      public static int BccAddressesMaxLength { get { return 500; } }

      public static int SubjectMaxLength { get { return 500; } }

      public static int BodyMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetSentDateByPrimaryKey(Int32 primaryKey)
      {
        return _GetSentDateByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetSentDateByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetSentDateByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetSentDateByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT SentDate FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetContactByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Contact FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFromAddressByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FromAddr FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetToAddressesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ToAddr FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCcAddressesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CcAddr FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBccAddressesByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT BccAddr FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSubjectByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Subject FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetBodyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Body FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogEmailsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentDateByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET SentDate=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET ElectionKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET Contact=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromAddressByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET FromAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToAddressesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET ToAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcAddressesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET CcAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccAddressesByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET BccAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET Subject=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET Body=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogEmails SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmails WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByStateCode(String stateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogEmails WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByStateCode(Column _column, String stateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogEmails WHERE StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogEmailsTable GetDataByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,SentDate,StateCode,CountyCode,LocalCode,ElectionKey,OfficeKey,PoliticianKey,Contact,UserName,FromAddr,ToAddr,CcAddr,BccAddr,Subject,Body FROM LogEmails WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return FillTable(cmd, LogEmailsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByStateCode(Int32 newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET PrimaryKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSentDateByStateCode(DateTime newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET SentDate=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET StateCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET CountyCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET LocalCode=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET ElectionKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET OfficeKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET PoliticianKey=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateContactByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET Contact=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET UserName=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFromAddressByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET FromAddr=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateToAddressesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET ToAddr=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCcAddressesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET CcAddr=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBccAddressesByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET BccAddr=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSubjectByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET Subject=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateBodyByStateCode(String newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET Body=@newValue WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByStateCode(Column _column, object newValue, String stateCode)
      {
        string cmdText = "UPDATE LogEmails SET {0}=@newValue WHERE StateCode=@StateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByStateCode(String stateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogEmails WHERE StateCode=@StateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogEmailsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogEmailsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogEmails()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogEmails

    #region votelog.LogErrorsAdmin

    public partial class LogErrorsAdminRow : DataRow
    {
      internal LogErrorsAdminRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }

      public String StackTrace
      {
        get { return this["StackTrace"] as String; }
        set { if (value == null) this["StackTrace"] = DBNull.Value; else this["StackTrace"] = value; }
      }
    }

    [Serializable]
    public partial class LogErrorsAdminTable : TypedTableBase<LogErrorsAdminRow>
    {
      public LogErrorsAdminRow this[int index] { get { return (LogErrorsAdminRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogErrorsAdminRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogErrorsAdminTable(); }

      new public LogErrorsAdminRow NewRow() { return (LogErrorsAdminRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogErrorsAdminRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogErrorsAdminRow); }

      public void RemoveRow(LogErrorsAdminRow row) { this.Rows.Remove(row); }

      public LogErrorsAdminRow NewRow(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow(primaryKey, dateStamp, page, message, stackTrace);
        AddRow(row);
      }

      public LogErrorsAdminRow NewRow(DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(DateTime dateStamp, String page, String message, String stackTrace)
      {
        LogErrorsAdminRow row = NewRow(dateStamp, page, message, stackTrace);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public DataColumn StackTraceColumn { get { return this.Columns["StackTrace"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StackTrace", typeof(String));
        _column.MaxLength = 4000;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogErrorsAdminTable() : this(ColumnSet.All) { }

      public LogErrorsAdminTable(ColumnSet columnSet)
      {
        this.TableName = "LogErrorsAdmin";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogErrorsAdminTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogErrorsAdmin
    {
      public const string TableName = "LogErrorsAdmin";

      public enum Column { PrimaryKey, DateStamp, Page, Message, StackTrace }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Page, "Page" },
        { Column.Message, "Message" },
        { Column.StackTrace, "StackTrace" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void TruncateTable(int commandTimeout = -1)
      {
        string cmdText = "TRUNCATE TABLE LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogErrorsAdmin (PrimaryKey,DateStamp,Page,Message,StackTrace) VALUES (@PrimaryKey,@DateStamp,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogErrorsAdmin (DateStamp,Page,Message,StackTrace) VALUES (@DateStamp,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin";
        }
      }

      public static LogErrorsAdminTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogErrorsAdminTable.ColumnSet.All);
      }

      public static LogErrorsAdminTable FillTable(DbCommand command)
      {
        return FillTable(command, LogErrorsAdminTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogErrorsAdminTable FillTable(DbCommand command, LogErrorsAdminTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogErrorsAdminTable table = new LogErrorsAdminTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogErrorsAdminTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogErrorsAdminTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogErrorsAdminTable table, LogErrorsAdminTable.ColumnSet columnSet = LogErrorsAdminTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static string StackTraceColumnName { get { return "StackTrace"; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static int StackTraceMaxLength { get { return 4000; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStackTraceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StackTrace FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogErrorsAdminTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Page,Message,StackTrace FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogErrorsAdminTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET StackTrace=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogErrorsAdmin SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogErrorsAdmin WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogErrorsAdminTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogErrorsAdminTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogErrorsAdmin()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogErrorsAdmin

    #region votelog.LogExceptions

    public partial class LogExceptionsRow : DataRow
    {
      internal LogExceptionsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Machine
      {
        get { return this["Machine"] as String; }
        set { if (value == null) this["Machine"] = DBNull.Value; else this["Machine"] = value; }
      }

      public String ErrorType
      {
        get { return this["ErrorType"] as String; }
        set { if (value == null) this["ErrorType"] = DBNull.Value; else this["ErrorType"] = value; }
      }

      public String Page
      {
        get { return this["Page"] as String; }
        set { if (value == null) this["Page"] = DBNull.Value; else this["Page"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }

      public String StackTrace
      {
        get { return this["StackTrace"] as String; }
        set { if (value == null) this["StackTrace"] = DBNull.Value; else this["StackTrace"] = value; }
      }
    }

    [Serializable]
    public partial class LogExceptionsTable : TypedTableBase<LogExceptionsRow>
    {
      public LogExceptionsRow this[int index] { get { return (LogExceptionsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogExceptionsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogExceptionsTable(); }

      new public LogExceptionsRow NewRow() { return (LogExceptionsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogExceptionsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogExceptionsRow); }

      public void RemoveRow(LogExceptionsRow row) { this.Rows.Remove(row); }

      public LogExceptionsRow NewRow(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.ErrorType = errorType;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow(primaryKey, dateStamp, machine, errorType, page, message, stackTrace);
        AddRow(row);
      }

      public LogExceptionsRow NewRow(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.ErrorType = errorType;
        row.Page = page;
        row.Message = message;
        row.StackTrace = stackTrace;
        return row;
      }

      public void AddRow(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace)
      {
        LogExceptionsRow row = NewRow(dateStamp, machine, errorType, page, message, stackTrace);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn MachineColumn { get { return this.Columns["Machine"]; } }

      public DataColumn ErrorTypeColumn { get { return this.Columns["ErrorType"]; } }

      public DataColumn PageColumn { get { return this.Columns["Page"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public DataColumn StackTraceColumn { get { return this.Columns["StackTrace"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Machine", typeof(String));
        _column.MaxLength = 32;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ErrorType", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Page", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("StackTrace", typeof(String));
        base.Columns.Add(_column);
      }

      public LogExceptionsTable() : this(ColumnSet.All) { }

      public LogExceptionsTable(ColumnSet columnSet)
      {
        this.TableName = "LogExceptions";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogExceptionsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogExceptions
    {
      public const string TableName = "LogExceptions";

      public enum Column { PrimaryKey, DateStamp, Machine, ErrorType, Page, Message, StackTrace }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Machine, "Machine" },
        { Column.ErrorType, "ErrorType" },
        { Column.Page, "Page" },
        { Column.Message, "Message" },
        { Column.StackTrace, "StackTrace" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogExceptions (PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace) VALUES (@PrimaryKey,@DateStamp,@Machine,@ErrorType,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String machine, String errorType, String page, String message, String stackTrace, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogExceptions (DateStamp,Machine,ErrorType,Page,Message,StackTrace) VALUES (@DateStamp,@Machine,@ErrorType,@Page,@Message,@StackTrace)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "Page", page);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        VoteLogDb.AddCommandParameter(cmd, "StackTrace", stackTrace);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions";
        }
      }

      public static LogExceptionsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static LogExceptionsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogExceptionsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogExceptionsTable FillTable(DbCommand command, LogExceptionsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogExceptionsTable table = new LogExceptionsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogExceptionsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogExceptionsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogExceptionsTable table, LogExceptionsTable.ColumnSet columnSet = LogExceptionsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string MachineColumnName { get { return "Machine"; } }

      public static string ErrorTypeColumnName { get { return "ErrorType"; } }

      public static string PageColumnName { get { return "Page"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static string StackTraceColumnName { get { return "StackTrace"; } }

      public static int MachineMaxLength { get { return 32; } }

      public static int ErrorTypeMaxLength { get { return 64; } }

      public static int PageMaxLength { get { return int.MaxValue; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static int StackTraceMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMachineByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Machine FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetErrorTypeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ErrorType FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Page FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStackTraceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StackTrace FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByErrorType(String errorType, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByErrorType(Column _column, String errorType)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE ErrorType=@ErrorType";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByErrorType(String errorType, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByErrorType(Int32 newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByErrorType(DateTime newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByErrorType(String newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByErrorType(Column _column, object newValue, String errorType)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE ErrorType=@ErrorType";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByErrorType(String errorType, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE ErrorType=@ErrorType";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "ErrorType", errorType);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMachine(String machine, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMachine(Column _column, String machine)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogExceptions WHERE Machine=@Machine";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogExceptionsTable GetDataByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,ErrorType,Page,Message,StackTrace FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return FillTable(cmd, LogExceptionsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByMachine(Int32 newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET PrimaryKey=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByMachine(DateTime newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET DateStamp=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Machine=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateErrorTypeByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET ErrorType=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Page=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET Message=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStackTraceByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET StackTrace=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMachine(Column _column, object newValue, String machine)
      {
        string cmdText = "UPDATE LogExceptions SET {0}=@newValue WHERE Machine=@Machine";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogExceptions WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogExceptionsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogExceptionsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogExceptions()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogExceptions

    #region votelog.LogInfo

    public partial class LogInfoRow : DataRow
    {
      internal LogInfoRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String Machine
      {
        get { return this["Machine"] as String; }
        set { if (value == null) this["Machine"] = DBNull.Value; else this["Machine"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public String Message
      {
        get { return this["Message"] as String; }
        set { if (value == null) this["Message"] = DBNull.Value; else this["Message"] = value; }
      }
    }

    [Serializable]
    public partial class LogInfoTable : TypedTableBase<LogInfoRow>
    {
      public LogInfoRow this[int index] { get { return (LogInfoRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogInfoRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogInfoTable(); }

      new public LogInfoRow NewRow() { return (LogInfoRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogInfoRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogInfoRow); }

      public void RemoveRow(LogInfoRow row) { this.Rows.Remove(row); }

      public LogInfoRow NewRow(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.Source = source;
        row.Message = message;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow(primaryKey, dateStamp, machine, source, message);
        AddRow(row);
      }

      public LogInfoRow NewRow(DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow();
        row.DateStamp = dateStamp;
        row.Machine = machine;
        row.Source = source;
        row.Message = message;
        return row;
      }

      public void AddRow(DateTime dateStamp, String machine, String source, String message)
      {
        LogInfoRow row = NewRow(dateStamp, machine, source, message);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn MachineColumn { get { return this.Columns["Machine"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn MessageColumn { get { return this.Columns["Message"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Machine", typeof(String));
        _column.MaxLength = 32;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.MaxLength = 64;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Message", typeof(String));
        base.Columns.Add(_column);
      }

      public LogInfoTable() : this(ColumnSet.All) { }

      public LogInfoTable(ColumnSet columnSet)
      {
        this.TableName = "LogInfo";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogInfoTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogInfo
    {
      public const string TableName = "LogInfo";

      public enum Column { PrimaryKey, DateStamp, Machine, Source, Message }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.Machine, "Machine" },
        { Column.Source, "Source" },
        { Column.Message, "Message" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String machine, String source, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogInfo (PrimaryKey,DateStamp,Machine,Source,Message) VALUES (@PrimaryKey,@DateStamp,@Machine,@Source,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String machine, String source, String message, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogInfo (DateStamp,Machine,Source,Message) VALUES (@DateStamp,@Machine,@Source,@Message)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "Message", message);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo";
        }
      }

      public static LogInfoTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static LogInfoTable FillTable(DbCommand command)
      {
        return FillTable(command, LogInfoTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogInfoTable FillTable(DbCommand command, LogInfoTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogInfoTable table = new LogInfoTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogInfoTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogInfoTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogInfoTable table, LogInfoTable.ColumnSet columnSet = LogInfoTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string MachineColumnName { get { return "Machine"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string MessageColumnName { get { return "Message"; } }

      public static int MachineMaxLength { get { return 32; } }

      public static int SourceMaxLength { get { return 64; } }

      public static int MessageMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetMachineByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Machine FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSourceByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMessageByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Message FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountBySource(String source, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnBySource(Column _column, String source)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE Source=@Source";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataBySource(String source, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyBySource(Int32 newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampBySource(DateTime newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageBySource(String newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnBySource(Column _column, object newValue, String source)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE Source=@Source";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteBySource(String source, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE Source=@Source";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByMachine(String machine, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByMachine(Column _column, String machine)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogInfo WHERE Machine=@Machine";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogInfoTable GetDataByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,Machine,Source,Message FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return FillTable(cmd, LogInfoTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByMachine(Int32 newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET PrimaryKey=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByMachine(DateTime newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET DateStamp=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMachineByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Machine=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Source=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMessageByMachine(String newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET Message=@newValue WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByMachine(Column _column, object newValue, String machine)
      {
        string cmdText = "UPDATE LogInfo SET {0}=@newValue WHERE Machine=@Machine";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByMachine(String machine, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogInfo WHERE Machine=@Machine";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Machine", machine);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogInfoTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogInfoTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogInfo()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogInfo

    #region votelog.LogLogins

    public partial class LogLoginsRow : DataRow
    {
      internal LogLoginsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String UserCountyCode
      {
        get { return this["UserCountyCode"] as String; }
        set { if (value == null) this["UserCountyCode"] = DBNull.Value; else this["UserCountyCode"] = value; }
      }

      public String UserLocalCode
      {
        get { return this["UserLocalCode"] as String; }
        set { if (value == null) this["UserLocalCode"] = DBNull.Value; else this["UserLocalCode"] = value; }
      }

      public String UserDesignCode
      {
        get { return this["UserDesignCode"] as String; }
        set { if (value == null) this["UserDesignCode"] = DBNull.Value; else this["UserDesignCode"] = value; }
      }

      public String UserOrganizationCode
      {
        get { return this["UserOrganizationCode"] as String; }
        set { if (value == null) this["UserOrganizationCode"] = DBNull.Value; else this["UserOrganizationCode"] = value; }
      }

      public String UserIssuesCode
      {
        get { return this["UserIssuesCode"] as String; }
        set { if (value == null) this["UserIssuesCode"] = DBNull.Value; else this["UserIssuesCode"] = value; }
      }

      public String UserPartyKey
      {
        get { return this["UserPartyKey"] as String; }
        set { if (value == null) this["UserPartyKey"] = DBNull.Value; else this["UserPartyKey"] = value; }
      }

      public String UserPoliticianKey
      {
        get { return this["UserPoliticianKey"] as String; }
        set { if (value == null) this["UserPoliticianKey"] = DBNull.Value; else this["UserPoliticianKey"] = value; }
      }
    }

    [Serializable]
    public partial class LogLoginsTable : TypedTableBase<LogLoginsRow>
    {
      public LogLoginsRow this[int index] { get { return (LogLoginsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogLoginsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogLoginsTable(); }

      new public LogLoginsRow NewRow() { return (LogLoginsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogLoginsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogLoginsRow); }

      public void RemoveRow(LogLoginsRow row) { this.Rows.Remove(row); }

      public LogLoginsRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalCode = userLocalCode;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(primaryKey, dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public LogLoginsRow NewRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserSecurity = userSecurity;
        row.UserStateCode = userStateCode;
        row.UserCountyCode = userCountyCode;
        row.UserLocalCode = userLocalCode;
        row.UserDesignCode = userDesignCode;
        row.UserOrganizationCode = userOrganizationCode;
        row.UserIssuesCode = userIssuesCode;
        row.UserPartyKey = userPartyKey;
        row.UserPoliticianKey = userPoliticianKey;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey)
      {
        LogLoginsRow row = NewRow(dateStamp, userName, userSecurity, userStateCode, userCountyCode, userLocalCode, userDesignCode, userOrganizationCode, userIssuesCode, userPartyKey, userPoliticianKey);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn UserCountyCodeColumn { get { return this.Columns["UserCountyCode"]; } }

      public DataColumn UserLocalCodeColumn { get { return this.Columns["UserLocalCode"]; } }

      public DataColumn UserDesignCodeColumn { get { return this.Columns["UserDesignCode"]; } }

      public DataColumn UserOrganizationCodeColumn { get { return this.Columns["UserOrganizationCode"]; } }

      public DataColumn UserIssuesCodeColumn { get { return this.Columns["UserIssuesCode"]; } }

      public DataColumn UserPartyKeyColumn { get { return this.Columns["UserPartyKey"]; } }

      public DataColumn UserPoliticianKeyColumn { get { return this.Columns["UserPoliticianKey"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 30;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserCountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserLocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserDesignCode", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserOrganizationCode", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserIssuesCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserPoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogLoginsTable() : this(ColumnSet.All) { }

      public LogLoginsTable(ColumnSet columnSet)
      {
        this.TableName = "LogLogins";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogLoginsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogLogins
    {
      public const string TableName = "LogLogins";

      public enum Column { PrimaryKey, DateStamp, UserName, UserSecurity, UserStateCode, UserCountyCode, UserLocalCode, UserDesignCode, UserOrganizationCode, UserIssuesCode, UserPartyKey, UserPoliticianKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.UserCountyCode, "UserCountyCode" },
        { Column.UserLocalCode, "UserLocalCode" },
        { Column.UserDesignCode, "UserDesignCode" },
        { Column.UserOrganizationCode, "UserOrganizationCode" },
        { Column.UserIssuesCode, "UserIssuesCode" },
        { Column.UserPartyKey, "UserPartyKey" },
        { Column.UserPoliticianKey, "UserPoliticianKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogLogins (PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalCode,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteLogDb.AddCommandParameter(cmd, "UserLocalCode", userLocalCode);
        VoteLogDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteLogDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteLogDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteLogDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteLogDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userSecurity, String userStateCode, String userCountyCode, String userLocalCode, String userDesignCode, String userOrganizationCode, String userIssuesCode, String userPartyKey, String userPoliticianKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogLogins (DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey) VALUES (@DateStamp,@UserName,@UserSecurity,@UserStateCode,@UserCountyCode,@UserLocalCode,@UserDesignCode,@UserOrganizationCode,@UserIssuesCode,@UserPartyKey,@UserPoliticianKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "UserCountyCode", userCountyCode);
        VoteLogDb.AddCommandParameter(cmd, "UserLocalCode", userLocalCode);
        VoteLogDb.AddCommandParameter(cmd, "UserDesignCode", userDesignCode);
        VoteLogDb.AddCommandParameter(cmd, "UserOrganizationCode", userOrganizationCode);
        VoteLogDb.AddCommandParameter(cmd, "UserIssuesCode", userIssuesCode);
        VoteLogDb.AddCommandParameter(cmd, "UserPartyKey", userPartyKey);
        VoteLogDb.AddCommandParameter(cmd, "UserPoliticianKey", userPoliticianKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        }
      }

      public static LogLoginsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static LogLoginsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogLoginsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogLoginsTable FillTable(DbCommand command, LogLoginsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogLoginsTable table = new LogLoginsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogLoginsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogLoginsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogLoginsTable table, LogLoginsTable.ColumnSet columnSet = LogLoginsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string UserCountyCodeColumnName { get { return "UserCountyCode"; } }

      public static string UserLocalCodeColumnName { get { return "UserLocalCode"; } }

      public static string UserDesignCodeColumnName { get { return "UserDesignCode"; } }

      public static string UserOrganizationCodeColumnName { get { return "UserOrganizationCode"; } }

      public static string UserIssuesCodeColumnName { get { return "UserIssuesCode"; } }

      public static string UserPartyKeyColumnName { get { return "UserPartyKey"; } }

      public static string UserPoliticianKeyColumnName { get { return "UserPoliticianKey"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserSecurityMaxLength { get { return 30; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int UserCountyCodeMaxLength { get { return 3; } }

      public static int UserLocalCodeMaxLength { get { return 2; } }

      public static int UserDesignCodeMaxLength { get { return 100; } }

      public static int UserOrganizationCodeMaxLength { get { return 50; } }

      public static int UserIssuesCodeMaxLength { get { return 2; } }

      public static int UserPartyKeyMaxLength { get { return 5; } }

      public static int UserPoliticianKeyMaxLength { get { return 50; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserCountyCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserLocalCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserDesignCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserDesignCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserOrganizationCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserOrganizationCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserIssuesCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserIssuesCode FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPartyKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPartyKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogLogins WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogLogins WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogLoginsTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserSecurity,UserStateCode,UserCountyCode,UserLocalCode,UserDesignCode,UserOrganizationCode,UserIssuesCode,UserPartyKey,UserPoliticianKey FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogLoginsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserStateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserCountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserLocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserDesignCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserDesignCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserOrganizationCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserOrganizationCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserIssuesCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserIssuesCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPartyKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPartyKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserPoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET UserPoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogLogins SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogLogins WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogLoginsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogLoginsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogLogins()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogLogins

    #region votelog.LogNotes

    public partial class LogNotesRow : DataRow
    {
      internal LogNotesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String UserStateCode
      {
        get { return this["UserStateCode"] as String; }
        set { if (value == null) this["UserStateCode"] = DBNull.Value; else this["UserStateCode"] = value; }
      }

      public String Note
      {
        get { return this["Note"] as String; }
        set { if (value == null) this["Note"] = DBNull.Value; else this["Note"] = value; }
      }
    }

    [Serializable]
    public partial class LogNotesTable : TypedTableBase<LogNotesRow>
    {
      public LogNotesRow this[int index] { get { return (LogNotesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogNotesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogNotesTable(); }

      new public LogNotesRow NewRow() { return (LogNotesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogNotesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogNotesRow); }

      public void RemoveRow(LogNotesRow row) { this.Rows.Remove(row); }

      public LogNotesRow NewRow(Int32 primaryKey, DateTime dateStamp, String userName, String userStateCode, String note)
      {
        LogNotesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserStateCode = userStateCode;
        row.Note = note;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userName, String userStateCode, String note)
      {
        LogNotesRow row = NewRow(primaryKey, dateStamp, userName, userStateCode, note);
        AddRow(row);
      }

      public LogNotesRow NewRow(DateTime dateStamp, String userName, String userStateCode, String note)
      {
        LogNotesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserName = userName;
        row.UserStateCode = userStateCode;
        row.Note = note;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userName, String userStateCode, String note)
      {
        LogNotesRow row = NewRow(dateStamp, userName, userStateCode, note);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn UserStateCodeColumn { get { return this.Columns["UserStateCode"]; } }

      public DataColumn NoteColumn { get { return this.Columns["Note"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserStateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Note", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogNotesTable() : this(ColumnSet.All) { }

      public LogNotesTable(ColumnSet columnSet)
      {
        this.TableName = "LogNotes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogNotesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogNotes
    {
      public const string TableName = "LogNotes";

      public enum Column { PrimaryKey, DateStamp, UserName, UserStateCode, Note }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserName, "UserName" },
        { Column.UserStateCode, "UserStateCode" },
        { Column.Note, "Note" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userName, String userStateCode, String note, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogNotes (PrimaryKey,DateStamp,UserName,UserStateCode,Note) VALUES (@PrimaryKey,@DateStamp,@UserName,@UserStateCode,@Note)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userName, String userStateCode, String note, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogNotes (DateStamp,UserName,UserStateCode,Note) VALUES (@DateStamp,@UserName,@UserStateCode,@Note)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "Note", note);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserName,UserStateCode,Note FROM LogNotes";
        }
      }

      public static LogNotesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserStateCode,Note FROM LogNotes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogNotesTable.ColumnSet.All);
      }

      public static LogNotesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogNotesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogNotesTable FillTable(DbCommand command, LogNotesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogNotesTable table = new LogNotesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogNotesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogNotesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogNotesTable table, LogNotesTable.ColumnSet columnSet = LogNotesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string UserStateCodeColumnName { get { return "UserStateCode"; } }

      public static string NoteColumnName { get { return "Note"; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int UserStateCodeMaxLength { get { return 2; } }

      public static int NoteMaxLength { get { return int.MaxValue; } }

      public static int CountByUserStateCode(String userStateCode, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogNotes WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserStateCode(Column _column, String userStateCode)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogNotes WHERE UserStateCode=@UserStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogNotesTable GetDataByUserStateCode(String userStateCode, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserStateCode,Note FROM LogNotes WHERE UserStateCode=@UserStateCode ORDER BY DateStamp DESC";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        return FillTable(cmd, LogNotesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserStateCode(Int32 newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET PrimaryKey=@newValue WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserStateCode(DateTime newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET DateStamp=@newValue WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserStateCode(String newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET UserName=@newValue WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByUserStateCode(String newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET UserStateCode=@newValue WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteByUserStateCode(String newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET Note=@newValue WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserStateCode(Column _column, object newValue, String userStateCode)
      {
        string cmdText = "UPDATE LogNotes SET {0}=@newValue WHERE UserStateCode=@UserStateCode";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserStateCode(String userStateCode, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogNotes WHERE UserStateCode=@UserStateCode";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserStateCode", userStateCode);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserStateCode FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNoteByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Note FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogNotesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserName,UserStateCode,Note FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogNotesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET UserStateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNoteByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET Note=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogNotes SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogNotes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogNotesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogNotesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogNotes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogNotes

    #region votelog.LogOfficeAddsDeletes

    public partial class LogOfficeAddsDeletesRow : DataRow
    {
      internal LogOfficeAddsDeletesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String AddOrDelete
      {
        get { return this["AddOrDelete"] as String; }
        set { if (value == null) this["AddOrDelete"] = DBNull.Value; else this["AddOrDelete"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public Int32 OfficeLevel
      {
        get { return (Int32) this["OfficeLevel"]; }
        set { this["OfficeLevel"] = value; }
      }

      public Int32 OfficeOrderWithinLevel
      {
        get { return (Int32) this["OfficeOrderWithinLevel"]; }
        set { this["OfficeOrderWithinLevel"] = value; }
      }

      public String DistrictCode
      {
        get { return this["DistrictCode"] as String; }
        set { if (value == null) this["DistrictCode"] = DBNull.Value; else this["DistrictCode"] = value; }
      }

      public String DistrictCodeAlpha
      {
        get { return this["DistrictCodeAlpha"] as String; }
        set { if (value == null) this["DistrictCodeAlpha"] = DBNull.Value; else this["DistrictCodeAlpha"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String OfficeLine1
      {
        get { return this["OfficeLine1"] as String; }
        set { if (value == null) this["OfficeLine1"] = DBNull.Value; else this["OfficeLine1"] = value; }
      }

      public String OfficeLine2
      {
        get { return this["OfficeLine2"] as String; }
        set { if (value == null) this["OfficeLine2"] = DBNull.Value; else this["OfficeLine2"] = value; }
      }

      public Boolean IsStateNameInOffice
      {
        get { return (Boolean) this["IsStateNameInOffice"]; }
        set { this["IsStateNameInOffice"] = value; }
      }

      public Boolean IsRunningMateOffice
      {
        get { return (Boolean) this["IsRunningMateOffice"]; }
        set { this["IsRunningMateOffice"] = value; }
      }

      public Int32 Incumbents
      {
        get { return (Int32) this["Incumbents"]; }
        set { this["Incumbents"] = value; }
      }

      public String VoteInstructions
      {
        get { return this["VoteInstructions"] as String; }
        set { if (value == null) this["VoteInstructions"] = DBNull.Value; else this["VoteInstructions"] = value; }
      }

      public String VoteForWording
      {
        get { return this["VoteForWording"] as String; }
        set { if (value == null) this["VoteForWording"] = DBNull.Value; else this["VoteForWording"] = value; }
      }

      public String WriteInInstructions
      {
        get { return this["WriteInInstructions"] as String; }
        set { if (value == null) this["WriteInInstructions"] = DBNull.Value; else this["WriteInInstructions"] = value; }
      }

      public String WriteInWording
      {
        get { return this["WriteInWording"] as String; }
        set { if (value == null) this["WriteInWording"] = DBNull.Value; else this["WriteInWording"] = value; }
      }

      public Int32 WriteInLines
      {
        get { return (Int32) this["WriteInLines"]; }
        set { this["WriteInLines"] = value; }
      }
    }

    [Serializable]
    public partial class LogOfficeAddsDeletesTable : TypedTableBase<LogOfficeAddsDeletesRow>
    {
      public LogOfficeAddsDeletesRow this[int index] { get { return (LogOfficeAddsDeletesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogOfficeAddsDeletesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogOfficeAddsDeletesTable(); }

      new public LogOfficeAddsDeletesRow NewRow() { return (LogOfficeAddsDeletesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogOfficeAddsDeletesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogOfficeAddsDeletesRow); }

      public void RemoveRow(LogOfficeAddsDeletesRow row) { this.Rows.Remove(row); }

      public LogOfficeAddsDeletesRow NewRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines)
      {
        LogOfficeAddsDeletesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.OfficeLevel = officeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.DistrictCode = districtCode;
        row.DistrictCodeAlpha = districtCodeAlpha;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.IsStateNameInOffice = isStateNameInOffice;
        row.IsRunningMateOffice = isRunningMateOffice;
        row.Incumbents = incumbents;
        row.VoteInstructions = voteInstructions;
        row.VoteForWording = voteForWording;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines)
      {
        LogOfficeAddsDeletesRow row = NewRow(primaryKey, dateStamp, addOrDelete, userSecurity, userName, officeKey, stateCode, officeLevel, officeOrderWithinLevel, districtCode, districtCodeAlpha, countyCode, localCode, officeLine1, officeLine2, isStateNameInOffice, isRunningMateOffice, incumbents, voteInstructions, voteForWording, writeInInstructions, writeInWording, writeInLines);
        AddRow(row);
      }

      public LogOfficeAddsDeletesRow NewRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines)
      {
        LogOfficeAddsDeletesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.OfficeLevel = officeLevel;
        row.OfficeOrderWithinLevel = officeOrderWithinLevel;
        row.DistrictCode = districtCode;
        row.DistrictCodeAlpha = districtCodeAlpha;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeLine1 = officeLine1;
        row.OfficeLine2 = officeLine2;
        row.IsStateNameInOffice = isStateNameInOffice;
        row.IsRunningMateOffice = isRunningMateOffice;
        row.Incumbents = incumbents;
        row.VoteInstructions = voteInstructions;
        row.VoteForWording = voteForWording;
        row.WriteInInstructions = writeInInstructions;
        row.WriteInWording = writeInWording;
        row.WriteInLines = writeInLines;
        return row;
      }

      public void AddRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines)
      {
        LogOfficeAddsDeletesRow row = NewRow(dateStamp, addOrDelete, userSecurity, userName, officeKey, stateCode, officeLevel, officeOrderWithinLevel, districtCode, districtCodeAlpha, countyCode, localCode, officeLine1, officeLine2, isStateNameInOffice, isRunningMateOffice, incumbents, voteInstructions, voteForWording, writeInInstructions, writeInWording, writeInLines);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn AddOrDeleteColumn { get { return this.Columns["AddOrDelete"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn OfficeLevelColumn { get { return this.Columns["OfficeLevel"]; } }

      public DataColumn OfficeOrderWithinLevelColumn { get { return this.Columns["OfficeOrderWithinLevel"]; } }

      public DataColumn DistrictCodeColumn { get { return this.Columns["DistrictCode"]; } }

      public DataColumn DistrictCodeAlphaColumn { get { return this.Columns["DistrictCodeAlpha"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn OfficeLine1Column { get { return this.Columns["OfficeLine1"]; } }

      public DataColumn OfficeLine2Column { get { return this.Columns["OfficeLine2"]; } }

      public DataColumn IsStateNameInOfficeColumn { get { return this.Columns["IsStateNameInOffice"]; } }

      public DataColumn IsRunningMateOfficeColumn { get { return this.Columns["IsRunningMateOffice"]; } }

      public DataColumn IncumbentsColumn { get { return this.Columns["Incumbents"]; } }

      public DataColumn VoteInstructionsColumn { get { return this.Columns["VoteInstructions"]; } }

      public DataColumn VoteForWordingColumn { get { return this.Columns["VoteForWording"]; } }

      public DataColumn WriteInInstructionsColumn { get { return this.Columns["WriteInInstructions"]; } }

      public DataColumn WriteInWordingColumn { get { return this.Columns["WriteInWording"]; } }

      public DataColumn WriteInLinesColumn { get { return this.Columns["WriteInLines"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOrDelete", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeOrderWithinLevel", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DistrictCodeAlpha", typeof(String));
        _column.MaxLength = 4;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine1", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeLine2", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsStateNameInOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IsRunningMateOffice", typeof(Boolean));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Incumbents", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("VoteForWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInInstructions", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInWording", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("WriteInLines", typeof(Int32));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogOfficeAddsDeletesTable() : this(ColumnSet.All) { }

      public LogOfficeAddsDeletesTable(ColumnSet columnSet)
      {
        this.TableName = "LogOfficeAddsDeletes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogOfficeAddsDeletesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogOfficeAddsDeletes
    {
      public const string TableName = "LogOfficeAddsDeletes";

      public enum Column { PrimaryKey, DateStamp, AddOrDelete, UserSecurity, UserName, OfficeKey, StateCode, OfficeLevel, OfficeOrderWithinLevel, DistrictCode, DistrictCodeAlpha, CountyCode, LocalCode, OfficeLine1, OfficeLine2, IsStateNameInOffice, IsRunningMateOffice, Incumbents, VoteInstructions, VoteForWording, WriteInInstructions, WriteInWording, WriteInLines }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.AddOrDelete, "AddOrDelete" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.OfficeLevel, "OfficeLevel" },
        { Column.OfficeOrderWithinLevel, "OfficeOrderWithinLevel" },
        { Column.DistrictCode, "DistrictCode" },
        { Column.DistrictCodeAlpha, "DistrictCodeAlpha" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.OfficeLine1, "OfficeLine1" },
        { Column.OfficeLine2, "OfficeLine2" },
        { Column.IsStateNameInOffice, "IsStateNameInOffice" },
        { Column.IsRunningMateOffice, "IsRunningMateOffice" },
        { Column.Incumbents, "Incumbents" },
        { Column.VoteInstructions, "VoteInstructions" },
        { Column.VoteForWording, "VoteForWording" },
        { Column.WriteInInstructions, "WriteInInstructions" },
        { Column.WriteInWording, "WriteInWording" },
        { Column.WriteInLines, "WriteInLines" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeAddsDeletes (PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines) VALUES (@PrimaryKey,@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@OfficeKey,@StateCode,@OfficeLevel,@OfficeOrderWithinLevel,@DistrictCode,@DistrictCodeAlpha,@CountyCode,@LocalCode,@OfficeLine1,@OfficeLine2,@IsStateNameInOffice,@IsRunningMateOffice,@Incumbents,@VoteInstructions,@VoteForWording,@WriteInInstructions,@WriteInWording,@WriteInLines)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteLogDb.AddCommandParameter(cmd, "OfficeOrderWithinLevel", officeOrderWithinLevel);
        VoteLogDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteLogDb.AddCommandParameter(cmd, "DistrictCodeAlpha", districtCodeAlpha);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLine1", officeLine1);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLine2", officeLine2);
        VoteLogDb.AddCommandParameter(cmd, "IsStateNameInOffice", isStateNameInOffice);
        VoteLogDb.AddCommandParameter(cmd, "IsRunningMateOffice", isRunningMateOffice);
        VoteLogDb.AddCommandParameter(cmd, "Incumbents", incumbents);
        VoteLogDb.AddCommandParameter(cmd, "VoteInstructions", voteInstructions);
        VoteLogDb.AddCommandParameter(cmd, "VoteForWording", voteForWording);
        VoteLogDb.AddCommandParameter(cmd, "WriteInInstructions", writeInInstructions);
        VoteLogDb.AddCommandParameter(cmd, "WriteInWording", writeInWording);
        VoteLogDb.AddCommandParameter(cmd, "WriteInLines", writeInLines);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String officeKey, String stateCode, Int32 officeLevel, Int32 officeOrderWithinLevel, String districtCode, String districtCodeAlpha, String countyCode, String localCode, String officeLine1, String officeLine2, Boolean isStateNameInOffice, Boolean isRunningMateOffice, Int32 incumbents, String voteInstructions, String voteForWording, String writeInInstructions, String writeInWording, Int32 writeInLines, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeAddsDeletes (DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines) VALUES (@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@OfficeKey,@StateCode,@OfficeLevel,@OfficeOrderWithinLevel,@DistrictCode,@DistrictCodeAlpha,@CountyCode,@LocalCode,@OfficeLine1,@OfficeLine2,@IsStateNameInOffice,@IsRunningMateOffice,@Incumbents,@VoteInstructions,@VoteForWording,@WriteInInstructions,@WriteInWording,@WriteInLines)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLevel", officeLevel);
        VoteLogDb.AddCommandParameter(cmd, "OfficeOrderWithinLevel", officeOrderWithinLevel);
        VoteLogDb.AddCommandParameter(cmd, "DistrictCode", districtCode);
        VoteLogDb.AddCommandParameter(cmd, "DistrictCodeAlpha", districtCodeAlpha);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLine1", officeLine1);
        VoteLogDb.AddCommandParameter(cmd, "OfficeLine2", officeLine2);
        VoteLogDb.AddCommandParameter(cmd, "IsStateNameInOffice", isStateNameInOffice);
        VoteLogDb.AddCommandParameter(cmd, "IsRunningMateOffice", isRunningMateOffice);
        VoteLogDb.AddCommandParameter(cmd, "Incumbents", incumbents);
        VoteLogDb.AddCommandParameter(cmd, "VoteInstructions", voteInstructions);
        VoteLogDb.AddCommandParameter(cmd, "VoteForWording", voteForWording);
        VoteLogDb.AddCommandParameter(cmd, "WriteInInstructions", writeInInstructions);
        VoteLogDb.AddCommandParameter(cmd, "WriteInWording", writeInWording);
        VoteLogDb.AddCommandParameter(cmd, "WriteInLines", writeInLines);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines FROM LogOfficeAddsDeletes";
        }
      }

      public static LogOfficeAddsDeletesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines FROM LogOfficeAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeAddsDeletesTable.ColumnSet.All);
      }

      public static LogOfficeAddsDeletesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogOfficeAddsDeletesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogOfficeAddsDeletesTable FillTable(DbCommand command, LogOfficeAddsDeletesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogOfficeAddsDeletesTable table = new LogOfficeAddsDeletesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogOfficeAddsDeletesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogOfficeAddsDeletesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogOfficeAddsDeletesTable table, LogOfficeAddsDeletesTable.ColumnSet columnSet = LogOfficeAddsDeletesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string AddOrDeleteColumnName { get { return "AddOrDelete"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string OfficeLevelColumnName { get { return "OfficeLevel"; } }

      public static string OfficeOrderWithinLevelColumnName { get { return "OfficeOrderWithinLevel"; } }

      public static string DistrictCodeColumnName { get { return "DistrictCode"; } }

      public static string DistrictCodeAlphaColumnName { get { return "DistrictCodeAlpha"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string OfficeLine1ColumnName { get { return "OfficeLine1"; } }

      public static string OfficeLine2ColumnName { get { return "OfficeLine2"; } }

      public static string IsStateNameInOfficeColumnName { get { return "IsStateNameInOffice"; } }

      public static string IsRunningMateOfficeColumnName { get { return "IsRunningMateOffice"; } }

      public static string IncumbentsColumnName { get { return "Incumbents"; } }

      public static string VoteInstructionsColumnName { get { return "VoteInstructions"; } }

      public static string VoteForWordingColumnName { get { return "VoteForWording"; } }

      public static string WriteInInstructionsColumnName { get { return "WriteInInstructions"; } }

      public static string WriteInWordingColumnName { get { return "WriteInWording"; } }

      public static string WriteInLinesColumnName { get { return "WriteInLines"; } }

      public static int AddOrDeleteMaxLength { get { return 1; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int DistrictCodeMaxLength { get { return 2; } }

      public static int DistrictCodeAlphaMaxLength { get { return 4; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int OfficeLine1MaxLength { get { return 100; } }

      public static int OfficeLine2MaxLength { get { return 100; } }

      public static int VoteInstructionsMaxLength { get { return int.MaxValue; } }

      public static int VoteForWordingMaxLength { get { return int.MaxValue; } }

      public static int WriteInInstructionsMaxLength { get { return int.MaxValue; } }

      public static int WriteInWordingMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetAddOrDeleteByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOrDelete FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetOfficeLevelByPrimaryKey(Int32 primaryKey)
      {
        return _GetOfficeLevelByPrimaryKey(primaryKey, null);
      }

      public static Int32 GetOfficeLevelByPrimaryKey(Int32 primaryKey, Int32 defaultValue)
      {
        return _GetOfficeLevelByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Int32? _GetOfficeLevelByPrimaryKey(Int32 primaryKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeLevel FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static Int32? GetOfficeOrderWithinLevelByPrimaryKey(Int32 primaryKey)
      {
        return _GetOfficeOrderWithinLevelByPrimaryKey(primaryKey, null);
      }

      public static Int32 GetOfficeOrderWithinLevelByPrimaryKey(Int32 primaryKey, Int32 defaultValue)
      {
        return _GetOfficeOrderWithinLevelByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Int32? _GetOfficeOrderWithinLevelByPrimaryKey(Int32 primaryKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT OfficeOrderWithinLevel FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetDistrictCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCode FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDistrictCodeAlphaByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DistrictCodeAlpha FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine1ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine1 FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeLine2ByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeLine2 FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetIsStateNameInOfficeByPrimaryKey(Int32 primaryKey)
      {
        return _GetIsStateNameInOfficeByPrimaryKey(primaryKey, null);
      }

      public static Boolean GetIsStateNameInOfficeByPrimaryKey(Int32 primaryKey, Boolean defaultValue)
      {
        return _GetIsStateNameInOfficeByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Boolean? _GetIsStateNameInOfficeByPrimaryKey(Int32 primaryKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsStateNameInOffice FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Boolean? GetIsRunningMateOfficeByPrimaryKey(Int32 primaryKey)
      {
        return _GetIsRunningMateOfficeByPrimaryKey(primaryKey, null);
      }

      public static Boolean GetIsRunningMateOfficeByPrimaryKey(Int32 primaryKey, Boolean defaultValue)
      {
        return _GetIsRunningMateOfficeByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Boolean? _GetIsRunningMateOfficeByPrimaryKey(Int32 primaryKey, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT IsRunningMateOffice FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static Int32? GetIncumbentsByPrimaryKey(Int32 primaryKey)
      {
        return _GetIncumbentsByPrimaryKey(primaryKey, null);
      }

      public static Int32 GetIncumbentsByPrimaryKey(Int32 primaryKey, Int32 defaultValue)
      {
        return _GetIncumbentsByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Int32? _GetIncumbentsByPrimaryKey(Int32 primaryKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT Incumbents FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static String GetVoteInstructionsByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteInstructions FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetVoteForWordingByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT VoteForWording FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInInstructionsByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInInstructions FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetWriteInWordingByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT WriteInWording FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Int32? GetWriteInLinesByPrimaryKey(Int32 primaryKey)
      {
        return _GetWriteInLinesByPrimaryKey(primaryKey, null);
      }

      public static Int32 GetWriteInLinesByPrimaryKey(Int32 primaryKey, Int32 defaultValue)
      {
        return _GetWriteInLinesByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static Int32? _GetWriteInLinesByPrimaryKey(Int32 primaryKey, Int32? defaultValue)
      {
        object result;
        string cmdText = "SELECT WriteInLines FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Int32) result;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeAddsDeletesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET AddOrDelete=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLevel=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeOrderWithinLevel=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DistrictCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeAlphaByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DistrictCodeAlpha=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLine1=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLine2=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateNameInOfficeByPrimaryKey(Boolean newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET IsStateNameInOffice=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByPrimaryKey(Boolean newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET IsRunningMateOffice=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET Incumbents=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET VoteInstructions=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteForWordingByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET VoteForWording=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInInstructions=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInWording=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInLines=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeAddsDeletes WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeAddsDeletesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,OfficeKey,StateCode,OfficeLevel,OfficeOrderWithinLevel,DistrictCode,DistrictCodeAlpha,CountyCode,LocalCode,OfficeLine1,OfficeLine2,IsStateNameInOffice,IsRunningMateOffice,Incumbents,VoteInstructions,VoteForWording,WriteInInstructions,WriteInWording,WriteInLines FROM LogOfficeAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET AddOrDelete=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLevelByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLevel=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeOrderWithinLevelByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeOrderWithinLevel=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DistrictCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDistrictCodeAlphaByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET DistrictCodeAlpha=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine1ByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLine1=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeLine2ByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET OfficeLine2=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsStateNameInOfficeByUserName(Boolean newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET IsStateNameInOffice=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIsRunningMateOfficeByUserName(Boolean newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET IsRunningMateOffice=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIncumbentsByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET Incumbents=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteInstructionsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET VoteInstructions=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateVoteForWordingByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET VoteForWording=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInInstructionsByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInInstructions=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInWordingByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInWording=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateWriteInLinesByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET WriteInLines=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeAddsDeletes SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogOfficeAddsDeletesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogOfficeAddsDeletesTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogOfficeAddsDeletes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogOfficeAddsDeletes

    #region votelog.LogOfficeChanges

    public partial class LogOfficeChangesRow : DataRow
    {
      internal LogOfficeChangesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogOfficeChangesTable : TypedTableBase<LogOfficeChangesRow>
    {
      public LogOfficeChangesRow this[int index] { get { return (LogOfficeChangesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogOfficeChangesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogOfficeChangesTable(); }

      new public LogOfficeChangesRow NewRow() { return (LogOfficeChangesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogOfficeChangesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogOfficeChangesRow); }

      public void RemoveRow(LogOfficeChangesRow row) { this.Rows.Remove(row); }

      public LogOfficeChangesRow NewRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeChangesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.OfficeKey = officeKey;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeChangesRow row = NewRow(primaryKey, dateStamp, userSecurity, userName, officeKey, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogOfficeChangesRow NewRow(DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeChangesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.OfficeKey = officeKey;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeChangesRow row = NewRow(dateStamp, userSecurity, userName, officeKey, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogOfficeChangesTable() : this(ColumnSet.All) { }

      public LogOfficeChangesTable(ColumnSet columnSet)
      {
        this.TableName = "LogOfficeChanges";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogOfficeChangesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogOfficeChanges
    {
      public const string TableName = "LogOfficeChanges";

      public enum Column { PrimaryKey, DateStamp, UserSecurity, UserName, OfficeKey, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeChanges (PrimaryKey,DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo) VALUES (@PrimaryKey,@DateStamp,@UserSecurity,@UserName,@OfficeKey,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String officeKey, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeChanges (DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@OfficeKey,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo FROM LogOfficeChanges";
        }
      }

      public static LogOfficeChangesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo FROM LogOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.All);
      }

      public static LogOfficeChangesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogOfficeChangesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogOfficeChangesTable FillTable(DbCommand command, LogOfficeChangesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogOfficeChangesTable table = new LogOfficeChangesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogOfficeChangesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogOfficeChangesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogOfficeChangesTable table, LogOfficeChangesTable.ColumnSet columnSet = LogOfficeChangesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeChangesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataItem=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeChanges SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeChanges WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeChangesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,OfficeKey,DataItem,DataFrom,DataTo FROM LogOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataItem=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET DataTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeChanges SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogOfficeChanges";
        }
      }

      public static LogOfficeChangesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogOfficeChangesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogOfficeChangesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogOfficeChangesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogOfficeChangesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.Billing);
      }

      public static LogOfficeChangesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeChangesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogOfficeChangesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogOfficeChangesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogOfficeChangesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogOfficeChanges()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogOfficeChanges

    #region votelog.LogOfficeOfficialAddsDeletes

    public partial class LogOfficeOfficialAddsDeletesRow : DataRow
    {
      internal LogOfficeOfficialAddsDeletesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String AddOrDelete
      {
        get { return this["AddOrDelete"] as String; }
        set { if (value == null) this["AddOrDelete"] = DBNull.Value; else this["AddOrDelete"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }
    }

    [Serializable]
    public partial class LogOfficeOfficialAddsDeletesTable : TypedTableBase<LogOfficeOfficialAddsDeletesRow>
    {
      public LogOfficeOfficialAddsDeletesRow this[int index] { get { return (LogOfficeOfficialAddsDeletesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogOfficeOfficialAddsDeletesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogOfficeOfficialAddsDeletesTable(); }

      new public LogOfficeOfficialAddsDeletesRow NewRow() { return (LogOfficeOfficialAddsDeletesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogOfficeOfficialAddsDeletesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogOfficeOfficialAddsDeletesRow); }

      public void RemoveRow(LogOfficeOfficialAddsDeletesRow row) { this.Rows.Remove(row); }

      public LogOfficeOfficialAddsDeletesRow NewRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey)
      {
        LogOfficeOfficialAddsDeletesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeKey = officeKey;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey)
      {
        LogOfficeOfficialAddsDeletesRow row = NewRow(primaryKey, dateStamp, addOrDelete, userSecurity, userName, politicianKey, stateCode, countyCode, localCode, officeKey);
        AddRow(row);
      }

      public LogOfficeOfficialAddsDeletesRow NewRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey)
      {
        LogOfficeOfficialAddsDeletesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.AddOrDelete = addOrDelete;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.OfficeKey = officeKey;
        return row;
      }

      public void AddRow(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey)
      {
        LogOfficeOfficialAddsDeletesRow row = NewRow(dateStamp, addOrDelete, userSecurity, userName, politicianKey, stateCode, countyCode, localCode, officeKey);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn AddOrDeleteColumn { get { return this.Columns["AddOrDelete"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AddOrDelete", typeof(String));
        _column.MaxLength = 1;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogOfficeOfficialAddsDeletesTable() : this(ColumnSet.All) { }

      public LogOfficeOfficialAddsDeletesTable(ColumnSet columnSet)
      {
        this.TableName = "LogOfficeOfficialAddsDeletes";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogOfficeOfficialAddsDeletesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogOfficeOfficialAddsDeletes
    {
      public const string TableName = "LogOfficeOfficialAddsDeletes";

      public enum Column { PrimaryKey, DateStamp, AddOrDelete, UserSecurity, UserName, PoliticianKey, StateCode, CountyCode, LocalCode, OfficeKey }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.AddOrDelete, "AddOrDelete" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.OfficeKey, "OfficeKey" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeOfficialAddsDeletes (PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey) VALUES (@PrimaryKey,@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@PoliticianKey,@StateCode,@CountyCode,@LocalCode,@OfficeKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String addOrDelete, String userSecurity, String userName, String politicianKey, String stateCode, String countyCode, String localCode, String officeKey, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeOfficialAddsDeletes (DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey) VALUES (@DateStamp,@AddOrDelete,@UserSecurity,@UserName,@PoliticianKey,@StateCode,@CountyCode,@LocalCode,@OfficeKey)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "AddOrDelete", addOrDelete);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey FROM LogOfficeOfficialAddsDeletes";
        }
      }

      public static LogOfficeOfficialAddsDeletesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey FROM LogOfficeOfficialAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.All);
      }

      public static LogOfficeOfficialAddsDeletesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogOfficeOfficialAddsDeletesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogOfficeOfficialAddsDeletesTable FillTable(DbCommand command, LogOfficeOfficialAddsDeletesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogOfficeOfficialAddsDeletesTable table = new LogOfficeOfficialAddsDeletesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogOfficeOfficialAddsDeletesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogOfficeOfficialAddsDeletesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogOfficeOfficialAddsDeletesTable table, LogOfficeOfficialAddsDeletesTable.ColumnSet columnSet = LogOfficeOfficialAddsDeletesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string AddOrDeleteColumnName { get { return "AddOrDelete"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static int AddOrDeleteMaxLength { get { return 1; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetAddOrDeleteByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AddOrDelete FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeOfficialAddsDeletesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET AddOrDelete=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeOfficialAddsDeletes WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeOfficialAddsDeletesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,AddOrDelete,UserSecurity,UserName,PoliticianKey,StateCode,CountyCode,LocalCode,OfficeKey FROM LogOfficeOfficialAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAddOrDeleteByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET AddOrDelete=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialAddsDeletes SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeOfficialAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogOfficeOfficialAddsDeletes";
        }
      }

      public static LogOfficeOfficialAddsDeletesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialAddsDeletes";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogOfficeOfficialAddsDeletesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogOfficeOfficialAddsDeletesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogOfficeOfficialAddsDeletesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogOfficeOfficialAddsDeletesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialAddsDeletes WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.Billing);
      }

      public static LogOfficeOfficialAddsDeletesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialAddsDeletes WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeOfficialAddsDeletesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogOfficeOfficialAddsDeletesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogOfficeOfficialAddsDeletesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogOfficeOfficialAddsDeletesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogOfficeOfficialAddsDeletes()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogOfficeOfficialAddsDeletes

    #region votelog.LogOfficeOfficialChanges

    public partial class LogOfficeOfficialChangesRow : DataRow
    {
      internal LogOfficeOfficialChangesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogOfficeOfficialChangesTable : TypedTableBase<LogOfficeOfficialChangesRow>
    {
      public LogOfficeOfficialChangesRow this[int index] { get { return (LogOfficeOfficialChangesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogOfficeOfficialChangesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogOfficeOfficialChangesTable(); }

      new public LogOfficeOfficialChangesRow NewRow() { return (LogOfficeOfficialChangesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogOfficeOfficialChangesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogOfficeOfficialChangesRow); }

      public void RemoveRow(LogOfficeOfficialChangesRow row) { this.Rows.Remove(row); }

      public LogOfficeOfficialChangesRow NewRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeOfficialChangesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeOfficialChangesRow row = NewRow(primaryKey, dateStamp, userSecurity, userName, politicianKey, officeKey, stateCode, countyCode, localCode, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogOfficeOfficialChangesRow NewRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeOfficialChangesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo)
      {
        LogOfficeOfficialChangesRow row = NewRow(dateStamp, userSecurity, userName, politicianKey, officeKey, stateCode, countyCode, localCode, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogOfficeOfficialChangesTable() : this(ColumnSet.All) { }

      public LogOfficeOfficialChangesTable(ColumnSet columnSet)
      {
        this.TableName = "LogOfficeOfficialChanges";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogOfficeOfficialChangesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogOfficeOfficialChanges
    {
      public const string TableName = "LogOfficeOfficialChanges";

      public enum Column { PrimaryKey, DateStamp, UserSecurity, UserName, PoliticianKey, OfficeKey, StateCode, CountyCode, LocalCode, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeOfficialChanges (PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo) VALUES (@PrimaryKey,@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String officeKey, String stateCode, String countyCode, String localCode, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogOfficeOfficialChanges (DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogOfficeOfficialChanges";
        }
      }

      public static LogOfficeOfficialChangesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogOfficeOfficialChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.All);
      }

      public static LogOfficeOfficialChangesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogOfficeOfficialChangesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogOfficeOfficialChangesTable FillTable(DbCommand command, LogOfficeOfficialChangesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogOfficeOfficialChangesTable table = new LogOfficeOfficialChangesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogOfficeOfficialChangesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogOfficeOfficialChangesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogOfficeOfficialChangesTable table, LogOfficeOfficialChangesTable.ColumnSet columnSet = LogOfficeOfficialChangesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeOfficialChangesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataItem=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogOfficeOfficialChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogOfficeOfficialChanges WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogOfficeOfficialChangesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,OfficeKey,StateCode,CountyCode,LocalCode,DataItem,DataFrom,DataTo FROM LogOfficeOfficialChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataItem=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET DataTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogOfficeOfficialChanges SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogOfficeOfficialChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogOfficeOfficialChanges";
        }
      }

      public static LogOfficeOfficialChangesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogOfficeOfficialChangesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogOfficeOfficialChangesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogOfficeOfficialChangesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogOfficeOfficialChangesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.Billing);
      }

      public static LogOfficeOfficialChangesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogOfficeOfficialChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogOfficeOfficialChangesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogOfficeOfficialChangesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogOfficeOfficialChangesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogOfficeOfficialChangesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogOfficeOfficialChanges()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogOfficeOfficialChanges

    #region votelog.LogPoliticianAdds

    public partial class LogPoliticianAddsRow : DataRow
    {
      internal LogPoliticianAddsRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String Password
      {
        get { return this["Password"] as String; }
        set { if (value == null) this["Password"] = DBNull.Value; else this["Password"] = value; }
      }

      public String OfficeKey
      {
        get { return this["OfficeKey"] as String; }
        set { if (value == null) this["OfficeKey"] = DBNull.Value; else this["OfficeKey"] = value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String CountyCode
      {
        get { return this["CountyCode"] as String; }
        set { if (value == null) this["CountyCode"] = DBNull.Value; else this["CountyCode"] = value; }
      }

      public String LocalCode
      {
        get { return this["LocalCode"] as String; }
        set { if (value == null) this["LocalCode"] = DBNull.Value; else this["LocalCode"] = value; }
      }

      public String PoliticianName
      {
        get { return this["PoliticianName"] as String; }
        set { if (value == null) this["PoliticianName"] = DBNull.Value; else this["PoliticianName"] = value; }
      }

      public String FirstName
      {
        get { return this["FName"] as String; }
        set { if (value == null) this["FName"] = DBNull.Value; else this["FName"] = value; }
      }

      public String MiddleName
      {
        get { return this["MName"] as String; }
        set { if (value == null) this["MName"] = DBNull.Value; else this["MName"] = value; }
      }

      public String LastName
      {
        get { return this["LName"] as String; }
        set { if (value == null) this["LName"] = DBNull.Value; else this["LName"] = value; }
      }

      public String Suffix
      {
        get { return this["Suffix"] as String; }
        set { if (value == null) this["Suffix"] = DBNull.Value; else this["Suffix"] = value; }
      }

      public String Nickname
      {
        get { return this["Nickname"] as String; }
        set { if (value == null) this["Nickname"] = DBNull.Value; else this["Nickname"] = value; }
      }

      public String StateEmail
      {
        get { return this["StateEmailAddr"] as String; }
        set { if (value == null) this["StateEmailAddr"] = DBNull.Value; else this["StateEmailAddr"] = value; }
      }

      public String StateWebAddress
      {
        get { return this["StateWebAddr"] as String; }
        set { if (value == null) this["StateWebAddr"] = DBNull.Value; else this["StateWebAddr"] = value; }
      }

      public String StatePhone
      {
        get { return this["StatePhone"] as String; }
        set { if (value == null) this["StatePhone"] = DBNull.Value; else this["StatePhone"] = value; }
      }

      public String PartyKey
      {
        get { return this["PartyKey"] as String; }
        set { if (value == null) this["PartyKey"] = DBNull.Value; else this["PartyKey"] = value; }
      }

      public String StateAddress
      {
        get { return this["StateAddress"] as String; }
        set { if (value == null) this["StateAddress"] = DBNull.Value; else this["StateAddress"] = value; }
      }

      public String StateCityStateZip
      {
        get { return this["StateCityStateZip"] as String; }
        set { if (value == null) this["StateCityStateZip"] = DBNull.Value; else this["StateCityStateZip"] = value; }
      }
    }

    [Serializable]
    public partial class LogPoliticianAddsTable : TypedTableBase<LogPoliticianAddsRow>
    {
      public LogPoliticianAddsRow this[int index] { get { return (LogPoliticianAddsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogPoliticianAddsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogPoliticianAddsTable(); }

      new public LogPoliticianAddsRow NewRow() { return (LogPoliticianAddsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogPoliticianAddsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogPoliticianAddsRow); }

      public void RemoveRow(LogPoliticianAddsRow row) { this.Rows.Remove(row); }

      public LogPoliticianAddsRow NewRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip)
      {
        LogPoliticianAddsRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.Password = password;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.PoliticianName = politicianName;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.LastName = lastName;
        row.Suffix = suffix;
        row.Nickname = nickname;
        row.StateEmail = stateEmail;
        row.StateWebAddress = stateWebAddress;
        row.StatePhone = statePhone;
        row.PartyKey = partyKey;
        row.StateAddress = stateAddress;
        row.StateCityStateZip = stateCityStateZip;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip)
      {
        LogPoliticianAddsRow row = NewRow(primaryKey, dateStamp, userSecurity, userName, politicianKey, password, officeKey, stateCode, countyCode, localCode, politicianName, firstName, middleName, lastName, suffix, nickname, stateEmail, stateWebAddress, statePhone, partyKey, stateAddress, stateCityStateZip);
        AddRow(row);
      }

      public LogPoliticianAddsRow NewRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip)
      {
        LogPoliticianAddsRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.Password = password;
        row.OfficeKey = officeKey;
        row.StateCode = stateCode;
        row.CountyCode = countyCode;
        row.LocalCode = localCode;
        row.PoliticianName = politicianName;
        row.FirstName = firstName;
        row.MiddleName = middleName;
        row.LastName = lastName;
        row.Suffix = suffix;
        row.Nickname = nickname;
        row.StateEmail = stateEmail;
        row.StateWebAddress = stateWebAddress;
        row.StatePhone = statePhone;
        row.PartyKey = partyKey;
        row.StateAddress = stateAddress;
        row.StateCityStateZip = stateCityStateZip;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip)
      {
        LogPoliticianAddsRow row = NewRow(dateStamp, userSecurity, userName, politicianKey, password, officeKey, stateCode, countyCode, localCode, politicianName, firstName, middleName, lastName, suffix, nickname, stateEmail, stateWebAddress, statePhone, partyKey, stateAddress, stateCityStateZip);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn PasswordColumn { get { return this.Columns["Password"]; } }

      public DataColumn OfficeKeyColumn { get { return this.Columns["OfficeKey"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn CountyCodeColumn { get { return this.Columns["CountyCode"]; } }

      public DataColumn LocalCodeColumn { get { return this.Columns["LocalCode"]; } }

      public DataColumn PoliticianNameColumn { get { return this.Columns["PoliticianName"]; } }

      public DataColumn FirstNameColumn { get { return this.Columns["FName"]; } }

      public DataColumn MiddleNameColumn { get { return this.Columns["MName"]; } }

      public DataColumn LastNameColumn { get { return this.Columns["LName"]; } }

      public DataColumn SuffixColumn { get { return this.Columns["Suffix"]; } }

      public DataColumn NicknameColumn { get { return this.Columns["Nickname"]; } }

      public DataColumn StateEmailColumn { get { return this.Columns["StateEmailAddr"]; } }

      public DataColumn StateWebAddressColumn { get { return this.Columns["StateWebAddr"]; } }

      public DataColumn StatePhoneColumn { get { return this.Columns["StatePhone"]; } }

      public DataColumn PartyKeyColumn { get { return this.Columns["PartyKey"]; } }

      public DataColumn StateAddressColumn { get { return this.Columns["StateAddress"]; } }

      public DataColumn StateCityStateZipColumn { get { return this.Columns["StateCityStateZip"]; } }

      public enum ColumnSet { All, Billing, StateCode }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Password", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("OfficeKey", typeof(String));
        _column.MaxLength = 150;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("CountyCode", typeof(String));
        _column.MaxLength = 3;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LocalCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianName", typeof(String));
        _column.MaxLength = 350;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("FName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("MName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LName", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Suffix", typeof(String));
        _column.MaxLength = 20;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Nickname", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateEmailAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateWebAddr", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StatePhone", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PartyKey", typeof(String));
        _column.MaxLength = 5;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateAddress", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("StateCityStateZip", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitStateCodeColumns()
      {
        DataColumn _column;
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogPoliticianAddsTable() : this(ColumnSet.All) { }

      public LogPoliticianAddsTable(ColumnSet columnSet)
      {
        this.TableName = "LogPoliticianAdds";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;

          case ColumnSet.StateCode:
            InitStateCodeColumns();
            break;
        }
      }

      protected LogPoliticianAddsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogPoliticianAdds
    {
      public const string TableName = "LogPoliticianAdds";

      public enum Column { PrimaryKey, DateStamp, UserSecurity, UserName, PoliticianKey, Password, OfficeKey, StateCode, CountyCode, LocalCode, PoliticianName, FirstName, MiddleName, LastName, Suffix, Nickname, StateEmail, StateWebAddress, StatePhone, PartyKey, StateAddress, StateCityStateZip }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.Password, "Password" },
        { Column.OfficeKey, "OfficeKey" },
        { Column.StateCode, "StateCode" },
        { Column.CountyCode, "CountyCode" },
        { Column.LocalCode, "LocalCode" },
        { Column.PoliticianName, "PoliticianName" },
        { Column.FirstName, "FName" },
        { Column.MiddleName, "MName" },
        { Column.LastName, "LName" },
        { Column.Suffix, "Suffix" },
        { Column.Nickname, "Nickname" },
        { Column.StateEmail, "StateEmailAddr" },
        { Column.StateWebAddress, "StateWebAddr" },
        { Column.StatePhone, "StatePhone" },
        { Column.PartyKey, "PartyKey" },
        { Column.StateAddress, "StateAddress" },
        { Column.StateCityStateZip, "StateCityStateZip" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAdds";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianAdds (PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip) VALUES (@PrimaryKey,@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@Password,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@PoliticianName,@FirstName,@MiddleName,@LastName,@Suffix,@Nickname,@StateEmail,@StateWebAddress,@StatePhone,@PartyKey,@StateAddress,@StateCityStateZip)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "Password", password);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianName", politicianName);
        VoteLogDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteLogDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteLogDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteLogDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteLogDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteLogDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteLogDb.AddCommandParameter(cmd, "StateWebAddress", stateWebAddress);
        VoteLogDb.AddCommandParameter(cmd, "StatePhone", statePhone);
        VoteLogDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteLogDb.AddCommandParameter(cmd, "StateAddress", stateAddress);
        VoteLogDb.AddCommandParameter(cmd, "StateCityStateZip", stateCityStateZip);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String password, String officeKey, String stateCode, String countyCode, String localCode, String politicianName, String firstName, String middleName, String lastName, String suffix, String nickname, String stateEmail, String stateWebAddress, String statePhone, String partyKey, String stateAddress, String stateCityStateZip, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianAdds (DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip) VALUES (@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@Password,@OfficeKey,@StateCode,@CountyCode,@LocalCode,@PoliticianName,@FirstName,@MiddleName,@LastName,@Suffix,@Nickname,@StateEmail,@StateWebAddress,@StatePhone,@PartyKey,@StateAddress,@StateCityStateZip)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "Password", password);
        VoteLogDb.AddCommandParameter(cmd, "OfficeKey", officeKey);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "CountyCode", countyCode);
        VoteLogDb.AddCommandParameter(cmd, "LocalCode", localCode);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianName", politicianName);
        VoteLogDb.AddCommandParameter(cmd, "FirstName", firstName);
        VoteLogDb.AddCommandParameter(cmd, "MiddleName", middleName);
        VoteLogDb.AddCommandParameter(cmd, "LastName", lastName);
        VoteLogDb.AddCommandParameter(cmd, "Suffix", suffix);
        VoteLogDb.AddCommandParameter(cmd, "Nickname", nickname);
        VoteLogDb.AddCommandParameter(cmd, "StateEmail", stateEmail);
        VoteLogDb.AddCommandParameter(cmd, "StateWebAddress", stateWebAddress);
        VoteLogDb.AddCommandParameter(cmd, "StatePhone", statePhone);
        VoteLogDb.AddCommandParameter(cmd, "PartyKey", partyKey);
        VoteLogDb.AddCommandParameter(cmd, "StateAddress", stateAddress);
        VoteLogDb.AddCommandParameter(cmd, "StateCityStateZip", stateCityStateZip);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip FROM LogPoliticianAdds";
        }
      }

      public static LogPoliticianAddsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip FROM LogPoliticianAdds";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.All);
      }

      public static LogPoliticianAddsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogPoliticianAddsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogPoliticianAddsTable FillTable(DbCommand command, LogPoliticianAddsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogPoliticianAddsTable table = new LogPoliticianAddsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogPoliticianAddsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogPoliticianAddsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogPoliticianAddsTable table, LogPoliticianAddsTable.ColumnSet columnSet = LogPoliticianAddsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string PasswordColumnName { get { return "Password"; } }

      public static string OfficeKeyColumnName { get { return "OfficeKey"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string CountyCodeColumnName { get { return "CountyCode"; } }

      public static string LocalCodeColumnName { get { return "LocalCode"; } }

      public static string PoliticianNameColumnName { get { return "PoliticianName"; } }

      public static string FirstNameColumnName { get { return "FName"; } }

      public static string MiddleNameColumnName { get { return "MName"; } }

      public static string LastNameColumnName { get { return "LName"; } }

      public static string SuffixColumnName { get { return "Suffix"; } }

      public static string NicknameColumnName { get { return "Nickname"; } }

      public static string StateEmailColumnName { get { return "StateEmailAddr"; } }

      public static string StateWebAddressColumnName { get { return "StateWebAddr"; } }

      public static string StatePhoneColumnName { get { return "StatePhone"; } }

      public static string PartyKeyColumnName { get { return "PartyKey"; } }

      public static string StateAddressColumnName { get { return "StateAddress"; } }

      public static string StateCityStateZipColumnName { get { return "StateCityStateZip"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int PasswordMaxLength { get { return 50; } }

      public static int OfficeKeyMaxLength { get { return 150; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int CountyCodeMaxLength { get { return 3; } }

      public static int LocalCodeMaxLength { get { return 2; } }

      public static int PoliticianNameMaxLength { get { return 350; } }

      public static int FirstNameMaxLength { get { return 100; } }

      public static int MiddleNameMaxLength { get { return 100; } }

      public static int LastNameMaxLength { get { return 100; } }

      public static int SuffixMaxLength { get { return 20; } }

      public static int NicknameMaxLength { get { return 100; } }

      public static int StateEmailMaxLength { get { return int.MaxValue; } }

      public static int StateWebAddressMaxLength { get { return int.MaxValue; } }

      public static int StatePhoneMaxLength { get { return int.MaxValue; } }

      public static int PartyKeyMaxLength { get { return 5; } }

      public static int StateAddressMaxLength { get { return int.MaxValue; } }

      public static int StateCityStateZipMaxLength { get { return int.MaxValue; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAdds WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAdds WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAddsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip FROM LogPoliticianAdds WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Password=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET OfficeKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET CountyCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LocalCode=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET FName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET MName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Suffix=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Nickname=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateEmailAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateWebAddr=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StatePhone=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PartyKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateAddress=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCityStateZip=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAdds WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPasswordByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Password FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetOfficeKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT OfficeKey FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CountyCode FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLocalCodeByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LocalCode FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetFirstNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT FName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetMiddleNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT MName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetLastNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT LName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetSuffixByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Suffix FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetNicknameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Nickname FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateEmailByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateEmailAddr FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateWebAddressByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateWebAddr FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStatePhoneByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StatePhone FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPartyKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PartyKey FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateAddressByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateAddress FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateCityStateZipByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCityStateZip FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAddsTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Password=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET OfficeKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET CountyCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LocalCode=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET FName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET MName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Suffix=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Nickname=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateEmailAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateWebAddr=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StatePhone=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PartyKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateAddress=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCityStateZip=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAdds WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAdds WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAddsTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,Password,OfficeKey,StateCode,CountyCode,LocalCode,PoliticianName,FName,MName,LName,Suffix,Nickname,StateEmailAddr,StateWebAddr,StatePhone,PartyKey,StateAddress,StateCityStateZip FROM LogPoliticianAdds WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePasswordByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Password=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateOfficeKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET OfficeKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET CountyCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLocalCodeByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LocalCode=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PoliticianName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateFirstNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET FName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateMiddleNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET MName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET LName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSuffixByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Suffix=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateNicknameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET Nickname=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateEmailByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateEmailAddr=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateWebAddressByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateWebAddr=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStatePhoneByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StatePhone=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePartyKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET PartyKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateAddressByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateAddress=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCityStateZipByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET StateCityStateZip=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAdds SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAdds WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogPoliticianAdds";
        }
      }

      public static LogPoliticianAddsTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAdds";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogPoliticianAddsTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogPoliticianAddsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticianAddsTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticianAddsTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.Billing);
      }

      public static LogPoliticianAddsTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAdds WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.Billing);
      }

      public static string SelectStateCodeCommandText
      {
        get
        {
          return "SELECT StateCode FROM LogPoliticianAdds";
        }
      }

      public static LogPoliticianAddsTable GetAllStateCodeData(int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode FROM LogPoliticianAdds";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.StateCode);
      }

      public static void UpdateStateCode(LogPoliticianAddsTable table)
      {
        UpdateStateCode(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateStateCode(LogPoliticianAddsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticianAddsTable.ColumnSet.StateCode, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticianAddsTable GetStateCodeDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode FROM LogPoliticianAdds WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.StateCode);
      }

      public static LogPoliticianAddsTable GetStateCodeDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT StateCode FROM LogPoliticianAdds WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianAddsTable.ColumnSet.StateCode);
      }

      public static string GetSelectCommandText(LogPoliticianAddsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogPoliticianAddsTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogPoliticianAddsTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          case LogPoliticianAddsTable.ColumnSet.StateCode:
            return SelectStateCodeCommandText;

          default:
            return null;
        }
      }

      static LogPoliticianAdds()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogPoliticianAdds

    #region votelog.LogPoliticianAnswers

    public partial class LogPoliticianAnswersRow : DataRow
    {
      internal LogPoliticianAnswersRow(DataRowBuilder rb) : base(rb) {}

      public Int32 Id
      {
        get { return (Int32) this["Id"]; }
        set { this["Id"] = value; }
      }

      public String Source
      {
        get { return this["Source"] as String; }
        set { if (value == null) this["Source"] = DBNull.Value; else this["Source"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String IssueKey
      {
        get { return this["IssueKey"] as String; }
        set { if (value == null) this["IssueKey"] = DBNull.Value; else this["IssueKey"] = value; }
      }

      public String QuestionKey
      {
        get { return this["QuestionKey"] as String; }
        set { if (value == null) this["QuestionKey"] = DBNull.Value; else this["QuestionKey"] = value; }
      }

      public String Question
      {
        get { return this["Question"] as String; }
        set { if (value == null) this["Question"] = DBNull.Value; else this["Question"] = value; }
      }

      public String AnswerFrom
      {
        get { return this["AnswerFrom"] as String; }
        set { if (value == null) this["AnswerFrom"] = DBNull.Value; else this["AnswerFrom"] = value; }
      }

      public String AnswerTo
      {
        get { return this["AnswerTo"] as String; }
        set { if (value == null) this["AnswerTo"] = DBNull.Value; else this["AnswerTo"] = value; }
      }

      public String YouTubeUrlFrom
      {
        get { return this["YouTubeUrlFrom"] as String; }
        set { if (value == null) this["YouTubeUrlFrom"] = DBNull.Value; else this["YouTubeUrlFrom"] = value; }
      }

      public String YouTubeUrlTo
      {
        get { return this["YouTubeUrlTo"] as String; }
        set { if (value == null) this["YouTubeUrlTo"] = DBNull.Value; else this["YouTubeUrlTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogPoliticianAnswersTable : TypedTableBase<LogPoliticianAnswersRow>
    {
      public LogPoliticianAnswersRow this[int index] { get { return (LogPoliticianAnswersRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogPoliticianAnswersRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogPoliticianAnswersTable(); }

      new public LogPoliticianAnswersRow NewRow() { return (LogPoliticianAnswersRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogPoliticianAnswersRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogPoliticianAnswersRow); }

      public void RemoveRow(LogPoliticianAnswersRow row) { this.Rows.Remove(row); }

      public LogPoliticianAnswersRow NewRow(Int32 id, String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo)
      {
        LogPoliticianAnswersRow row = NewRow();
        row.Id = id;
        row.Source = source;
        row.DateStamp = dateStamp;
        row.PoliticianKey = politicianKey;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.IssueKey = issueKey;
        row.QuestionKey = questionKey;
        row.Question = question;
        row.AnswerFrom = answerFrom;
        row.AnswerTo = answerTo;
        row.YouTubeUrlFrom = youTubeUrlFrom;
        row.YouTubeUrlTo = youTubeUrlTo;
        return row;
      }

      public void AddRow(Int32 id, String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo)
      {
        LogPoliticianAnswersRow row = NewRow(id, source, dateStamp, politicianKey, userSecurity, userName, issueKey, questionKey, question, answerFrom, answerTo, youTubeUrlFrom, youTubeUrlTo);
        AddRow(row);
      }

      public LogPoliticianAnswersRow NewRow(String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo)
      {
        LogPoliticianAnswersRow row = NewRow();
        row.Source = source;
        row.DateStamp = dateStamp;
        row.PoliticianKey = politicianKey;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.IssueKey = issueKey;
        row.QuestionKey = questionKey;
        row.Question = question;
        row.AnswerFrom = answerFrom;
        row.AnswerTo = answerTo;
        row.YouTubeUrlFrom = youTubeUrlFrom;
        row.YouTubeUrlTo = youTubeUrlTo;
        return row;
      }

      public void AddRow(String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo)
      {
        LogPoliticianAnswersRow row = NewRow(source, dateStamp, politicianKey, userSecurity, userName, issueKey, questionKey, question, answerFrom, answerTo, youTubeUrlFrom, youTubeUrlTo);
        AddRow(row);
      }

      public DataColumn IdColumn { get { return this.Columns["Id"]; } }

      public DataColumn SourceColumn { get { return this.Columns["Source"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn IssueKeyColumn { get { return this.Columns["IssueKey"]; } }

      public DataColumn QuestionKeyColumn { get { return this.Columns["QuestionKey"]; } }

      public DataColumn QuestionColumn { get { return this.Columns["Question"]; } }

      public DataColumn AnswerFromColumn { get { return this.Columns["AnswerFrom"]; } }

      public DataColumn AnswerToColumn { get { return this.Columns["AnswerTo"]; } }

      public DataColumn YouTubeUrlFromColumn { get { return this.Columns["YouTubeUrlFrom"]; } }

      public DataColumn YouTubeUrlToColumn { get { return this.Columns["YouTubeUrlTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Id", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("Source", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 12;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("IssueKey", typeof(String));
        _column.MaxLength = 100;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("QuestionKey", typeof(String));
        _column.MaxLength = 225;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("Question", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AnswerFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("AnswerTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrlFrom", typeof(String));
        base.Columns.Add(_column);
        _column = new DataColumn("YouTubeUrlTo", typeof(String));
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogPoliticianAnswersTable() : this(ColumnSet.All) { }

      public LogPoliticianAnswersTable(ColumnSet columnSet)
      {
        this.TableName = "LogPoliticianAnswers";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogPoliticianAnswersTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogPoliticianAnswers
    {
      public const string TableName = "LogPoliticianAnswers";

      public enum Column { Id, Source, DateStamp, PoliticianKey, UserSecurity, UserName, IssueKey, QuestionKey, Question, AnswerFrom, AnswerTo, YouTubeUrlFrom, YouTubeUrlTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Id, "Id" },
        { Column.Source, "Source" },
        { Column.DateStamp, "DateStamp" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.IssueKey, "IssueKey" },
        { Column.QuestionKey, "QuestionKey" },
        { Column.Question, "Question" },
        { Column.AnswerFrom, "AnswerFrom" },
        { Column.AnswerTo, "AnswerTo" },
        { Column.YouTubeUrlFrom, "YouTubeUrlFrom" },
        { Column.YouTubeUrlTo, "YouTubeUrlTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAnswers";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 id, String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianAnswers (Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo) VALUES (@Id,@Source,@DateStamp,@PoliticianKey,@UserSecurity,@UserName,@IssueKey,@QuestionKey,@Question,@AnswerFrom,@AnswerTo,@YouTubeUrlFrom,@YouTubeUrlTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "Question", question);
        VoteLogDb.AddCommandParameter(cmd, "AnswerFrom", answerFrom);
        VoteLogDb.AddCommandParameter(cmd, "AnswerTo", answerTo);
        VoteLogDb.AddCommandParameter(cmd, "YouTubeUrlFrom", youTubeUrlFrom);
        VoteLogDb.AddCommandParameter(cmd, "YouTubeUrlTo", youTubeUrlTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String source, DateTime dateStamp, String politicianKey, String userSecurity, String userName, String issueKey, String questionKey, String question, String answerFrom, String answerTo, String youTubeUrlFrom, String youTubeUrlTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianAnswers (Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo) VALUES (@Source,@DateStamp,@PoliticianKey,@UserSecurity,@UserName,@IssueKey,@QuestionKey,@Question,@AnswerFrom,@AnswerTo,@YouTubeUrlFrom,@YouTubeUrlTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Source", source);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "IssueKey", issueKey);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "Question", question);
        VoteLogDb.AddCommandParameter(cmd, "AnswerFrom", answerFrom);
        VoteLogDb.AddCommandParameter(cmd, "AnswerTo", answerTo);
        VoteLogDb.AddCommandParameter(cmd, "YouTubeUrlFrom", youTubeUrlFrom);
        VoteLogDb.AddCommandParameter(cmd, "YouTubeUrlTo", youTubeUrlTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers";
        }
      }

      public static LogPoliticianAnswersTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.All);
      }

      public static LogPoliticianAnswersTable FillTable(DbCommand command)
      {
        return FillTable(command, LogPoliticianAnswersTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogPoliticianAnswersTable FillTable(DbCommand command, LogPoliticianAnswersTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogPoliticianAnswersTable table = new LogPoliticianAnswersTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogPoliticianAnswersTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogPoliticianAnswersTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogPoliticianAnswersTable table, LogPoliticianAnswersTable.ColumnSet columnSet = LogPoliticianAnswersTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string IdColumnName { get { return "Id"; } }

      public static string SourceColumnName { get { return "Source"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string IssueKeyColumnName { get { return "IssueKey"; } }

      public static string QuestionKeyColumnName { get { return "QuestionKey"; } }

      public static string QuestionColumnName { get { return "Question"; } }

      public static string AnswerFromColumnName { get { return "AnswerFrom"; } }

      public static string AnswerToColumnName { get { return "AnswerTo"; } }

      public static string YouTubeUrlFromColumnName { get { return "YouTubeUrlFrom"; } }

      public static string YouTubeUrlToColumnName { get { return "YouTubeUrlTo"; } }

      public static int SourceMaxLength { get { return int.MaxValue; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int UserSecurityMaxLength { get { return 12; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int IssueKeyMaxLength { get { return 100; } }

      public static int QuestionKeyMaxLength { get { return 225; } }

      public static int QuestionMaxLength { get { return int.MaxValue; } }

      public static int AnswerFromMaxLength { get { return int.MaxValue; } }

      public static int AnswerToMaxLength { get { return int.MaxValue; } }

      public static int YouTubeUrlFromMaxLength { get { return int.MaxValue; } }

      public static int YouTubeUrlToMaxLength { get { return int.MaxValue; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAnswers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAnswers WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAnswersTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.All);
      }

      public static int UpdateIdByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Id=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Source=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET IssueKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET QuestionKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Question=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerFromByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerFrom=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerToByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerTo=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlFromByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlFrom=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlToByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlTo=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAnswers WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAnswers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByQuestionKey(Column _column, String questionKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAnswers WHERE QuestionKey=@QuestionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAnswersTable GetDataByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.All);
      }

      public static int UpdateIdByQuestionKey(Int32 newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Id=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Source=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByQuestionKey(DateTime newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET DateStamp=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET PoliticianKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserSecurity=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserName=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET IssueKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET QuestionKey=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Question=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerFromByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerFrom=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerToByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerTo=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlFromByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlFrom=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlToByQuestionKey(String newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlTo=@newValue WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByQuestionKey(Column _column, object newValue, String questionKey)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET {0}=@newValue WHERE QuestionKey=@QuestionKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByQuestionKey(String questionKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAnswers WHERE QuestionKey=@QuestionKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "QuestionKey", questionKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool IdExists(Int32 id)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetSourceById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Source FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetDateStampById(Int32 id)
      {
        return _GetDateStampById(id, null);
      }

      public static DateTime GetDateStampById(Int32 id, DateTime defaultValue)
      {
        return _GetDateStampById(id, defaultValue).Value;
      }

      private static DateTime? _GetDateStampById(Int32 id, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetPoliticianKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserSecurityById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetIssueKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT IssueKey FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestionKeyById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT QuestionKey FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetQuestionById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Question FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAnswerFromById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AnswerFrom FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetAnswerToById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT AnswerTo FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeUrlFromById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeUrlFrom FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetYouTubeUrlToById(Int32 id, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT YouTubeUrlTo FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnById(Column _column, Int32 id)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAnswers WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAnswersTable GetDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.All);
      }

      public static int UpdateIdById(Int32 newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Id=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Source=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampById(DateTime newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET DateStamp=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET PoliticianKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserSecurity=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserName=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET IssueKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET QuestionKey=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Question=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerFromById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerFrom=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerToById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerTo=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlFromById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlFrom=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlToById(String newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlTo=@newValue WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnById(Column _column, object newValue, Int32 id)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET {0}=@newValue WHERE Id=@Id";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianAnswers WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianAnswers WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianAnswersTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT Id,Source,DateStamp,PoliticianKey,UserSecurity,UserName,IssueKey,QuestionKey,Question,AnswerFrom,AnswerTo,YouTubeUrlFrom,YouTubeUrlTo FROM LogPoliticianAnswers WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.All);
      }

      public static int UpdateIdByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Id=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSourceByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Source=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateIssueKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET IssueKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET QuestionKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateQuestionByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET Question=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateAnswerToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET AnswerTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateYouTubeUrlToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET YouTubeUrlTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianAnswers SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianAnswers WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogPoliticianAnswers";
        }
      }

      public static LogPoliticianAnswersTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAnswers";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogPoliticianAnswersTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogPoliticianAnswersTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticianAnswersTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticianAnswersTable GetBillingDataById(Int32 id, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAnswers WHERE Id=@Id";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Id", id);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.Billing);
      }

      public static LogPoliticianAnswersTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianAnswers WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianAnswersTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogPoliticianAnswersTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogPoliticianAnswersTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogPoliticianAnswersTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogPoliticianAnswers()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogPoliticianAnswers

    #region votelog.LogPoliticianChanges

    public partial class LogPoliticianChangesRow : DataRow
    {
      internal LogPoliticianChangesRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public DateTime DateStamp
      {
        get { return (DateTime) this["DateStamp"]; }
        set { this["DateStamp"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public String DataItem
      {
        get { return this["DataItem"] as String; }
        set { if (value == null) this["DataItem"] = DBNull.Value; else this["DataItem"] = value; }
      }

      public String DataFrom
      {
        get { return this["DataFrom"] as String; }
        set { if (value == null) this["DataFrom"] = DBNull.Value; else this["DataFrom"] = value; }
      }

      public String DataTo
      {
        get { return this["DataTo"] as String; }
        set { if (value == null) this["DataTo"] = DBNull.Value; else this["DataTo"] = value; }
      }
    }

    [Serializable]
    public partial class LogPoliticianChangesTable : TypedTableBase<LogPoliticianChangesRow>
    {
      public LogPoliticianChangesRow this[int index] { get { return (LogPoliticianChangesRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogPoliticianChangesRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogPoliticianChangesTable(); }

      new public LogPoliticianChangesRow NewRow() { return (LogPoliticianChangesRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogPoliticianChangesRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogPoliticianChangesRow); }

      public void RemoveRow(LogPoliticianChangesRow row) { this.Rows.Remove(row); }

      public LogPoliticianChangesRow NewRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo)
      {
        LogPoliticianChangesRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo)
      {
        LogPoliticianChangesRow row = NewRow(primaryKey, dateStamp, userSecurity, userName, politicianKey, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public LogPoliticianChangesRow NewRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo)
      {
        LogPoliticianChangesRow row = NewRow();
        row.DateStamp = dateStamp;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        row.PoliticianKey = politicianKey;
        row.DataItem = dataItem;
        row.DataFrom = dataFrom;
        row.DataTo = dataTo;
        return row;
      }

      public void AddRow(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo)
      {
        LogPoliticianChangesRow row = NewRow(dateStamp, userSecurity, userName, politicianKey, dataItem, dataFrom, dataTo);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn DateStampColumn { get { return this.Columns["DateStamp"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn DataItemColumn { get { return this.Columns["DataItem"]; } }

      public DataColumn DataFromColumn { get { return this.Columns["DataFrom"]; } }

      public DataColumn DataToColumn { get { return this.Columns["DataTo"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataItem", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataFrom", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("DataTo", typeof(String));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("DateStamp", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogPoliticianChangesTable() : this(ColumnSet.All) { }

      public LogPoliticianChangesTable(ColumnSet columnSet)
      {
        this.TableName = "LogPoliticianChanges";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogPoliticianChangesTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogPoliticianChanges
    {
      public const string TableName = "LogPoliticianChanges";

      public enum Column { PrimaryKey, DateStamp, UserSecurity, UserName, PoliticianKey, DataItem, DataFrom, DataTo }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.DateStamp, "DateStamp" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.DataItem, "DataItem" },
        { Column.DataFrom, "DataFrom" },
        { Column.DataTo, "DataTo" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianChanges (PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo) VALUES (@PrimaryKey,@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(DateTime dateStamp, String userSecurity, String userName, String politicianKey, String dataItem, String dataFrom, String dataTo, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticianChanges (DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo) VALUES (@DateStamp,@UserSecurity,@UserName,@PoliticianKey,@DataItem,@DataFrom,@DataTo)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "DateStamp", dateStamp);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "DataItem", dataItem);
        VoteLogDb.AddCommandParameter(cmd, "DataFrom", dataFrom);
        VoteLogDb.AddCommandParameter(cmd, "DataTo", dataTo);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo FROM LogPoliticianChanges";
        }
      }

      public static LogPoliticianChangesTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo FROM LogPoliticianChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.All);
      }

      public static LogPoliticianChangesTable FillTable(DbCommand command)
      {
        return FillTable(command, LogPoliticianChangesTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogPoliticianChangesTable FillTable(DbCommand command, LogPoliticianChangesTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogPoliticianChangesTable table = new LogPoliticianChangesTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogPoliticianChangesTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogPoliticianChangesTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogPoliticianChangesTable table, LogPoliticianChangesTable.ColumnSet columnSet = LogPoliticianChangesTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string DateStampColumnName { get { return "DateStamp"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string DataItemColumnName { get { return "DataItem"; } }

      public static string DataFromColumnName { get { return "DataFrom"; } }

      public static string DataToColumnName { get { return "DataTo"; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int DataItemMaxLength { get { return int.MaxValue; } }

      public static int DataFromMaxLength { get { return int.MaxValue; } }

      public static int DataToMaxLength { get { return int.MaxValue; } }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianChanges WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianChanges WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianChangesTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo FROM LogPoliticianChanges WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DateStamp=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataItem=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataFrom=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataTo=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianChanges WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static DateTime? GetDateStampByPrimaryKey(Int32 primaryKey)
      {
        return _GetDateStampByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetDateStampByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetDateStampByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetDateStampByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT DateStamp FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataItemByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataItem FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataFromByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataFrom FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetDataToByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT DataTo FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianChangesTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DateStamp=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataItem=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataFrom=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataTo=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByUserName(String userName, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticianChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByUserName(Column _column, String userName)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticianChanges WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticianChangesTable GetDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,DateStamp,UserSecurity,UserName,PoliticianKey,DataItem,DataFrom,DataTo FROM LogPoliticianChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByUserName(Int32 newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PrimaryKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDateStampByUserName(DateTime newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DateStamp=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserSecurity=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET UserName=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET PoliticianKey=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataItemByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataItem=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataFromByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataFrom=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateDataToByUserName(String newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET DataTo=@newValue WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByUserName(Column _column, object newValue, String userName)
      {
        string cmdText = "UPDATE LogPoliticianChanges SET {0}=@newValue WHERE UserName=@UserName";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticianChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT DateStamp,UserName FROM LogPoliticianChanges";
        }
      }

      public static LogPoliticianChangesTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianChanges";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogPoliticianChangesTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogPoliticianChangesTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticianChangesTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticianChangesTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianChanges WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.Billing);
      }

      public static LogPoliticianChangesTable GetBillingDataByUserName(String userName, int commandTimeout = -1)
      {
        string cmdText = "SELECT DateStamp,UserName FROM LogPoliticianChanges WHERE UserName=@UserName";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return FillTable(cmd, LogPoliticianChangesTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogPoliticianChangesTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogPoliticianChangesTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogPoliticianChangesTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogPoliticianChanges()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogPoliticianChanges

    #region votelog.LogPoliticiansImagesHeadshot

    public partial class LogPoliticiansImagesHeadshotRow : DataRow
    {
      internal LogPoliticiansImagesHeadshotRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] HeadshotOriginal
      {
        get { return this["HeadshotOriginal"] as Byte[]; }
        set { if (value == null) this["HeadshotOriginal"] = DBNull.Value; else this["HeadshotOriginal"] = value; }
      }

      public DateTime HeadshotDate
      {
        get { return (DateTime) this["HeadshotDate"]; }
        set { this["HeadshotDate"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class LogPoliticiansImagesHeadshotTable : TypedTableBase<LogPoliticiansImagesHeadshotRow>
    {
      public LogPoliticiansImagesHeadshotRow this[int index] { get { return (LogPoliticiansImagesHeadshotRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogPoliticiansImagesHeadshotRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogPoliticiansImagesHeadshotTable(); }

      new public LogPoliticiansImagesHeadshotRow NewRow() { return (LogPoliticiansImagesHeadshotRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogPoliticiansImagesHeadshotRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogPoliticiansImagesHeadshotRow); }

      public void RemoveRow(LogPoliticiansImagesHeadshotRow row) { this.Rows.Remove(row); }

      public LogPoliticiansImagesHeadshotRow NewRow(Int32 primaryKey, String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesHeadshotRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.PoliticianKey = politicianKey;
        row.HeadshotOriginal = headshotOriginal;
        row.HeadshotDate = headshotDate;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(Int32 primaryKey, String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesHeadshotRow row = NewRow(primaryKey, politicianKey, headshotOriginal, headshotDate, userSecurity, userName);
        AddRow(row);
      }

      public LogPoliticiansImagesHeadshotRow NewRow(String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesHeadshotRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.HeadshotOriginal = headshotOriginal;
        row.HeadshotDate = headshotDate;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesHeadshotRow row = NewRow(politicianKey, headshotOriginal, headshotDate, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn HeadshotOriginalColumn { get { return this.Columns["HeadshotOriginal"]; } }

      public DataColumn HeadshotDateColumn { get { return this.Columns["HeadshotDate"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All, Billing }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotOriginal", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogPoliticiansImagesHeadshotTable() : this(ColumnSet.All) { }

      public LogPoliticiansImagesHeadshotTable(ColumnSet columnSet)
      {
        this.TableName = "LogPoliticiansImagesHeadshot";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;
        }
      }

      protected LogPoliticiansImagesHeadshotTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogPoliticiansImagesHeadshot
    {
      public const string TableName = "LogPoliticiansImagesHeadshot";

      public enum Column { PrimaryKey, PoliticianKey, HeadshotOriginal, HeadshotDate, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.HeadshotOriginal, "HeadshotOriginal" },
        { Column.HeadshotDate, "HeadshotDate" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesHeadshot";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticiansImagesHeadshot (PrimaryKey,PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName) VALUES (@PrimaryKey,@PoliticianKey,@HeadshotOriginal,@HeadshotDate,@UserSecurity,@UserName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "HeadshotOriginal", headshotOriginal);
        VoteLogDb.AddCommandParameter(cmd, "HeadshotDate", headshotDate);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String politicianKey, Byte[] headshotOriginal, DateTime headshotDate, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticiansImagesHeadshot (PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName) VALUES (@PoliticianKey,@HeadshotOriginal,@HeadshotDate,@UserSecurity,@UserName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "HeadshotOriginal", headshotOriginal);
        VoteLogDb.AddCommandParameter(cmd, "HeadshotDate", headshotDate);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName FROM LogPoliticiansImagesHeadshot";
        }
      }

      public static LogPoliticiansImagesHeadshotTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName FROM LogPoliticiansImagesHeadshot";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.All);
      }

      public static LogPoliticiansImagesHeadshotTable FillTable(DbCommand command)
      {
        return FillTable(command, LogPoliticiansImagesHeadshotTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogPoliticiansImagesHeadshotTable FillTable(DbCommand command, LogPoliticiansImagesHeadshotTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogPoliticiansImagesHeadshotTable table = new LogPoliticiansImagesHeadshotTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogPoliticiansImagesHeadshotTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogPoliticiansImagesHeadshotTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogPoliticiansImagesHeadshotTable table, LogPoliticiansImagesHeadshotTable.ColumnSet columnSet = LogPoliticiansImagesHeadshotTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string HeadshotOriginalColumnName { get { return "HeadshotOriginal"; } }

      public static string HeadshotDateColumnName { get { return "HeadshotDate"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Byte[] GetHeadshotOriginalByPrimaryKey(Int32 primaryKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT HeadshotOriginal FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetHeadshotDateByPrimaryKey(Int32 primaryKey)
      {
        return _GetHeadshotDateByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetHeadshotDateByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetHeadshotDateByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetHeadshotDateByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotDate FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticiansImagesHeadshotTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotOriginalByPrimaryKey(Byte[] newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET HeadshotOriginal=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotDateByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET HeadshotDate=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesHeadshot WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticiansImagesHeadshot WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticiansImagesHeadshotTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,HeadshotOriginal,HeadshotDate,UserSecurity,UserName FROM LogPoliticiansImagesHeadshot WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotOriginalByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET HeadshotOriginal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET HeadshotDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesHeadshot SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticiansImagesHeadshot WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT UserName FROM LogPoliticiansImagesHeadshot";
        }
      }

      public static LogPoliticiansImagesHeadshotTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT UserName FROM LogPoliticiansImagesHeadshot";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogPoliticiansImagesHeadshotTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogPoliticiansImagesHeadshotTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticiansImagesHeadshotTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticiansImagesHeadshotTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserName FROM LogPoliticiansImagesHeadshot WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.Billing);
      }

      public static LogPoliticiansImagesHeadshotTable GetBillingDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT UserName FROM LogPoliticiansImagesHeadshot WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticiansImagesHeadshotTable.ColumnSet.Billing);
      }

      public static string GetSelectCommandText(LogPoliticiansImagesHeadshotTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogPoliticiansImagesHeadshotTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogPoliticiansImagesHeadshotTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          default:
            return null;
        }
      }

      static LogPoliticiansImagesHeadshot()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogPoliticiansImagesHeadshot

    #region votelog.LogPoliticiansImagesOriginal

    public partial class LogPoliticiansImagesOriginalRow : DataRow
    {
      internal LogPoliticiansImagesOriginalRow(DataRowBuilder rb) : base(rb) {}

      public Int32 PrimaryKey
      {
        get { return (Int32) this["PrimaryKey"]; }
        set { this["PrimaryKey"] = value; }
      }

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] ProfileOriginal
      {
        get { return this["ProfileOriginal"] as Byte[]; }
        set { if (value == null) this["ProfileOriginal"] = DBNull.Value; else this["ProfileOriginal"] = value; }
      }

      public DateTime ProfileOriginalDate
      {
        get { return (DateTime) this["ProfileOriginalDate"]; }
        set { this["ProfileOriginalDate"] = value; }
      }

      public String UserSecurity
      {
        get { return this["UserSecurity"] as String; }
        set { if (value == null) this["UserSecurity"] = DBNull.Value; else this["UserSecurity"] = value; }
      }

      public String UserName
      {
        get { return this["UserName"] as String; }
        set { if (value == null) this["UserName"] = DBNull.Value; else this["UserName"] = value; }
      }
    }

    [Serializable]
    public partial class LogPoliticiansImagesOriginalTable : TypedTableBase<LogPoliticiansImagesOriginalRow>
    {
      public LogPoliticiansImagesOriginalRow this[int index] { get { return (LogPoliticiansImagesOriginalRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogPoliticiansImagesOriginalRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogPoliticiansImagesOriginalTable(); }

      new public LogPoliticiansImagesOriginalRow NewRow() { return (LogPoliticiansImagesOriginalRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogPoliticiansImagesOriginalRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogPoliticiansImagesOriginalRow); }

      public void RemoveRow(LogPoliticiansImagesOriginalRow row) { this.Rows.Remove(row); }

      public LogPoliticiansImagesOriginalRow NewRow(Int32 primaryKey, String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesOriginalRow row = NewRow();
        row.PrimaryKey = primaryKey;
        row.PoliticianKey = politicianKey;
        row.ProfileOriginal = profileOriginal;
        row.ProfileOriginalDate = profileOriginalDate;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(Int32 primaryKey, String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesOriginalRow row = NewRow(primaryKey, politicianKey, profileOriginal, profileOriginalDate, userSecurity, userName);
        AddRow(row);
      }

      public LogPoliticiansImagesOriginalRow NewRow(String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesOriginalRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginal = profileOriginal;
        row.ProfileOriginalDate = profileOriginalDate;
        row.UserSecurity = userSecurity;
        row.UserName = userName;
        return row;
      }

      public void AddRow(String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName)
      {
        LogPoliticiansImagesOriginalRow row = NewRow(politicianKey, profileOriginal, profileOriginalDate, userSecurity, userName);
        AddRow(row);
      }

      public DataColumn PrimaryKeyColumn { get { return this.Columns["PrimaryKey"]; } }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalColumn { get { return this.Columns["ProfileOriginal"]; } }

      public DataColumn ProfileOriginalDateColumn { get { return this.Columns["ProfileOriginalDate"]; } }

      public DataColumn UserSecurityColumn { get { return this.Columns["UserSecurity"]; } }

      public DataColumn UserNameColumn { get { return this.Columns["UserName"]; } }

      public enum ColumnSet { All, Billing, DateAndUser }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PrimaryKey", typeof(Int32));
        base.Columns.Add(_column);
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginal", typeof(Byte[]));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserSecurity", typeof(String));
        _column.MaxLength = 14;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitBillingColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitDateAndUserColumns()
      {
        DataColumn _column;
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("UserName", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public LogPoliticiansImagesOriginalTable() : this(ColumnSet.All) { }

      public LogPoliticiansImagesOriginalTable(ColumnSet columnSet)
      {
        this.TableName = "LogPoliticiansImagesOriginal";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;

          case ColumnSet.Billing:
            InitBillingColumns();
            break;

          case ColumnSet.DateAndUser:
            InitDateAndUserColumns();
            break;
        }
      }

      protected LogPoliticiansImagesOriginalTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogPoliticiansImagesOriginal
    {
      public const string TableName = "LogPoliticiansImagesOriginal";

      public enum Column { PrimaryKey, PoliticianKey, ProfileOriginal, ProfileOriginalDate, UserSecurity, UserName }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PrimaryKey, "PrimaryKey" },
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginal, "ProfileOriginal" },
        { Column.ProfileOriginalDate, "ProfileOriginalDate" },
        { Column.UserSecurity, "UserSecurity" },
        { Column.UserName, "UserName" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesOriginal";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static Int32 Insert(Int32 primaryKey, String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticiansImagesOriginal (PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName) VALUES (@PrimaryKey,@PoliticianKey,@ProfileOriginal,@ProfileOriginalDate,@UserSecurity,@UserName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginal", profileOriginal);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static Int32 Insert(String politicianKey, Byte[] profileOriginal, DateTime profileOriginalDate, String userSecurity, String userName, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogPoliticiansImagesOriginal (PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName) VALUES (@PoliticianKey,@ProfileOriginal,@ProfileOriginalDate,@UserSecurity,@UserName)";
        switch (VoteLogDb.DbProvider)
        {
          case DbProvider.MySql:
            cmdText += "; SELECT LAST_INSERT_ID()";
            break;

          case DbProvider.MsSql:
            cmdText += "; SELECT SCOPE_IDENTITY()";
            break;

          default:
            throw new ApplicationException("Unsupported provider.");
        }
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginal", profileOriginal);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "UserSecurity", userSecurity);
        VoteLogDb.AddCommandParameter(cmd, "UserName", userName);
        return Convert.ToInt32(VoteLogDb.ExecuteScalar(cmd));
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName FROM LogPoliticiansImagesOriginal";
        }
      }

      public static LogPoliticiansImagesOriginalTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName FROM LogPoliticiansImagesOriginal";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.All);
      }

      public static LogPoliticiansImagesOriginalTable FillTable(DbCommand command)
      {
        return FillTable(command, LogPoliticiansImagesOriginalTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogPoliticiansImagesOriginalTable FillTable(DbCommand command, LogPoliticiansImagesOriginalTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogPoliticiansImagesOriginalTable table = new LogPoliticiansImagesOriginalTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogPoliticiansImagesOriginalTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogPoliticiansImagesOriginalTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogPoliticiansImagesOriginalTable table, LogPoliticiansImagesOriginalTable.ColumnSet columnSet = LogPoliticiansImagesOriginalTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PrimaryKeyColumnName { get { return "PrimaryKey"; } }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalColumnName { get { return "ProfileOriginal"; } }

      public static string ProfileOriginalDateColumnName { get { return "ProfileOriginalDate"; } }

      public static string UserSecurityColumnName { get { return "UserSecurity"; } }

      public static string UserNameColumnName { get { return "UserName"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static int UserSecurityMaxLength { get { return 14; } }

      public static int UserNameMaxLength { get { return 200; } }

      public static int CountByPoliticianKeyProfileOriginalDate(String politicianKey, DateTime profileOriginalDate, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKeyProfileOriginalDate(Column _column, String politicianKey, DateTime profileOriginalDate)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticiansImagesOriginalTable GetDataByPoliticianKeyProfileOriginalDate(String politicianKey, DateTime profileOriginalDate, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKeyProfileOriginalDate(Int32 newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKeyProfileOriginalDate(String newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalByPoliticianKeyProfileOriginalDate(Byte[] newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginal=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDateByPoliticianKeyProfileOriginalDate(DateTime newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginalDate=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKeyProfileOriginalDate(String newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKeyProfileOriginalDate(String newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKeyProfileOriginalDate(Column _column, object newValue, String politicianKey, DateTime profileOriginalDate)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKeyProfileOriginalDate(String politicianKey, DateTime profileOriginalDate, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey AND ProfileOriginalDate=@ProfileOriginalDate";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static bool PrimaryKeyExists(Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Byte[] GetProfileOriginalByPrimaryKey(Int32 primaryKey, Byte[] defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ProfileOriginal FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static DateTime? GetProfileOriginalDateByPrimaryKey(Int32 primaryKey)
      {
        return _GetProfileOriginalDateByPrimaryKey(primaryKey, null);
      }

      public static DateTime GetProfileOriginalDateByPrimaryKey(Int32 primaryKey, DateTime defaultValue)
      {
        return _GetProfileOriginalDateByPrimaryKey(primaryKey, defaultValue).Value;
      }

      private static DateTime? _GetProfileOriginalDateByPrimaryKey(Int32 primaryKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ProfileOriginalDate FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetUserSecurityByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserSecurity FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetUserNameByPrimaryKey(Int32 primaryKey, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT UserName FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static object GetColumnByPrimaryKey(Column _column, Int32 primaryKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticiansImagesOriginalTable GetDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPrimaryKey(Int32 newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PrimaryKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PoliticianKey=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalByPrimaryKey(Byte[] newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginal=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDateByPrimaryKey(DateTime newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginalDate=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserSecurity=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPrimaryKey(String newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserName=@newValue WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPrimaryKey(Column _column, object newValue, Int32 primaryKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET {0}=@newValue WHERE PrimaryKey=@PrimaryKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int CountByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogPoliticiansImagesOriginalTable GetDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT PrimaryKey,PoliticianKey,ProfileOriginal,ProfileOriginalDate,UserSecurity,UserName FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.All);
      }

      public static int UpdatePrimaryKeyByPoliticianKey(Int32 newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PrimaryKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET ProfileOriginalDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserSecurityByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserSecurity=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateUserNameByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET UserName=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE LogPoliticiansImagesOriginal SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectBillingCommandText
      {
        get
        {
          return "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal";
        }
      }

      public static LogPoliticiansImagesOriginalTable GetAllBillingData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.Billing);
      }

      public static void UpdateBilling(LogPoliticiansImagesOriginalTable table)
      {
        UpdateBilling(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateBilling(LogPoliticiansImagesOriginalTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticiansImagesOriginalTable.ColumnSet.Billing, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static LogPoliticiansImagesOriginalTable GetBillingDataByPrimaryKey(Int32 primaryKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal WHERE PrimaryKey=@PrimaryKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PrimaryKey", primaryKey);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.Billing);
      }

      public static LogPoliticiansImagesOriginalTable GetBillingDataByPoliticianKey(String politicianKey, int commandTimeout = -1)
      {
        string cmdText = "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.Billing);
      }

      public static string SelectDateAndUserCommandText
      {
        get
        {
          return "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal";
        }
      }

      public static LogPoliticiansImagesOriginalTable GetAllDateAndUserData(int commandTimeout = -1)
      {
        string cmdText = "SELECT ProfileOriginalDate,UserName FROM LogPoliticiansImagesOriginal";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogPoliticiansImagesOriginalTable.ColumnSet.DateAndUser);
      }

      public static void UpdateDateAndUser(LogPoliticiansImagesOriginalTable table)
      {
        UpdateDateAndUser(table, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateDateAndUser(LogPoliticiansImagesOriginalTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, LogPoliticiansImagesOriginalTable.ColumnSet.DateAndUser, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static string GetSelectCommandText(LogPoliticiansImagesOriginalTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogPoliticiansImagesOriginalTable.ColumnSet.All:
            return SelectAllCommandText;

          case LogPoliticiansImagesOriginalTable.ColumnSet.Billing:
            return SelectBillingCommandText;

          case LogPoliticiansImagesOriginalTable.ColumnSet.DateAndUser:
            return SelectDateAndUserCommandText;

          default:
            return null;
        }
      }

      static LogPoliticiansImagesOriginal()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion votelog.LogPoliticiansImagesOriginal

    #region votelog.LogSampleBallotRequests

    public partial class LogSampleBallotRequestsRow : DataRow
    {
      internal LogSampleBallotRequestsRow(DataRowBuilder rb) : base(rb) {}

      public String Email
      {
        get { return this["Email"] as String; }
        set { if (value == null) this["Email"] = DBNull.Value; else this["Email"] = value; }
      }

      public DateTime? LastUpdateDate
      {
        get { if (this.IsNull("LastUpdateDate")) return null; else return (DateTime) this["LastUpdateDate"]; }
        set { if (value.HasValue) this["LastUpdateDate"] = value.Value; else this["LastUpdateDate"] = DBNull.Value; }
      }

      public String SiteId
      {
        get { return this["SiteId"] as String; }
        set { if (value == null) this["SiteId"] = DBNull.Value; else this["SiteId"] = value; }
      }

      public String Script
      {
        get { return this["Script"] as String; }
        set { if (value == null) this["Script"] = DBNull.Value; else this["Script"] = value; }
      }

      public Boolean? ExplicitOptIn
      {
        get { if (this.IsNull("ExplicitOptIn")) return null; else return (Boolean) this["ExplicitOptIn"]; }
        set { if (value.HasValue) this["ExplicitOptIn"] = value.Value; else this["ExplicitOptIn"] = DBNull.Value; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
        set { if (value == null) this["StateCode"] = DBNull.Value; else this["StateCode"] = value; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
        set { if (value == null) this["ElectionKey"] = DBNull.Value; else this["ElectionKey"] = value; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
        set { if (value == null) this["CongressionalDistrict"] = DBNull.Value; else this["CongressionalDistrict"] = value; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
        set { if (value == null) this["StateSenateDistrict"] = DBNull.Value; else this["StateSenateDistrict"] = value; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
        set { if (value == null) this["StateHouseDistrict"] = DBNull.Value; else this["StateHouseDistrict"] = value; }
      }

      public String County
      {
        get { return this["County"] as String; }
        set { if (value == null) this["County"] = DBNull.Value; else this["County"] = value; }
      }

      public Boolean? TransferredToAddresses
      {
        get { if (this.IsNull("TransferredToAddresses")) return null; else return (Boolean) this["TransferredToAddresses"]; }
        set { if (value.HasValue) this["TransferredToAddresses"] = value.Value; else this["TransferredToAddresses"] = DBNull.Value; }
      }
    }

    [Serializable]
    public partial class LogSampleBallotRequestsTable : TypedTableBase<LogSampleBallotRequestsRow>
    {
      public LogSampleBallotRequestsRow this[int index] { get { return (LogSampleBallotRequestsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(LogSampleBallotRequestsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new LogSampleBallotRequestsTable(); }

      new public LogSampleBallotRequestsRow NewRow() { return (LogSampleBallotRequestsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new LogSampleBallotRequestsRow(rb); }

      protected override Type GetRowType()
      { return typeof(LogSampleBallotRequestsRow); }

      public void RemoveRow(LogSampleBallotRequestsRow row) { this.Rows.Remove(row); }

      public LogSampleBallotRequestsRow NewRow(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, Boolean? transferredToAddresses)
      {
        LogSampleBallotRequestsRow row = NewRow();
        row.Email = email;
        row.LastUpdateDate = lastUpdateDate;
        row.SiteId = siteId;
        row.Script = script;
        row.ExplicitOptIn = explicitOptIn;
        row.StateCode = stateCode;
        row.ElectionKey = electionKey;
        row.CongressionalDistrict = congressionalDistrict;
        row.StateSenateDistrict = stateSenateDistrict;
        row.StateHouseDistrict = stateHouseDistrict;
        row.County = county;
        row.TransferredToAddresses = transferredToAddresses;
        return row;
      }

      public void AddRow(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, Boolean? transferredToAddresses)
      {
        LogSampleBallotRequestsRow row = NewRow(email, lastUpdateDate, siteId, script, explicitOptIn, stateCode, electionKey, congressionalDistrict, stateSenateDistrict, stateHouseDistrict, county, transferredToAddresses);
        AddRow(row);
      }

      public DataColumn EmailColumn { get { return this.Columns["Email"]; } }

      public DataColumn LastUpdateDateColumn { get { return this.Columns["LastUpdateDate"]; } }

      public DataColumn SiteIdColumn { get { return this.Columns["SiteId"]; } }

      public DataColumn ScriptColumn { get { return this.Columns["Script"]; } }

      public DataColumn ExplicitOptInColumn { get { return this.Columns["ExplicitOptIn"]; } }

      public DataColumn StateCodeColumn { get { return this.Columns["StateCode"]; } }

      public DataColumn ElectionKeyColumn { get { return this.Columns["ElectionKey"]; } }

      public DataColumn CongressionalDistrictColumn { get { return this.Columns["CongressionalDistrict"]; } }

      public DataColumn StateSenateDistrictColumn { get { return this.Columns["StateSenateDistrict"]; } }

      public DataColumn StateHouseDistrictColumn { get { return this.Columns["StateHouseDistrict"]; } }

      public DataColumn CountyColumn { get { return this.Columns["County"]; } }

      public DataColumn TransferredToAddressesColumn { get { return this.Columns["TransferredToAddresses"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("Email", typeof(String));
        _column.MaxLength = 200;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("LastUpdateDate", typeof(DateTime));
        base.Columns.Add(_column);
        _column = new DataColumn("SiteId", typeof(String));
        _column.MaxLength = 16;
        base.Columns.Add(_column);
        _column = new DataColumn("Script", typeof(String));
        _column.MaxLength = 45;
        base.Columns.Add(_column);
        _column = new DataColumn("ExplicitOptIn", typeof(Boolean));
        base.Columns.Add(_column);
        _column = new DataColumn("StateCode", typeof(String));
        _column.MaxLength = 2;
        base.Columns.Add(_column);
        _column = new DataColumn("ElectionKey", typeof(String));
        _column.MaxLength = 18;
        base.Columns.Add(_column);
        _column = new DataColumn("CongressionalDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("StateSenateDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("StateHouseDistrict", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("County", typeof(String));
        _column.MaxLength = 3;
        base.Columns.Add(_column);
        _column = new DataColumn("TransferredToAddresses", typeof(Boolean));
        base.Columns.Add(_column);
      }

      public LogSampleBallotRequestsTable() : this(ColumnSet.All) { }

      public LogSampleBallotRequestsTable(ColumnSet columnSet)
      {
        this.TableName = "LogSampleBallotRequests";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected LogSampleBallotRequestsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class LogSampleBallotRequests
    {
      public const string TableName = "LogSampleBallotRequests";

      public enum Column { Email, LastUpdateDate, SiteId, Script, ExplicitOptIn, StateCode, ElectionKey, CongressionalDistrict, StateSenateDistrict, StateHouseDistrict, County, TransferredToAddresses }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.Email, "Email" },
        { Column.LastUpdateDate, "LastUpdateDate" },
        { Column.SiteId, "SiteId" },
        { Column.Script, "Script" },
        { Column.ExplicitOptIn, "ExplicitOptIn" },
        { Column.StateCode, "StateCode" },
        { Column.ElectionKey, "ElectionKey" },
        { Column.CongressionalDistrict, "CongressionalDistrict" },
        { Column.StateSenateDistrict, "StateSenateDistrict" },
        { Column.StateHouseDistrict, "StateHouseDistrict" },
        { Column.County, "County" },
        { Column.TransferredToAddresses, "TransferredToAddresses" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static Column GetMappedColumn(string columnName)
      {
        return (Column) Enum.Parse(typeof(Column), columnName, false);
      }

      public static bool TryGetMappedColumn(string columnName, out Column _column)
      {
        return Enum.TryParse(columnName, false, out _column);
      }

      public static int CountTable(int commandTimeout = -1)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogSampleBallotRequests";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String email, DateTime? lastUpdateDate, String siteId, String script, Boolean? explicitOptIn, String stateCode, String electionKey, String congressionalDistrict, String stateSenateDistrict, String stateHouseDistrict, String county, Boolean? transferredToAddresses, int commandTimeout = -1)
      {
        string cmdText = "INSERT INTO LogSampleBallotRequests (Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,TransferredToAddresses) VALUES (@Email,@LastUpdateDate,@SiteId,@Script,@ExplicitOptIn,@StateCode,@ElectionKey,@CongressionalDistrict,@StateSenateDistrict,@StateHouseDistrict,@County,@TransferredToAddresses)";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "LastUpdateDate", lastUpdateDate);
        VoteLogDb.AddCommandParameter(cmd, "SiteId", siteId);
        VoteLogDb.AddCommandParameter(cmd, "Script", script);
        VoteLogDb.AddCommandParameter(cmd, "ExplicitOptIn", explicitOptIn);
        VoteLogDb.AddCommandParameter(cmd, "StateCode", stateCode);
        VoteLogDb.AddCommandParameter(cmd, "ElectionKey", electionKey);
        VoteLogDb.AddCommandParameter(cmd, "CongressionalDistrict", congressionalDistrict);
        VoteLogDb.AddCommandParameter(cmd, "StateSenateDistrict", stateSenateDistrict);
        VoteLogDb.AddCommandParameter(cmd, "StateHouseDistrict", stateHouseDistrict);
        VoteLogDb.AddCommandParameter(cmd, "County", county);
        VoteLogDb.AddCommandParameter(cmd, "TransferredToAddresses", transferredToAddresses);
        VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,TransferredToAddresses FROM LogSampleBallotRequests";
        }
      }

      public static LogSampleBallotRequestsTable GetAllData(int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,TransferredToAddresses FROM LogSampleBallotRequests";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      public static LogSampleBallotRequestsReader GetAllDataReader(int commandTimeout = -1)
      {
        string cmdText = SelectAllCommandText;
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        return new LogSampleBallotRequestsReader(cmd.ExecuteReader(), cn);
      }

      public static LogSampleBallotRequestsTable FillTable(DbCommand command)
      {
        return FillTable(command, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static LogSampleBallotRequestsTable FillTable(DbCommand command, LogSampleBallotRequestsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          command.Connection = cn;
          LogSampleBallotRequestsTable table = new LogSampleBallotRequestsTable(columnSet);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(LogSampleBallotRequestsTable table, int commandTimeout, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        UpdateTable(table, LogSampleBallotRequestsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(LogSampleBallotRequestsTable table, LogSampleBallotRequestsTable.ColumnSet columnSet = LogSampleBallotRequestsTable.ColumnSet.All, int commandTimeout = -1, ConflictOption conflictOption = ConflictOption.CompareAllSearchableValues, bool continueUpdateOnError = false)
      {
        using (DbConnection cn = VoteLogDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteLogDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteLogDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string EmailColumnName { get { return "Email"; } }

      public static string LastUpdateDateColumnName { get { return "LastUpdateDate"; } }

      public static string SiteIdColumnName { get { return "SiteId"; } }

      public static string ScriptColumnName { get { return "Script"; } }

      public static string ExplicitOptInColumnName { get { return "ExplicitOptIn"; } }

      public static string StateCodeColumnName { get { return "StateCode"; } }

      public static string ElectionKeyColumnName { get { return "ElectionKey"; } }

      public static string CongressionalDistrictColumnName { get { return "CongressionalDistrict"; } }

      public static string StateSenateDistrictColumnName { get { return "StateSenateDistrict"; } }

      public static string StateHouseDistrictColumnName { get { return "StateHouseDistrict"; } }

      public static string CountyColumnName { get { return "County"; } }

      public static string TransferredToAddressesColumnName { get { return "TransferredToAddresses"; } }

      public static int EmailMaxLength { get { return 200; } }

      public static int SiteIdMaxLength { get { return 16; } }

      public static int ScriptMaxLength { get { return 45; } }

      public static int StateCodeMaxLength { get { return 2; } }

      public static int ElectionKeyMaxLength { get { return 18; } }

      public static int CongressionalDistrictMaxLength { get { return 3; } }

      public static int StateSenateDistrictMaxLength { get { return 3; } }

      public static int StateHouseDistrictMaxLength { get { return 3; } }

      public static int CountyMaxLength { get { return 3; } }

      public static bool EmailExists(String email)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetEmailByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Email FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static DateTime? GetLastUpdateDateByEmail(String email)
      {
        return _GetLastUpdateDateByEmail(email, null);
      }

      public static DateTime GetLastUpdateDateByEmail(String email, DateTime defaultValue)
      {
        return _GetLastUpdateDateByEmail(email, defaultValue).Value;
      }

      private static DateTime? _GetLastUpdateDateByEmail(String email, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT LastUpdateDate FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static String GetSiteIdByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT SiteId FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetScriptByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT Script FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetExplicitOptInByEmail(String email)
      {
        return _GetExplicitOptInByEmail(email, null);
      }

      public static Boolean GetExplicitOptInByEmail(String email, Boolean defaultValue)
      {
        return _GetExplicitOptInByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetExplicitOptInByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT ExplicitOptIn FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static String GetStateCodeByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateCode FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetElectionKeyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT ElectionKey FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCongressionalDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT CongressionalDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateSenateDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateSenateDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetStateHouseDistrictByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT StateHouseDistrict FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetCountyByEmail(String email, String defaultValue = null)
      {
        object result;
        string cmdText = "SELECT County FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static Boolean? GetTransferredToAddressesByEmail(String email)
      {
        return _GetTransferredToAddressesByEmail(email, null);
      }

      public static Boolean GetTransferredToAddressesByEmail(String email, Boolean defaultValue)
      {
        return _GetTransferredToAddressesByEmail(email, defaultValue).Value;
      }

      private static Boolean? _GetTransferredToAddressesByEmail(String email, Boolean? defaultValue)
      {
        object result;
        string cmdText = "SELECT TransferredToAddresses FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (Boolean) result;
      }

      public static object GetColumnByEmail(Column _column, String email)
      {
        object result;
        string cmdText = "SELECT {0} FROM LogSampleBallotRequests WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        result = VoteLogDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static LogSampleBallotRequestsTable GetDataByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "SELECT Email,LastUpdateDate,SiteId,Script,ExplicitOptIn,StateCode,ElectionKey,CongressionalDistrict,StateSenateDistrict,StateHouseDistrict,County,TransferredToAddresses FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return FillTable(cmd, LogSampleBallotRequestsTable.ColumnSet.All);
      }

      public static LogSampleBallotRequestsReader GetDataReaderByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = GetSelectCommandText(LogSampleBallotRequestsTable.ColumnSet.All) + " WHERE Email=@Email";
        DbConnection cn = VoteLogDb.GetOpenConnection();
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, cn, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return new LogSampleBallotRequestsReader(cmd.ExecuteReader(), cn);
      }

      public static int UpdateEmailByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Email=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateLastUpdateDateByEmail(DateTime? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET LastUpdateDate=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateSiteIdByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET SiteId=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateScriptByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET Script=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateExplicitOptInByEmail(Boolean? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET ExplicitOptIn=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateCodeByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateCode=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateElectionKeyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET ElectionKey=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCongressionalDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET CongressionalDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateSenateDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateSenateDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateStateHouseDistrictByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET StateHouseDistrict=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateCountyByEmail(String newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET County=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateTransferredToAddressesByEmail(Boolean? newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET TransferredToAddresses=@newValue WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        object o = null;
        if (newValue.HasValue) o = newValue.Value;
        VoteLogDb.AddCommandParameter(cmd, "newValue", o);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumnByEmail(Column _column, object newValue, String email)
      {
        string cmdText = "UPDATE LogSampleBallotRequests SET {0}=@newValue WHERE Email=@Email";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, -1);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        VoteLogDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static int DeleteByEmail(String email, int commandTimeout = -1)
      {
        string cmdText = "DELETE FROM LogSampleBallotRequests WHERE Email=@Email";
        DbCommand cmd = VoteLogDb.GetCommand(cmdText, commandTimeout);
        VoteLogDb.AddCommandParameter(cmd, "Email", email);
        return VoteLogDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(LogSampleBallotRequestsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case LogSampleBallotRequestsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static LogSampleBallotRequests()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    public partial class LogSampleBallotRequestsReader : DataReaderBase
    {
      public LogSampleBallotRequestsReader(DbDataReader dataReader, DbConnection connection) : base(dataReader, connection) { }

      public String Email
      {
        get { return this["Email"] as String; }
      }

      public DateTime? LastUpdateDate
      {
        get { if (this.IsDBNull(GetOrdinal("LastUpdateDate"))) return null; else return (DateTime) this["LastUpdateDate"]; }
      }

      public String SiteId
      {
        get { return this["SiteId"] as String; }
      }

      public String Script
      {
        get { return this["Script"] as String; }
      }

      public Boolean? ExplicitOptIn
      {
        get { if (this.IsDBNull(GetOrdinal("ExplicitOptIn"))) return null; else return (Boolean) this["ExplicitOptIn"]; }
      }

      public String StateCode
      {
        get { return this["StateCode"] as String; }
      }

      public String ElectionKey
      {
        get { return this["ElectionKey"] as String; }
      }

      public String CongressionalDistrict
      {
        get { return this["CongressionalDistrict"] as String; }
      }

      public String StateSenateDistrict
      {
        get { return this["StateSenateDistrict"] as String; }
      }

      public String StateHouseDistrict
      {
        get { return this["StateHouseDistrict"] as String; }
      }

      public String County
      {
        get { return this["County"] as String; }
      }

      public Boolean? TransferredToAddresses
      {
        get { if (this.IsDBNull(GetOrdinal("TransferredToAddresses"))) return null; else return (Boolean) this["TransferredToAddresses"]; }
      }
    }

    #endregion votelog.LogSampleBallotRequests
  }
}
