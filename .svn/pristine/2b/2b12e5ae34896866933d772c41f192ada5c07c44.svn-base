//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;

namespace DB
{
  namespace VoteImagesLocal
  {
    #region voteimageslocal Database

    public static partial class VoteImagesLocalDb
    {
      static string _ConnectionString = @"Server=votesql.c3fj3t5d5d77.us-east-1.rds.amazonaws.com;Uid=ron;Pwd=p17134;Database=voteimageslocal";

      public static string ConnectionString
      {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
      }

      static DbProvider _DbProvider = DbProvider.MySql;

      public static DbProvider DbProvider
      {
        get { return _DbProvider; }
        set { _DbProvider = value; }
      }

      static VoteImagesLocalDb()
      {
        DbProvider provider;
        if (Enum.TryParse<DbProvider>(ConfigurationManager.AppSettings["VoteDbProvider"], out provider))
          _DbProvider = provider;
        string connectionString = null;
        var cs = ConfigurationManager.ConnectionStrings["CnVoteImagesLocal.MySql"];
        if (cs != null) connectionString = cs.ConnectionString;
        if (string.IsNullOrWhiteSpace(connectionString))
          connectionString = ConfigurationManager.AppSettings["CnVoteImagesLocal.MySql"];
        if (!string.IsNullOrWhiteSpace(connectionString))
          _ConnectionString = connectionString;
      }

      public static DbConnection GetConnection()
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlConnection(ConnectionString);

          case DbProvider.MySql:
            return new MySqlConnection(ConnectionString);

          default:
            return null;
        }
      }

      public static DbConnection GetOpenConnection()
      {
        DbConnection cn = GetConnection();
        if (cn != null) cn.Open();
        return cn;
      }

      public static DbCommand GetCommand(string cmdText)
      {
        return GetCommand(cmdText, null, -1);
      }

      public static DbCommand GetCommand(string cmdText, DbConnection cn)
      {
        return GetCommand(cmdText, cn, -1);
      }

      public static DbCommand GetCommand(string cmdText, int commandTimeout)
      {
        return GetCommand(cmdText, null, commandTimeout);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      [SuppressMessage("Microsoft.Security", "CA2100")]
      public static DbCommand GetCommand(string cmdText, DbConnection cn, int commandTimeout)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            SqlCommand sqlCommand = new SqlCommand(cmdText, cn as SqlConnection);
            if (commandTimeout >= 0) sqlCommand.CommandTimeout = commandTimeout;
            return sqlCommand;

          case DbProvider.MySql:
            MySqlCommand mySqlCommand = new MySqlCommand(cmdText, cn as MySqlConnection);
            if (commandTimeout >= 0) mySqlCommand.CommandTimeout = commandTimeout;
            return mySqlCommand;

          default:
            return null;
        }
      }

      public static DbDataAdapter GetDataAdapter(DbCommand command)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlDataAdapter(command as SqlCommand);

          case DbProvider.MySql:
            return new MySqlDataAdapter(command as MySqlCommand);

          default:
            return null;
        }
      }

      public static DbCommandBuilder GetCommandBuilder(DbDataAdapter adapter)
      {
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            return new SqlCommandBuilder(adapter as SqlDataAdapter);

          case DbProvider.MySql:
            return new MySqlCommandBuilder(adapter as MySqlDataAdapter);

          default:
            return null;
        }
      }

      public static void AddCommandParameter(DbCommand command, string name, object value)
      {
        if (!name.StartsWith("@")) name = "@" + name;
        switch (DbProvider)
        {
          case DbProvider.MsSql:
            (command as SqlCommand).Parameters.AddWithValue(name, value);
            break;

          case DbProvider.MySql:
            (command as MySqlCommand).Parameters.AddWithValue(name, value);
            break;
        }
      }

      public static int ExecuteNonQuery(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteNonQuery();
        }
      }

      public static object ExecuteScalar(DbCommand command)
      {
        using (DbConnection cn = GetOpenConnection())
        {
          command.Connection = cn;
          return command.ExecuteScalar();
        }
      }
    }

    #endregion voteimageslocal Database

    #region voteimageslocal.PoliticiansImagesBlobs

    public partial class PoliticiansImagesBlobsRow : DataRow
    {
      internal PoliticiansImagesBlobsRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] ProfileOriginal
      {
        get { return this["ProfileOriginal"] as Byte[]; }
        set { if (value == null) this["ProfileOriginal"] = DBNull.Value; else this["ProfileOriginal"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile300
      {
        get { return this["Profile300"] as Byte[]; }
        set { if (value == null) this["Profile300"] = DBNull.Value; else this["Profile300"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Profile200
      {
        get { return this["Profile200"] as Byte[]; }
        set { if (value == null) this["Profile200"] = DBNull.Value; else this["Profile200"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot100
      {
        get { return this["Headshot100"] as Byte[]; }
        set { if (value == null) this["Headshot100"] = DBNull.Value; else this["Headshot100"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot75
      {
        get { return this["Headshot75"] as Byte[]; }
        set { if (value == null) this["Headshot75"] = DBNull.Value; else this["Headshot75"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot50
      {
        get { return this["Headshot50"] as Byte[]; }
        set { if (value == null) this["Headshot50"] = DBNull.Value; else this["Headshot50"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot35
      {
        get { return this["Headshot35"] as Byte[]; }
        set { if (value == null) this["Headshot35"] = DBNull.Value; else this["Headshot35"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot25
      {
        get { return this["Headshot25"] as Byte[]; }
        set { if (value == null) this["Headshot25"] = DBNull.Value; else this["Headshot25"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot20
      {
        get { return this["Headshot20"] as Byte[]; }
        set { if (value == null) this["Headshot20"] = DBNull.Value; else this["Headshot20"] = value; }
      }

      [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1819")]
      public Byte[] Headshot15
      {
        get { return this["Headshot15"] as Byte[]; }
        set { if (value == null) this["Headshot15"] = DBNull.Value; else this["Headshot15"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesBlobsTable : TypedTableBase<PoliticiansImagesBlobsRow>
    {
      public PoliticiansImagesBlobsRow this[int index] { get { return (PoliticiansImagesBlobsRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesBlobsRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesBlobsTable(); }

      new public PoliticiansImagesBlobsRow NewRow() { return (PoliticiansImagesBlobsRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesBlobsRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesBlobsRow); }

      public void RemoveRow(PoliticiansImagesBlobsRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesBlobsRow NewRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginal = profileOriginal;
        row.Profile300 = profile300;
        row.Profile200 = profile200;
        row.Headshot100 = headshot100;
        row.Headshot75 = headshot75;
        row.Headshot50 = headshot50;
        row.Headshot35 = headshot35;
        row.Headshot25 = headshot25;
        row.Headshot20 = headshot20;
        row.Headshot15 = headshot15;
        return row;
      }

      public void AddRow(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        PoliticiansImagesBlobsRow row = NewRow(politicianKey, profileOriginal, profile300, profile200, headshot100, headshot75, headshot50, headshot35, headshot25, headshot20, headshot15);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalColumn { get { return this.Columns["ProfileOriginal"]; } }

      public DataColumn Profile300Column { get { return this.Columns["Profile300"]; } }

      public DataColumn Profile200Column { get { return this.Columns["Profile200"]; } }

      public DataColumn Headshot100Column { get { return this.Columns["Headshot100"]; } }

      public DataColumn Headshot75Column { get { return this.Columns["Headshot75"]; } }

      public DataColumn Headshot50Column { get { return this.Columns["Headshot50"]; } }

      public DataColumn Headshot35Column { get { return this.Columns["Headshot35"]; } }

      public DataColumn Headshot25Column { get { return this.Columns["Headshot25"]; } }

      public DataColumn Headshot20Column { get { return this.Columns["Headshot20"]; } }

      public DataColumn Headshot15Column { get { return this.Columns["Headshot15"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginal", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile300", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Profile200", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot100", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot75", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot50", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot35", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot25", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot20", typeof(Byte[]));
        base.Columns.Add(_column);
        _column = new DataColumn("Headshot15", typeof(Byte[]));
        base.Columns.Add(_column);
      }

      public PoliticiansImagesBlobsTable() : this(ColumnSet.All) { }

      public PoliticiansImagesBlobsTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesBlobs";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansImagesBlobsTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesBlobs
    {
      public const string TableName = "PoliticiansImagesBlobs";

      public enum Column { PoliticianKey, ProfileOriginal, Profile300, Profile200, Headshot100, Headshot75, Headshot50, Headshot35, Headshot25, Headshot20, Headshot15 }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginal, "ProfileOriginal" },
        { Column.Profile300, "Profile300" },
        { Column.Profile200, "Profile200" },
        { Column.Headshot100, "Headshot100" },
        { Column.Headshot75, "Headshot75" },
        { Column.Headshot50, "Headshot50" },
        { Column.Headshot35, "Headshot35" },
        { Column.Headshot25, "Headshot25" },
        { Column.Headshot20, "Headshot20" },
        { Column.Headshot15, "Headshot15" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15)
      {
        Insert(politicianKey, profileOriginal, profile300, profile200, headshot100, headshot75, headshot50, headshot35, headshot25, headshot20, headshot15, -1);
      }

      public static void Insert(String politicianKey, Byte[] profileOriginal, Byte[] profile300, Byte[] profile200, Byte[] headshot100, Byte[] headshot75, Byte[] headshot50, Byte[] headshot35, Byte[] headshot25, Byte[] headshot20, Byte[] headshot15, int commandTimeout)
      {
        string cmdText = "INSERT INTO PoliticiansImagesBlobs (PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15) VALUES (@PoliticianKey,@ProfileOriginal,@Profile300,@Profile200,@Headshot100,@Headshot75,@Headshot50,@Headshot35,@Headshot25,@Headshot20,@Headshot15)";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "ProfileOriginal", profileOriginal);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Profile300", profile300);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Profile200", profile200);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot100", headshot100);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot75", headshot75);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot50", headshot50);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot35", headshot35);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot25", headshot25);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot20", headshot20);
        VoteImagesLocalDb.AddCommandParameter(cmd, "Headshot15", headshot15);
        VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        }
      }

      public static PoliticiansImagesBlobsTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static PoliticiansImagesBlobsTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesBlobsTable FillTable(DbCommand command, PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteImagesLocalDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesBlobsTable table = new PoliticiansImagesBlobsTable(columnSet);
          DbDataAdapter adapter = VoteImagesLocalDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, int commandTimeout)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, PoliticiansImagesBlobsTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansImagesBlobsTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesBlobsTable table, PoliticiansImagesBlobsTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteImagesLocalDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteImagesLocalDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteImagesLocalDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalColumnName { get { return "ProfileOriginal"; } }

      public static string Profile300ColumnName { get { return "Profile300"; } }

      public static string Profile200ColumnName { get { return "Profile200"; } }

      public static string Headshot100ColumnName { get { return "Headshot100"; } }

      public static string Headshot75ColumnName { get { return "Headshot75"; } }

      public static string Headshot50ColumnName { get { return "Headshot50"; } }

      public static string Headshot35ColumnName { get { return "Headshot35"; } }

      public static string Headshot25ColumnName { get { return "Headshot25"; } }

      public static string Headshot20ColumnName { get { return "Headshot20"; } }

      public static string Headshot15ColumnName { get { return "Headshot15"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, null);
      }

      public static String GetPoliticianKey(String politicianKey)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey);
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfileOriginalByPoliticianKey(String politicianKey)
      {
        return GetProfileOriginalByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetProfileOriginal(String politicianKey)
      {
        return GetProfileOriginalByPoliticianKey(politicianKey);
      }

      public static Byte[] GetProfileOriginalByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT ProfileOriginal FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfileOriginal(String politicianKey, Byte[] defaultValue)
      {
        return GetProfileOriginalByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile300ByPoliticianKey(String politicianKey)
      {
        return GetProfile300ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetProfile300(String politicianKey)
      {
        return GetProfile300ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetProfile300ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Profile300 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile300(String politicianKey, Byte[] defaultValue)
      {
        return GetProfile300ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetProfile200ByPoliticianKey(String politicianKey)
      {
        return GetProfile200ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetProfile200(String politicianKey)
      {
        return GetProfile200ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetProfile200ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Profile200 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetProfile200(String politicianKey, Byte[] defaultValue)
      {
        return GetProfile200ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot100ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot100ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot100(String politicianKey)
      {
        return GetHeadshot100ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot100ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot100 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot100(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot100ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot75ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot75ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot75(String politicianKey)
      {
        return GetHeadshot75ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot75ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot75 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot75(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot75ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot50ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot50ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot50(String politicianKey)
      {
        return GetHeadshot50ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot50ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot50 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot50(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot50ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot35ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot35ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot35(String politicianKey)
      {
        return GetHeadshot35ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot35ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot35 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot35(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot35ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot25ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot25ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot25(String politicianKey)
      {
        return GetHeadshot25ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot25ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot25 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot25(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot25ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot20ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot20ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot20(String politicianKey)
      {
        return GetHeadshot20ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot20ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot20 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot20(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot20ByPoliticianKey(politicianKey, defaultValue);
      }

      public static Byte[] GetHeadshot15ByPoliticianKey(String politicianKey)
      {
        return GetHeadshot15ByPoliticianKey(politicianKey, null);
      }

      public static Byte[] GetHeadshot15(String politicianKey)
      {
        return GetHeadshot15ByPoliticianKey(politicianKey);
      }

      public static Byte[] GetHeadshot15ByPoliticianKey(String politicianKey, Byte[] defaultValue)
      {
        object result;
        string cmdText = "SELECT Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as Byte[];
      }

      public static Byte[] GetHeadshot15(String politicianKey, Byte[] defaultValue)
      {
        return GetHeadshot15ByPoliticianKey(politicianKey, defaultValue);
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesBlobsTable GetDataByPoliticianKey(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static PoliticiansImagesBlobsTable GetDataByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginal,Profile300,Profile200,Headshot100,Headshot75,Headshot50,Headshot35,Headshot25,Headshot20,Headshot15 FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesBlobsTable.ColumnSet.All);
      }

      public static PoliticiansImagesBlobsTable GetData(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static PoliticiansImagesBlobsTable GetData(String politicianKey, int commandTimeout)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET ProfileOriginal=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginal(Byte[] newValue, String politicianKey)
      {
        return UpdateProfileOriginalByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile300ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile300=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile300(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile300ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfile200ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Profile200=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfile200(Byte[] newValue, String politicianKey)
      {
        return UpdateProfile200ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot100ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot100=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot100(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot100ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot75ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot75=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot75(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot75ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot50ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot50=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot50(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot50ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot35ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot35=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot35(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot35ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot25ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot25=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot25(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot25ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot20ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot20=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot20(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot20ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshot15ByPoliticianKey(Byte[] newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET Headshot15=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshot15(Byte[] newValue, String politicianKey)
      {
        return UpdateHeadshot15ByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesBlobs SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey)
      {
        return DeleteByPoliticianKey(politicianKey, -1);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM PoliticiansImagesBlobs WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PoliticiansImagesBlobsTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesBlobsTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesBlobs()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion voteimageslocal.PoliticiansImagesBlobs

    #region voteimageslocal.PoliticiansImagesData

    public partial class PoliticiansImagesDataRow : DataRow
    {
      internal PoliticiansImagesDataRow(DataRowBuilder rb) : base(rb) {}

      public String PoliticianKey
      {
        get { return this["PoliticianKey"] as String; }
        set { if (value == null) this["PoliticianKey"] = DBNull.Value; else this["PoliticianKey"] = value; }
      }

      public DateTime ProfileOriginalDate
      {
        get { return (DateTime) this["ProfileOriginalDate"]; }
        set { this["ProfileOriginalDate"] = value; }
      }

      public DateTime HeadshotDate
      {
        get { return (DateTime) this["HeadshotDate"]; }
        set { this["HeadshotDate"] = value; }
      }

      public DateTime HeadshotResizeDate
      {
        get { return (DateTime) this["HeadshotResizeDate"]; }
        set { this["HeadshotResizeDate"] = value; }
      }
    }

    [Serializable]
    public partial class PoliticiansImagesDataTable : TypedTableBase<PoliticiansImagesDataRow>
    {
      public PoliticiansImagesDataRow this[int index] { get { return (PoliticiansImagesDataRow)(this.Rows[index]); } }

      public int Count { get { return this.Rows.Count; } }

      public void AddRow(PoliticiansImagesDataRow row) { this.Rows.Add(row); }

      protected override DataTable CreateInstance() { return new PoliticiansImagesDataTable(); }

      new public PoliticiansImagesDataRow NewRow() { return (PoliticiansImagesDataRow) (base.NewRow()); }

      protected override DataRow NewRowFromBuilder(DataRowBuilder rb)
      { return new PoliticiansImagesDataRow(rb); }

      protected override Type GetRowType()
      { return typeof(PoliticiansImagesDataRow); }

      public void RemoveRow(PoliticiansImagesDataRow row) { this.Rows.Remove(row); }

      public PoliticiansImagesDataRow NewRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow();
        row.PoliticianKey = politicianKey;
        row.ProfileOriginalDate = profileOriginalDate;
        row.HeadshotDate = headshotDate;
        row.HeadshotResizeDate = headshotResizeDate;
        return row;
      }

      public void AddRow(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        PoliticiansImagesDataRow row = NewRow(politicianKey, profileOriginalDate, headshotDate, headshotResizeDate);
        AddRow(row);
      }

      public DataColumn PoliticianKeyColumn { get { return this.Columns["PoliticianKey"]; } }

      public DataColumn ProfileOriginalDateColumn { get { return this.Columns["ProfileOriginalDate"]; } }

      public DataColumn HeadshotDateColumn { get { return this.Columns["HeadshotDate"]; } }

      public DataColumn HeadshotResizeDateColumn { get { return this.Columns["HeadshotResizeDate"]; } }

      public enum ColumnSet { All }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      private void InitAllColumns()
      {
        DataColumn _column;
        _column = new DataColumn("PoliticianKey", typeof(String));
        _column.MaxLength = 50;
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("ProfileOriginalDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
        _column = new DataColumn("HeadshotResizeDate", typeof(DateTime));
        _column.AllowDBNull = false;
        base.Columns.Add(_column);
      }

      public PoliticiansImagesDataTable() : this(ColumnSet.All) { }

      public PoliticiansImagesDataTable(ColumnSet columnSet)
      {
        this.TableName = "PoliticiansImagesData";
        switch (columnSet)
        {
          case ColumnSet.All:
            InitAllColumns();
            break;
        }
      }

      protected PoliticiansImagesDataTable(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }

    public static partial class PoliticiansImagesData
    {
      public const string TableName = "PoliticiansImagesData";

      public enum Column { PoliticianKey, ProfileOriginalDate, HeadshotDate, HeadshotResizeDate }

      private static Dictionary<Column, string> ColumnDictionary = new Dictionary<Column, string>() {
        { Column.PoliticianKey, "PoliticianKey" },
        { Column.ProfileOriginalDate, "ProfileOriginalDate" },
        { Column.HeadshotDate, "HeadshotDate" },
        { Column.HeadshotResizeDate, "HeadshotResizeDate" } };

      private static Dictionary<string, Column> ColumnNameDictionary;

      public static string GetColumnName(Column _column)
      {
        return ColumnDictionary[_column];
      }

      public static Column GetColumn(string columnName)
      {
        return ColumnNameDictionary[columnName];
      }

      public static bool TryGetColumn(string columnName, out Column _column)
      {
        return ColumnNameDictionary.TryGetValue(columnName, out _column);
      }

      public static int CountTable()
      {
        return CountTable(-1);
      }

      public static int CountTable(int commandTimeout)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result);
      }

      public static void Insert(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate)
      {
        Insert(politicianKey, profileOriginalDate, headshotDate, headshotResizeDate, -1);
      }

      public static void Insert(String politicianKey, DateTime profileOriginalDate, DateTime headshotDate, DateTime headshotResizeDate, int commandTimeout)
      {
        string cmdText = "INSERT INTO PoliticiansImagesData (PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate) VALUES (@PoliticianKey,@ProfileOriginalDate,@HeadshotDate,@HeadshotResizeDate)";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "ProfileOriginalDate", profileOriginalDate);
        VoteImagesLocalDb.AddCommandParameter(cmd, "HeadshotDate", headshotDate);
        VoteImagesLocalDb.AddCommandParameter(cmd, "HeadshotResizeDate", headshotResizeDate);
        VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static string SelectAllCommandText
      {
        get
        {
          return "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        }
      }

      public static PoliticiansImagesDataTable GetAllData()
      {
        return GetAllData(-1);
      }

      public static PoliticiansImagesDataTable GetAllData(int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable FillTable(DbCommand command)
      {
        return FillTable(command, PoliticiansImagesDataTable.ColumnSet.All);
      }

      [SuppressMessage("Microsoft.Reliability", "CA2000")]
      public static PoliticiansImagesDataTable FillTable(DbCommand command, PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        using (DbConnection cn = VoteImagesLocalDb.GetOpenConnection())
        {
          command.Connection = cn;
          PoliticiansImagesDataTable table = new PoliticiansImagesDataTable(columnSet);
          DbDataAdapter adapter = VoteImagesLocalDb.GetDataAdapter(command);
          adapter.Fill(table);
          return table;
        }
      }

      public static void UpdateTable(PoliticiansImagesDataTable table)
      {
        UpdateTable(table, PoliticiansImagesDataTable.ColumnSet.All, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        UpdateTable(table, columnSet, -1, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, int commandTimeout)
      {
        UpdateTable(table, PoliticiansImagesDataTable.ColumnSet.All, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, PoliticiansImagesDataTable.ColumnSet columnSet, int commandTimeout)
      {
        UpdateTable(table, columnSet, commandTimeout, ConflictOption.CompareAllSearchableValues, false);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        UpdateTable(table, PoliticiansImagesDataTable.ColumnSet.All, commandTimeout, conflictOption, continueUpdateOnError);
      }

      public static void UpdateTable(PoliticiansImagesDataTable table, PoliticiansImagesDataTable.ColumnSet columnSet, int commandTimeout, ConflictOption conflictOption, bool continueUpdateOnError)
      {
        using (DbConnection cn = VoteImagesLocalDb.GetOpenConnection())
        {
          string cmdText = GetSelectCommandText(columnSet);
          DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, cn, commandTimeout);
          DbDataAdapter adapter = VoteImagesLocalDb.GetDataAdapter(cmd);
          adapter.ContinueUpdateOnError = continueUpdateOnError;
          DbCommandBuilder builder = VoteImagesLocalDb.GetCommandBuilder(adapter);
          builder.ConflictOption = conflictOption;
          adapter.Update(table);
        }
      }

      public static string PoliticianKeyColumnName { get { return "PoliticianKey"; } }

      public static string ProfileOriginalDateColumnName { get { return "ProfileOriginalDate"; } }

      public static string HeadshotDateColumnName { get { return "HeadshotDate"; } }

      public static string HeadshotResizeDateColumnName { get { return "HeadshotResizeDate"; } }

      public static int PoliticianKeyMaxLength { get { return 50; } }

      public static bool PoliticianKeyExists(String politicianKey)
      {
        object result;
        string cmdText = "SELECT COUNT(*) FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        return Convert.ToInt32(result) != 0;
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, null);
      }

      public static String GetPoliticianKey(String politicianKey)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey);
      }

      public static String GetPoliticianKeyByPoliticianKey(String politicianKey, String defaultValue)
      {
        object result;
        string cmdText = "SELECT PoliticianKey FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return result as String;
      }

      public static String GetPoliticianKey(String politicianKey, String defaultValue)
      {
        return GetPoliticianKeyByPoliticianKey(politicianKey, defaultValue);
      }

      public static DateTime? GetProfileOriginalDateByPoliticianKey(String politicianKey)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetProfileOriginalDate(String politicianKey)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetProfileOriginalDate(String politicianKey, DateTime defaultValue)
      {
        return GetProfileOriginalDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetProfileOriginalDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT ProfileOriginalDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotDate(String politicianKey)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static DateTime? GetHeadshotResizeDateByPoliticianKey(String politicianKey)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, null);
      }

      public static DateTime? GetHeadshotResizeDate(String politicianKey)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey);
      }

      public static DateTime GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime defaultValue)
      {
        return _GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue).Value;
      }

      public static DateTime GetHeadshotResizeDate(String politicianKey, DateTime defaultValue)
      {
        return GetHeadshotResizeDateByPoliticianKey(politicianKey, defaultValue);
      }

      private static DateTime? _GetHeadshotResizeDateByPoliticianKey(String politicianKey, DateTime? defaultValue)
      {
        object result;
        string cmdText = "SELECT HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == null || result == DBNull.Value) return defaultValue;
        else return (DateTime) result;
      }

      public static object GetColumnByPoliticianKey(Column _column, String politicianKey)
      {
        object result;
        string cmdText = "SELECT {0} FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        result = VoteImagesLocalDb.ExecuteScalar(cmd);
        if (result == DBNull.Value) return null;
        return result;
      }

      public static object GetColumn(Column _column, String politicianKey)
      {
        return GetColumnByPoliticianKey(_column, politicianKey);
      }

      public static PoliticiansImagesDataTable GetDataByPoliticianKey(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static PoliticiansImagesDataTable GetDataByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "SELECT PoliticianKey,ProfileOriginalDate,HeadshotDate,HeadshotResizeDate FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return FillTable(cmd, PoliticiansImagesDataTable.ColumnSet.All);
      }

      public static PoliticiansImagesDataTable GetData(String politicianKey)
      {
        return GetDataByPoliticianKey(politicianKey, -1);
      }

      public static PoliticiansImagesDataTable GetData(String politicianKey, int commandTimeout)
      {
        return GetDataByPoliticianKey(politicianKey, commandTimeout);
      }

      public static int UpdatePoliticianKeyByPoliticianKey(String newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET PoliticianKey=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdatePoliticianKey(String newValue, String politicianKey)
      {
        return UpdatePoliticianKeyByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateProfileOriginalDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET ProfileOriginalDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateProfileOriginalDate(DateTime newValue, String politicianKey)
      {
        return UpdateProfileOriginalDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateHeadshotResizeDateByPoliticianKey(DateTime newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET HeadshotResizeDate=@newValue WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateHeadshotResizeDate(DateTime newValue, String politicianKey)
      {
        return UpdateHeadshotResizeDateByPoliticianKey(newValue, politicianKey);
      }

      public static int UpdateColumnByPoliticianKey(Column _column, object newValue, String politicianKey)
      {
        string cmdText = "UPDATE PoliticiansImagesData SET {0}=@newValue WHERE PoliticianKey=@PoliticianKey";
        cmdText = string.Format(cmdText, GetColumnName(_column));
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, -1);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        VoteImagesLocalDb.AddCommandParameter(cmd, "newValue", newValue);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static int UpdateColumn(Column _column, object newValue, String politicianKey)
      {
         return UpdateColumnByPoliticianKey(_column, newValue, politicianKey);
      }

      public static int DeleteByPoliticianKey(String politicianKey)
      {
        return DeleteByPoliticianKey(politicianKey, -1);
      }

      public static int DeleteByPoliticianKey(String politicianKey, int commandTimeout)
      {
        string cmdText = "DELETE FROM PoliticiansImagesData WHERE PoliticianKey=@PoliticianKey";
        DbCommand cmd = VoteImagesLocalDb.GetCommand(cmdText, commandTimeout);
        VoteImagesLocalDb.AddCommandParameter(cmd, "PoliticianKey", politicianKey);
        return VoteImagesLocalDb.ExecuteNonQuery(cmd);
      }

      public static string GetSelectCommandText(PoliticiansImagesDataTable.ColumnSet columnSet)
      {
        switch(columnSet)
        {
          case PoliticiansImagesDataTable.ColumnSet.All:
            return SelectAllCommandText;

          default:
            return null;
        }
      }

      static PoliticiansImagesData()
      {
        ColumnNameDictionary = ColumnDictionary.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
      }
    }

    #endregion voteimageslocal.PoliticiansImagesData
  }
}
