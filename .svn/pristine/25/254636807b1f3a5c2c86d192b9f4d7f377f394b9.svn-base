using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

namespace Vote.Master
{
  public partial class Security : VotePage
  {
    protected void Reset_User_Type_Radio_Buttons()
    {
      //RadioButtonList_User_Type.Items[RadioButtonList_User_Type.SelectedIndex].Selected = false;

      int items = RadioButtonList_User_Type.Items.Count;
      for (int i = 0; i <= RadioButtonList_User_Type.Items.Count - 1; i++)
      {
        RadioButtonList_User_Type.Items[i].Selected = false;
      }
    }
    protected void Check_User_Name()
    {
      if (string.IsNullOrEmpty(TextBox_User_Name.Text.Trim()))
        throw new ApplicationException("The User Name textbox is empty.");
    }
    protected void Check_User_Password()
    {
      if (!SecurePage.IsSuperUser)
      {
        if (string.IsNullOrEmpty(TextBox_User_Password.Text.Trim()))
          throw new ApplicationException("The User Password textbox is empty.");
      }
    }
    protected void Check_User_Not_Exist()
    {
      if (db.Is_Valid_Security(TextBox_User_Name.Text.Trim()))
        throw new ApplicationException("The User Already exists.");
    }
    protected void Check_User_Exist()
    {
      if (!db.Is_Valid_Security(TextBox_User_Name.Text.Trim()))
        throw new ApplicationException("The User Already exists.");
    }
    protected void Check_User_Name_Password()
    {
      //if (string.IsNullOrEmpty(TextBox_User_Name.Text.Trim()))
      //  throw new ApplicationException("The User Name textbox is empty.");
      Check_User_Name();

      //if (!SecurePage.IsSuperUser)
      //{
      //  if (string.IsNullOrEmpty(TextBox_User_Password.Text.Trim()))
      //    throw new ApplicationException("The User Password textbox is empty.");
      //}
      Check_User_Password();

      //if (db.Is_Valid_Security(TextBox_User_Name.Text.Trim()))
      //  throw new ApplicationException("The User Already exists.");
      Check_User_Not_Exist();
    }

    protected void Controls_Enabled_On_Entry()
    {
      TextBox_User_Name.Enabled = true;
      TextBox_User_Password.Enabled = true;

      RadioButtonList_User_Type.Enabled = true;

      Button_Different_User.Enabled = false;
      Button_Delete.Enabled = false;

      //Only Users enabled on entry
      ListBox_Users.Enabled = true;
      ListBox_Type.Enabled = false;
      ListBox_Design.Enabled = false;
      ListBox_Organization.Enabled = false;
      ListBox_State.Enabled = false;
      ListBox_County.Enabled = false;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = false;
    }
    protected void Controls_Enabled_Update_Master()
    {
      TextBox_User_Name.Enabled = true;
      TextBox_User_Password.Enabled = true;

      RadioButtonList_User_Type.Enabled = false;

      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;

      ListBox_Users.Enabled = true;
      ListBox_Type.Enabled = true;
      ListBox_Design.Enabled = true;
      ListBox_Organization.Enabled = true;
      ListBox_State.Enabled = true;
      ListBox_County.Enabled = false;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = true;
    }
    protected void Controls_Enabled_Update_Admin()
    {
      TextBox_User_Name.Enabled = false;
      TextBox_User_Password.Enabled = false;
      ListBox_Users.Enabled = false;
      RadioButtonList_User_Type.Enabled = false;
      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;
      ListBox_Design.Enabled = false;
      ListBox_Organization.Enabled = false;
      ListBox_State.Enabled = true;
      ListBox_County.Enabled = false;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = true;
    }
    protected void Controls_Enabled_Update_County()
    {
      TextBox_User_Name.Enabled = false;
      TextBox_User_Password.Enabled = false;
      ListBox_Users.Enabled = false;
      RadioButtonList_User_Type.Enabled = false;
      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;
      ListBox_Design.Enabled = false;
      ListBox_Organization.Enabled = false;
      ListBox_State.Enabled = true;
      ListBox_County.Enabled = true;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = true;
    }
    protected void Controls_Enabled_Update_Local()
    {
      TextBox_User_Name.Enabled = false;
      TextBox_User_Password.Enabled = false;
      ListBox_Users.Enabled = false;
      RadioButtonList_User_Type.Enabled = false;
      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;
      ListBox_Design.Enabled = false;
      ListBox_Organization.Enabled = false;
      ListBox_State.Enabled = true;
      ListBox_County.Enabled = true;
      ListBox_Local.Enabled = true;

      Button_Update_UserName_Pasword.Visible = true;
    }
    protected void Controls_Enabled_Update_Design()
    {
      TextBox_User_Name.Enabled = false;
      TextBox_User_Password.Enabled = false;
      ListBox_Users.Enabled = false;
      RadioButtonList_User_Type.Enabled = false;
      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;
      ListBox_Design.Enabled = true;
      ListBox_Organization.Enabled = false;
      ListBox_State.Enabled = false;
      ListBox_County.Enabled = false;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = true;
    }
    protected void Controls_Enabled_Update_Organization()
    {
      TextBox_User_Name.Enabled = false;
      TextBox_User_Password.Enabled = false;
      ListBox_Users.Enabled = false;
      RadioButtonList_User_Type.Enabled = false;
      Button_Different_User.Enabled = true;
      Button_Delete.Enabled = true;
      ListBox_Design.Enabled = false;
      ListBox_Organization.Enabled = true;
      ListBox_State.Enabled = false;
      ListBox_County.Enabled = false;
      ListBox_Local.Enabled = false;

      Button_Update_UserName_Pasword.Visible = true;
    }

    protected void Load_Users()
    {
      ListBox_Users.Items.Clear();
      ListBox_Type.Items.Clear();

      string SQL = string.Empty;
      SQL += "SELECT ";
      SQL += " UserName";
      SQL += ",UserSecurity";
      SQL += ",UserIsHasDataEntryAuthority";
      SQL += " FROM Security";
      SQL += " ORDER BY UserName";

      DataTable Security_Table = db.Table(SQL);
      foreach (DataRow Security_Row in Security_Table.Rows)
      {
        ListItem ListBox_User_Item = new ListItem();
        ListBox_User_Item.Value = Security_Row["UserName"].ToString();
        ListBox_User_Item.Text = Security_Row["UserName"].ToString();
        ListBox_Users.Items.Add(ListBox_User_Item);

        ListItem ListBox_Type_Item = new ListItem();
        ListBox_Type_Item.Value = Security_Row["UserSecurity"].ToString();
        ListBox_Type_Item.Text = Security_Row["UserSecurity"].ToString();
        if (Convert.ToBoolean(Security_Row["UserIsHasDataEntryAuthority"]) == false)
          ListBox_Type_Item.Text += "-N";
        else
          ListBox_Type_Item.Text += "-Y";
        ListBox_Type.Items.Add(ListBox_Type_Item);
      }
    }
    protected void Load_DesignCodes()
    {
      ListBox_Design.Items.Clear();
      string SQL = string.Empty;
      SQL += "SELECT ";
      SQL += " DomainDesignCode ";
      SQL += " FROM DomainDesigns ";
      SQL += " ORDER BY DomainDesignCode";

      DataTable DomainDesignsTable = db.Table(SQL);
      foreach (DataRow DomainDesignRow in DomainDesignsTable.Rows)
      {
        ListItem ListBox_Design_Item = new ListItem();
        ListBox_Design_Item.Value = DomainDesignRow["DomainDesignCode"].ToString();
        ListBox_Design_Item.Text = DomainDesignRow["DomainDesignCode"].ToString();
        ListBox_Design.Items.Add(ListBox_Design_Item);
      }
    }
    protected void Load_OrganizationCodes()
    {
      ListBox_Organization.Items.Clear();
      string SQL = string.Empty;
      SQL += "SELECT ";
      SQL += " OrganizationCode ";
      SQL += " FROM Organizations ";
      SQL += " ORDER BY OrganizationCode";

      DataTable Organization_Table = db.Table(SQL);
      foreach (DataRow Organization_Row in Organization_Table.Rows)
      {
        ListItem ListBox_Organization_Item = new ListItem();
        ListBox_Organization_Item.Value = Organization_Row["OrganizationCode"].ToString();
        ListBox_Organization_Item.Text = Organization_Row["OrganizationCode"].ToString();
        ListBox_Organization.Items.Add(ListBox_Organization_Item);
      }
    }
    protected void Load_StateCodes()
    {
      ListBox_State.Items.Clear();

      //ListItem ListBox_State_Item = new ListItem();
      //ListBox_State_Item.Value = "US";
      //ListBox_State_Item.Text = "US";
      //ListBox_State.Items.Add(ListBox_State_Item);

      DataTable States_Table = db.Table(sql.States_51());
      foreach (DataRow State_Row in States_Table.Rows)
      {
        ListItem ListBox_State_Item = new ListItem();
        ListBox_State_Item.Value = State_Row["StateCode"].ToString();
        ListBox_State_Item.Text = State_Row["StateCode"].ToString();
        ListBox_State.Items.Add(ListBox_State_Item);
      }
    }

    protected void Reload_All_Controls(string User_Name)
    {
      Load_Users();
      Load_DesignCodes();
      Load_OrganizationCodes();
      Load_StateCodes();

      if (!string.IsNullOrEmpty(User_Name))
      {
        TextBox_User_Name.Text = db.Security_Str(User_Name, "UserName");
        TextBox_User_Password.Text = db.Security_Str(User_Name, "UserPassword");

        Label_Type.Text = db.Security_Str(User_Name, "UserSecurity");
        Label_UserName.Text = db.Security_Str(User_Name, "UserName");
        Label_Design.Text = db.Security_Str(User_Name, "UserDesignCode");
        Label_Organization.Text = db.Security_Str(User_Name, "UserOrganizationCode");
        Label_State.Text = db.Security_Str(User_Name, "UserStateCode");
        Label_County.Text = db.Security_Str(User_Name, "UserCountyCode");
        Label_Local.Text = db.Security_Str(User_Name, "UserLocalCode");

        if (db.Security_User_Is_Has_DataEntry_Authority(User_Name) == true)
        {
          CheckBox_Has_Data_Entry_Authority.Checked = true;
          Label_Type.Text += "-Y";
        }
        else
        {
          CheckBox_Has_Data_Entry_Authority.Checked = false;
          Label_Type.Text += "-N";
        }
      }
      else
      {
        TextBox_User_Name.Text = string.Empty;
        TextBox_User_Password.Text = string.Empty;

        Label_Type.Text = string.Empty;
        Label_UserName.Text = string.Empty;
        Label_Design.Text = string.Empty;
        Label_Organization.Text = string.Empty;
        Label_State.Text = string.Empty;
        Label_County.Text = string.Empty;
        Label_Local.Text = string.Empty;

        CheckBox_Has_Data_Entry_Authority.Checked = false;
      }
    }
    protected void Reload_All_Controls()
    {
      Reload_All_Controls(string.Empty);
    }

    protected void Create_User()
    {
      string sql_Security_Insert = string.Empty;
      sql_Security_Insert += "INSERT INTO Security";
      sql_Security_Insert += "(";
      sql_Security_Insert += "UserName";
      sql_Security_Insert += ",UserPassword";
      sql_Security_Insert += ",UserSecurity";
      sql_Security_Insert += ",UserIsHasDataEntryAuthority";
      sql_Security_Insert += ")";
      sql_Security_Insert += "VALUES";
      sql_Security_Insert += "(";
      sql_Security_Insert += db.SQLLit(TextBox_User_Name.Text.Trim());
      sql_Security_Insert += "," + db.SQLLit(TextBox_User_Password.Text.Trim());
      sql_Security_Insert += "," + db.SQLLit(RadioButtonList_User_Type.SelectedValue);
      if (CheckBox_Has_Data_Entry_Authority.Checked)
        sql_Security_Insert += ",1";
      else
        sql_Security_Insert += ",0";

      sql_Security_Insert += ")";
      db.ExecuteSQL(sql_Security_Insert);
    }

    protected void Button_Update_UserName_Pasword_Click(object sender, EventArgs e)
    {
      try
      {
        Check_User_Name_Password();

        if (
          (TextBox_User_Name.Text.Trim().ToUpper() != Label_UserName.Text.ToUpper())
          && (db.Is_Valid_Security(TextBox_User_Name.Text.Trim()))
          )
          throw new ApplicationException("You can't cange the name to a user that already exists.");

        //Need to save for Load_TextBoxes_And_Labels
        string Updated_User = TextBox_User_Name.Text.Trim();

        //password needs to be done first because UserName is the key
        db.SecurityUpdate(Label_UserName.Text.Trim(), "UserPassword", TextBox_User_Password.Text.Trim());
        db.SecurityUpdate(Label_UserName.Text.Trim(), "UserName", TextBox_User_Name.Text.Trim());

        Reload_All_Controls(Updated_User);
        //Load_TextBoxes_And_Labels(Updated_User);
        Msg.Text = db.Ok("The user has been updated.");
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }

    }

    protected void RadioButtonList_User_Type_SelectedIndexChanged1(object sender, EventArgs e)
    {
      try
      {
        //Need to save for Reload_All_Controls
        string New_User = TextBox_User_Name.Text;
        Check_User_Name_Password();
        switch (RadioButtonList_User_Type.SelectedValue)
        {
          case "MASTER":
            Create_User();
            Controls_Enabled_Update_Master();
            Msg.Text = db.Ok("The Master User has been created with maximum capabilities."
              + " You may select a Design Code and/or Organization Code to limit the Mater User"
              + " to a particular design and/or organization.");
            break;
          case "ADMIN":
            Create_User();
            Controls_Enabled_Update_Admin();
            Msg.Text = db.Msg("The State Adminsitrator User has been created."
              + " You MUST now select the State to administer.");
            break;
          case "COUNTY":
            Create_User();
            Controls_Enabled_Update_County();
            Msg.Text = db.Msg("The County Adminsitrator User has been created."
              + " You MUST now select the State and County to administer.");
            break;
          case "LOCAL":
            Create_User();
            Controls_Enabled_Update_Local();
            Msg.Text = db.Msg("The Local District Adminsitrator User has been created."
              + " You MUST now select the State, County and Local District to administer.");
            break;
          case "DESIGN":
            Create_User();
            Controls_Enabled_Update_Design();
            break;
          case "ORGANIZATION":
            Create_User();
            Controls_Enabled_Update_Organization();
            break;
          case "ISSUES":
            Msg.Text = db.Fail("Administrators for Issues has not yet been implemented.");
            break;
          case "PARTIES":
            Msg.Text = db.Fail("Administrators for Parties has not yet been implemented.");
            break;
          default:
            break;
        }
        Reload_All_Controls(New_User);

        Reset_User_Type_Radio_Buttons();
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void Button_Different_User_Click(object sender, EventArgs e)
    {
      try
      {
        string User_Type = db.Security_Str(Label_UserName.Text.ToString(), "UserSecurity");
        switch (User_Type)
        {
          case "MASTER":
            break;
          case "ADMIN":
            if (string.IsNullOrEmpty(db.Security_Str(Label_UserName.Text.ToString(), "UserStateCode")))
              throw new ApplicationException("You need to select a State before proceeding.");
            break;
          case "COUNTY":
            break;
          case "LOCAL":
            break;
          case "DESIGN":
            break;
          case "ORGANIZATION":
            break;
          case "ISSUES":
            break;
          case "PARTIES":
            break;
          default:
            break;
        }

        Reload_All_Controls();
        Controls_Enabled_On_Entry();
        Msg.Text = db.Msg("Select a user from the Users List Box to edit an existing user."
          + " Or enter a new User name and password and select a user type to add another user.");

      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void Button_Delete_Click(object sender, EventArgs e)
    {
      try
      {
        string sql_delete = string.Empty;
        sql_delete += "DELETE FROM Security";
        sql_delete += " WHERE UserName = " + db.SQLLit(Label_UserName.Text);
        db.ExecuteSQL(sql_delete);


        Reload_All_Controls();
        Controls_Enabled_On_Entry();
        Msg.Text = db.Ok("The user has been deleted.");
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }

    }

    protected void ListBox_Users_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        string UserSecurity = db.Security_Str(ListBox_Users.SelectedItem.ToString(), "UserSecurity").ToUpper();
        switch (UserSecurity)
        {
          case "MASTER":
            Controls_Enabled_Update_Master();
            break;
          case "ADMIN":
            Controls_Enabled_Update_Admin();
            break;
          case "COUNTY":
            Controls_Enabled_Update_County();
            break;
          case "LOCAL":
            Controls_Enabled_Update_Local();
            break;
          case "DESIGN":
            Controls_Enabled_Update_Design();
            break;
          case "ORGANIZATION":
            Controls_Enabled_Update_Organization();
            break;
          case "ISSUES":
            break;
          case "PARTIES":
            break;
        }

        Reload_All_Controls(ListBox_Users.SelectedItem.ToString());

        Msg.Text = db.Msg("You may change the User Name, Password, or codes limiting the administrators capabilities.");
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }

    }

    protected void ListBox_Type_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        db.SecurityUpdate(Label_UserName.Text, "UserSecurity", ListBox_Type.SelectedItem.ToString());

        Reload_All_Controls(Label_UserName.Text);

        Msg.Text = db.Ok("The User has been updated.");
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void ListBox_Design_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        db.SecurityUpdate(TextBox_User_Name.Text.Trim(), "UserDesignCode", ListBox_Design.SelectedItem.ToString());
        Msg.Text = db.Ok("The user has been updated to permit administration for the Design whose code is: "
          + ListBox_Design.SelectedItem.ToString());
        //Needs to come aftger Msg because ListBox_Organization.SelectedItem is reset by Reload_All_Controls
        Reload_All_Controls(Label_UserName.Text.ToString());
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void ListBox_Organization_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        db.SecurityUpdate(TextBox_User_Name.Text.Trim(), "UserOrganizationCode", ListBox_Organization.SelectedItem.ToString());
        Msg.Text = db.Ok("The user has been updated to permit administration for the Oranization whose code is: "
          + ListBox_Organization.SelectedItem.ToString());
        //Needs to come aftger Msg because ListBox_Organization.SelectedItem is reset by Reload_All_Controls
        Reload_All_Controls(Label_UserName.Text.ToString());
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void ListBox_State_SelectedIndexChanged(object sender, EventArgs e)
    {
      try
      {
        //if (db.Security_Str(Label_UserName.Text, "UserSecurity") != "ADMIN")
        //  throw new ApplicationException("Only a State Administration User can identify a State to administer.");

        db.SecurityUpdate(Label_UserName.Text, "UserStateCode", ListBox_State.SelectedItem.ToString());

        Reload_All_Controls(Label_UserName.Text);

        Msg.Text = db.Ok("The State Administrator User has been updated.");
      }
      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      //if (db.User() != db.User_.Master)
      if (!SecurePage.IsSuperUser)
        SecurePage.HandleSecurityException();

      try
      {
        if (!IsPostBack)
        {
          Reload_All_Controls();
          Controls_Enabled_On_Entry();
        }
      }

      catch (Exception ex)
      {
        Reset_User_Type_Radio_Buttons();
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void Button_Update_Data_Entry_Authority_Click(object sender, EventArgs e)
    {
      try
      {
        Check_User_Name();
        Check_User_Exist();
        
        string SQL = " UPDATE Security";
        if (CheckBox_Has_Data_Entry_Authority.Checked)
          SQL += " SET UserIsHasDataEntryAuthority = 1";
        else
          SQL += " SET UserIsHasDataEntryAuthority = 0";
        SQL += " WHERE UserName = " + db.SQLLit(TextBox_User_Name.Text.Trim());
        db.ExecuteSQL(SQL);

        Reload_All_Controls(TextBox_User_Name.Text.Trim());

        Msg.Text = db.Ok("The user's authority to enter politician data has been updated.");
      }
      catch (Exception ex)
      {
        Msg.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }

    }

    #region Dead code


    //protected void xClear_User_Name_Password()
    //{
    //  TextBox_User_Name.Text = string.Empty;
    //  TextBox_User_Password.Text = string.Empty;
    //}

    #endregion Dead code

  }
}
