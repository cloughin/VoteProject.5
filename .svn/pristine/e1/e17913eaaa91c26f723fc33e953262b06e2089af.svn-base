using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using DocumentServices.Modules.Readers.MsgReader.Outlook;

namespace Vote
{
  public sealed class SimpleListItem
  {
    public string Text;
    public string Value;

    public SimpleListItem() {}

    public SimpleListItem(string value, string text)
    {
      Text = text;
      Value = value;
    }
  }

  public class HtmlBreak : Literal
  {
    public HtmlBreak(int n = 1)
    {
      n = Math.Max(1, n);
      switch (n)
      {
        case 1:
          Text = "<br />";
          break;
        case 2:
          Text = "<br /><br />";
          break;
        default:
        {
          var sb = new StringBuilder();
          for (var x = 1; x <= n; x++) sb.Append("<br />");
          Text = sb.ToString();
        }
          break;
      }
    }
  }

  public class HtmlNbsp : Literal
  {
    public HtmlNbsp()
    {
      Text = "&nbsp;";
    }
  }

  public class LocalDate : HtmlGenericControl
  {
    private static readonly long BaseTicks = new DateTime(1970, 1, 1).Ticks;

    public LocalDate(string format = null) : this(DateTime.UtcNow, format) {}

    public LocalDate(DateTime utcDate, string format = null) : base("span")
    {
      Attributes.Add("class", "localdate");
      Attributes.Add("ticks",
        (utcDate.Ticks - BaseTicks).ToString(CultureInfo.InvariantCulture));
      if (!string.IsNullOrWhiteSpace(format)) Attributes.Add("format", format);
    }

    public static string AsString(string format = null)
    {
      return new LocalDate(format).RenderToString();
    }

    public static string AsString(DateTime utcDate, string format = null)
    {
      return new LocalDate(utcDate, format).RenderToString();
    }
  }

  public static class Utility
  {
    public static string GetControlValue(Control control)
    {
      var textBox = control as TextBox;
      if (textBox != null) return textBox.Text;

      var listControl = control as ListControl;
      if (listControl != null) return listControl.SelectedValue;

      var htmlInputCheckBox = control as HtmlInputCheckBox;
      if (htmlInputCheckBox != null) return htmlInputCheckBox.Checked.ToString();

      var htmlInputHidden = control as HtmlInputHidden;
      if (htmlInputHidden != null) return htmlInputHidden.Value;

      throw new ApplicationException("Unsupported Control type");
    }

    public static void PopulateEmpty(DropDownList dropDownList,
      string text = "<none>")
    {
      dropDownList.Items.Clear();
      dropDownList.AddItem(text, string.Empty, true);
    }

    public static void PopulateEmpty(HtmlSelect dropDownList,
      string text = "<none>")
    {
      dropDownList.Items.Clear();
      dropDownList.AddItem(text, string.Empty, true);
    }

    public static void PopulateFromList(DropDownList dropDownList,
      IEnumerable<SimpleListItem> list, string valueToSelect = null)
    {
      dropDownList.Items.Clear();
      foreach (var item in list) dropDownList.AddItem(item.Text, item.Value, item.Value == valueToSelect);
    }

    public static void PopulateFromList(HtmlSelect dropDownList,
      IEnumerable<SimpleListItem> list, string valueToSelect = null)
    {
      dropDownList.Items.Clear();
      foreach (var item in list) dropDownList.AddItem(item.Text, item.Value, item.Value == valueToSelect);
    }

    public static void SetControlValue(Control control, string value)
    {
      var textBox = control as TextBox;
      if (textBox != null)
      {
        textBox.Text = value;
        return;
      }

      var listControl = control as ListControl;
      if (listControl != null)
      {
        // Don't throw exception if value not found, just select first
        if (listControl.Items.OfType<ListItem>()
          .Any(i => i.Value == value)) listControl.SelectedValue = value;
        else if (listControl.Items.Count > 0) listControl.SelectedIndex = 0;
        return;
      }

      var htmlInputCheckBox = control as HtmlInputCheckBox;
      if (htmlInputCheckBox != null)
      {
        bool isChecked;
        bool.TryParse(value, out isChecked);
        htmlInputCheckBox.Checked = isChecked;
        return;
      }

      var htmlInputHidden = control as HtmlInputHidden;
      if (htmlInputHidden != null)
      {
        htmlInputHidden.Value = value;
        return;
      }

      throw new ApplicationException("Unsupported Control type");
    }
  }
}