using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Net.Mail;
using System.Text.RegularExpressions;
using DB.Vote;
using System.Web.UI.WebControls;
using DB.VoteLog;
using System.IO;
using System.Data.Common;
using System.Text;

namespace Vote.Master
{
  public partial class AddressesPage : System.Web.UI.Page
  {
    #region Dynamic controls

    // Object to encapsulate info about each possible output column
    [Serializable]
    class OutputColumnInfo
    {
      public bool Include;
      public string IdName;
      public string LabelName;
      public string HeadingName;
      // If SqlName is null, indicates special processing needed.
      // Ie, it is not a direct transfer from a DB column.
      public string SqlName;

      public OutputColumnInfo Clone()
      {
        return new OutputColumnInfo
        {
          Include = Include,
          IdName = IdName,
          LabelName = LabelName,
          HeadingName = HeadingName,
          SqlName = SqlName
        };
      }

      // Keep this private -- it should only be accessed via
      // GetDefaultOutputColumnInfo(), which clones the underlying
      // object
      static OutputColumnInfo[] _DefaultOutputColumnInfo =
        new OutputColumnInfo[]
      {
        new OutputColumnInfo { Include = false, IdName = "Name", 
          LabelName = "Name", HeadingName = "Name", SqlName = null },
        new OutputColumnInfo { Include = true, IdName = "FirstName", 
          LabelName = "First Name", HeadingName = "FirstName", SqlName = "FirstName" },
        new OutputColumnInfo { Include = true, IdName = "LastName", 
          LabelName = "Last Name", HeadingName = "LastName", SqlName = "LastName" },
        new OutputColumnInfo { Include = true, IdName = "Address", 
          LabelName = "Address", HeadingName = "Address", SqlName = "Address" },
        new OutputColumnInfo { Include = true, IdName = "City", 
          LabelName = "City", HeadingName = "City", SqlName = "City" },
        new OutputColumnInfo { Include = true, IdName = "StateCode", 
          LabelName = "State Code", HeadingName = "State", SqlName = "StateCode" },
        new OutputColumnInfo { Include = true, IdName = "ZipPlus4", 
          LabelName = "Zip+4", HeadingName = "Zip", SqlName = null },
        new OutputColumnInfo { Include = false, IdName = "Zip5", 
          LabelName = "Zip5", HeadingName = "Zip5", SqlName = "Zip5" },
        new OutputColumnInfo { Include = false, IdName = "Zip4", 
          LabelName = "Zip4", HeadingName = "Zip4", SqlName = "Zip4" },
        new OutputColumnInfo { Include = true, IdName = "Email", 
          LabelName = "Email", HeadingName = "Email", SqlName = "Email" },
        new OutputColumnInfo { Include = true, IdName = "Phone", 
          LabelName = "Phone", HeadingName = "Phone", SqlName = "Phone" }
      };

      // Return a clone of the DefaultOutputColumnInfo
      internal static OutputColumnInfo[] GetDefaultOutputColumnInfo()
      {
        OutputColumnInfo[] result =
          new OutputColumnInfo[_DefaultOutputColumnInfo.Length];
        for (int inx = 0; inx < result.Length; inx++)
          result[inx] = _DefaultOutputColumnInfo[inx].Clone();
        return result;
      }
    }

    OutputColumnInfo[] CurrentOutputColumnInfo;

    private string GetStateCheckboxId(string stateCode)
    {
      return "include-" + stateCode;
    }

    private void BuildStatesCheckboxTable()
    {
      int columnCount = 8; // change this to control layout
      string[] stateCodes = StateCache.All51StateCodes.ToArray();

      HtmlTable table = new HtmlTable();
      table.Attributes["class"] = "tableAdmin";
      table.CellSpacing = 0;
      table.CellPadding = 0;

      int rowCount = (stateCodes.Length - 1) / columnCount + 1;
      for (int rowIndex = 0; rowIndex < rowCount; rowIndex++)
      {
        HtmlTableRow row = new HtmlTableRow();
        table.Rows.Add(row);
        for (int columnIndex = 0; columnIndex < columnCount; columnIndex++)
        {
          HtmlTableCell cell = new HtmlTableCell();
          cell.Attributes["class"] = "T";
          row.Cells.Add(cell);
          int stateIndex = columnIndex * rowCount + rowIndex;
          if (stateIndex >= stateCodes.Length)
            cell.InnerHtml = "&nbsp";
          else
          {
            string stateCode = stateCodes[stateIndex];
            HtmlInputCheckBox checkbox = new HtmlInputCheckBox();
            checkbox.ID = GetStateCheckboxId(stateCode);
            cell.Controls.Add(checkbox);
            cell.Controls.Add(new LiteralControl(StateCache.GetStateName(stateCodes[stateIndex])));
          }
        }
      }

      StatesPlaceHolder.Controls.Add(table);
    }

    private void SetAllStateCheckboxes(bool value)
    {
      foreach (var stateCode in StateCache.All51StateCodes)
      {
        string id = GetStateCheckboxId(stateCode);
        HtmlInputCheckBox checkbox = StatesPlaceHolder.FindControl(id)
          as HtmlInputCheckBox;
        if (checkbox != null)
          checkbox.Checked = value;
      }
    }

    private string GetColumnHeadingId(string idName)
    {
      return "columnHeading-" + idName;
    }

    private string GetColumnCheckBoxId(string idName)
    {
      return "columnCheck-" + idName;
    }

    // Add a column to the display of re-orderable output columns
    private void AddColumn(HtmlTable table, bool include, string idName, string labelName, 
      string headingName)
    {
      HtmlTableRow row;
      HtmlTableCell cell;
      ImageButton imageButton;
      LiteralControl literal;
      HtmlInputCheckBox checkbox;
      HtmlInputText textbox;

      row = new HtmlTableRow();
      table.Rows.Add(row);

      cell = new HtmlTableCell();
      cell.Attributes["class"] = "T";
      cell.Align = "center";
      row.Cells.Add(cell);
      imageButton = new ImageButton();
      imageButton.ID = "columnUp-" + idName;
      imageButton.ImageUrl = "/images/arrowupsmall.gif";
      imageButton.Click += new ImageClickEventHandler(ColumnReorderButton_Click);
      cell.Controls.Add(imageButton);
      literal = new LiteralControl("&nbsp;");
      cell.Controls.Add(literal);
      imageButton = new ImageButton();
      imageButton.ID = "columnDown-" + idName;
      imageButton.ImageUrl = "/images/arrowdownsmall.gif";
      imageButton.Click += new ImageClickEventHandler(ColumnReorderButton_Click);
      cell.Controls.Add(imageButton);

      cell = new HtmlTableCell();
      cell.Attributes["class"] = "T";
      row.Cells.Add(cell);
      checkbox = new HtmlInputCheckBox();
      checkbox.ID = GetColumnCheckBoxId(idName);
      checkbox.Checked = include;
      cell.Controls.Add(checkbox);
      literal = new LiteralControl(labelName);
      cell.Controls.Add(literal);

      cell = new HtmlTableCell();
      cell.Attributes["class"] = "T";
      row.Cells.Add(cell);
      textbox = new HtmlInputText();
      textbox.ID = GetColumnHeadingId(idName);
      textbox.Value = headingName;
      cell.Controls.Add(textbox);
    }

    private void AddColumn(HtmlTable table, OutputColumnInfo columnInfo)
    {
      AddColumn(table, columnInfo.Include, columnInfo.IdName, 
        columnInfo.LabelName, columnInfo.HeadingName);
    }

    private void BuildOutputColumnTable()
    {
      HtmlTable table = new HtmlTable();
      table.Attributes["class"] = "tableAdmin";
      table.CellSpacing = 0;
      table.CellPadding = 0;

      HtmlTableRow row;
      HtmlTableCell cell;

      // Create the headings
      row = new HtmlTableRow();
      table.Rows.Add(row);
      cell = new HtmlTableCell("th");
      row.Cells.Add(cell);
      cell.InnerText = "Reorder";
      cell.Width = "50";
      cell = new HtmlTableCell("th");
      row.Cells.Add(cell);
      cell.InnerText = "Include Column";
      cell.Align = "left";
      cell.Width = "150";
      cell = new HtmlTableCell("th");
      row.Cells.Add(cell);
      cell.InnerText = "Column Heading";
      cell.Align = "left";

      foreach (var columnInfo in CurrentOutputColumnInfo)
        AddColumn(table, columnInfo);

      OutputColumnPlaceHolder.Controls.Clear();
      OutputColumnPlaceHolder.Controls.Add(table);
    }

    private void UpdateCurrentOutputColumnInfo()
    {
      // Update the CurrentOutputColumnInfo from the form controls
      foreach (var columnInfo in CurrentOutputColumnInfo)
      {
        HtmlInputCheckBox checkbox = OutputColumnPlaceHolder.FindControl(
          GetColumnCheckBoxId(columnInfo.IdName)) as HtmlInputCheckBox;
        if (checkbox != null)
          columnInfo.Include = checkbox.Checked;
        HtmlInputText textbox = OutputColumnPlaceHolder.FindControl(
          GetColumnHeadingId(columnInfo.IdName)) as HtmlInputText;
        if (textbox != null)
          columnInfo.HeadingName = textbox.Value;
      }
    }

    private void WriteColumnHeadings(SimpleCSVWriter csvWriter,
      StringWriter stringWriter, List<OutputColumnInfo> outputColumns)
    {
      // In case the CSV required column headings
      foreach (var column in outputColumns)
        csvWriter.AddField(column.HeadingName);
      csvWriter.Write(stringWriter);
    }

    private void WriteRow(SimpleCSVWriter csvWriter,
      StringWriter stringWriter, List<OutputColumnInfo> outputColumns,
      DbDataReader dataReader)
    {
      // Write a single row of data to the memory-resident CSV
      foreach (var column in outputColumns)
      {
        if (column.SqlName == null) // a special (derived) column
        {
          switch (column.IdName)
          {
            case "Name":
              string firstName = dataReader["FirstName"] as string;
              string lastName = dataReader["LastName"] as string;
              if (string.IsNullOrWhiteSpace(firstName))
                if (string.IsNullOrWhiteSpace(lastName))
                  csvWriter.AddField(string.Empty);
                else
                  csvWriter.AddField(lastName);
              else if (string.IsNullOrWhiteSpace(lastName))
                csvWriter.AddField(lastName);
              else
                csvWriter.AddField(firstName + ' ' + lastName);
              break;

            case "ZipPlus4":
              string zip5 = dataReader["Zip5"] as string;
              string zip4 = dataReader["Zip4"] as string;
              if (string.IsNullOrWhiteSpace(zip5))
                csvWriter.AddField(string.Empty);
              else if (string.IsNullOrWhiteSpace(zip4))
                csvWriter.AddField(zip5);
              else
                csvWriter.AddField(zip5 + '-' + zip4);
              break;
          }
        }
        else
          csvWriter.AddField(dataReader[column.SqlName] as string);
      }
      csvWriter.Write(stringWriter);
    }

    #endregion Dynamic controls

    #region Control parsing and editing

    private List<string> GetDistrictCodes(int districtCodeLength)
    {
      // Return a list of district codes as strings, properly zero padded
      List<string> districtCodes = null;
      string districtCodeInput = LegislativeTextBox.Text.Trim();
      if (districtCodeInput != string.Empty)
        districtCodes = districtCodeInput.Split(',')
          .Select(code => code.Trim().ZeroPad(districtCodeLength))
          .ToList();
      return districtCodes;
    }

    private List<OutputColumnInfo> GetSelectedOutputColumns()
    {
      // Return a list of currently-selected output columns
      return CurrentOutputColumnInfo
        .Where(ci => ci.Include)
        .ToList();
    }

    private List<string> GetSelectedStates()
    {
      // Return a list of currently-selected state codes
      var selectedStates = new List<string>();
      foreach (string stateCode in StateCache.All51StateCodes)
      {
        string id = GetStateCheckboxId(stateCode);
        HtmlInputCheckBox checkbox = StatesPlaceHolder.FindControl(id)
          as HtmlInputCheckBox;
        if (checkbox != null && checkbox.Checked)
          selectedStates.Add(stateCode);
      }
      return selectedStates;
    }

    #endregion Control parsing and editing

    #region Event handlers

    void ColumnReorderButton_Click(object sender, ImageClickEventArgs e)
    {
      ImageButton imageButton = sender as ImageButton;
      if (imageButton != null)
      {
        // Parse the direction and IdName from the control ID
        // ID format: columnUp-<IdName> or columnDown-<IdName>
        Match match = Regex.Match(imageButton.ID,
          "^column(?<direction>Up|Down)-(?<idName>.+)$");
        if (match.Success)
        {
          string direction = match.Groups["direction"].Captures[0].Value;
          string idName = match.Groups["idName"].Captures[0].Value;
          int inx = Array.FindIndex(CurrentOutputColumnInfo, ci => ci.IdName == idName);
          if (inx >= 0)
            switch (direction)
            {
              case "Up":
                if (inx > 0)
                  Array.Reverse(CurrentOutputColumnInfo, inx - 1, 2);
                break;

              case "Down":
                if (inx < CurrentOutputColumnInfo.Length - 1)
                  Array.Reverse(CurrentOutputColumnInfo, inx, 2);
                break;
            }
        }
      }
    }

    protected void ClearAllStatesButton_Click(object sender, EventArgs e)
    {
      SetAllStateCheckboxes(false);
    }

    protected void DownloadButton_Click(object sender, EventArgs e)
    {
      try
      {
        List<string> selectedStates = GetSelectedStates();
        if (selectedStates.Count == 0)
          throw new VoteException("No states were selected");

        // If all 51 states are selected, we null the list to indicate no
        // state selection is needed
        if (selectedStates.Count == 51) selectedStates = null;

        // A sensibility check
        if (EmailFilterCheckBox.Checked && NoEmailFilterCheckBox.Checked)
          throw new VoteException("Both the 'with' and 'without' email filters are checked");

        // Parse the districts
        string districtColumnName = LegislativeFilterDropDownList.SelectedValue;
        int districtCodeLength = 3;
        if (districtColumnName == "CD")
          districtCodeLength = 2;
        List<string> districtCodes = GetDistrictCodes(districtCodeLength);
        if (LegislativeFilterCheckBox.Checked && districtCodes == null)
          throw new VoteException("The legislative filter was checked but no districts were entered");

        // Get the dates
        DateTime fromDate = DateTime.MinValue.Date;
        DateTime toDate = DateTime.MaxValue.Date;
        string fromDateString = FromDateTextBox.Text.Trim();
        string toDateString = ToDateTextBox.Text.Trim();
        if (fromDateString != string.Empty)
          if (!DateTime.TryParse(fromDateString, out fromDate))
            throw new VoteException("Invalid 'from' date");
        if (toDateString != string.Empty)
          if (!DateTime.TryParse(toDateString, out toDate))
            throw new VoteException("Invalid 'to' date");
        fromDate = fromDate.Date;
        toDate = toDate.Date;
        if (fromDate > toDate)
          throw new VoteException("The 'from' date exceeds the 'to' date");

        // Get the selected columns
        UpdateCurrentOutputColumnInfo();
        List<OutputColumnInfo> outputColumns = GetSelectedOutputColumns();
        if (outputColumns.Count == 0)
          throw new VoteException("No output columns were selected");

        // Set up the CSV objects
        StringWriter stringWriter = new StringWriter();
        SimpleCSVWriter csvWriter = new SimpleCSVWriter();
        if (OutputHeadingCheckBox.Checked) // column headings requested
          WriteColumnHeadings(csvWriter, stringWriter, outputColumns);

        // If the LegislativeFilterCheckBox is checked, we use the
        // DistrictAddressesView. Otherwise we use the Addresses table.
        if (LegislativeFilterCheckBox.Checked)
        {
          using (var reader = 
            DistrictAddressesView.GetDataReaderForAddressExtraction(
             selectedStates, NameFilterCheckBox.Checked, 
             AddressFilterCheckBox.Checked, EmailFilterCheckBox.Checked,
             NoEmailFilterCheckBox.Checked, PhoneFilterCheckBox.Checked, 
             fromDate, toDate, districtColumnName, districtCodes, 0))
             while (reader.Read())
               WriteRow(csvWriter, stringWriter, outputColumns, reader.DataReader);
        }
        else
        {
          using (var reader = 
            Addresses.GetDataReaderForAddressExtraction(
             selectedStates, NameFilterCheckBox.Checked, 
             AddressFilterCheckBox.Checked, EmailFilterCheckBox.Checked,
             NoEmailFilterCheckBox.Checked, PhoneFilterCheckBox.Checked, 
             fromDate, toDate, 0))
             while (reader.Read())
               WriteRow(csvWriter, stringWriter, outputColumns, reader.DataReader);
        }

        // Send the results back as a download
        MemoryStream memoryStream = new MemoryStream();
        byte[] data = Encoding.UTF8.GetBytes(stringWriter.ToString());
        memoryStream.Write(data, 0, data.Length);
        memoryStream.Position = 0;

        Response.Clear();
        Response.AddHeader("Content-Disposition", "attachment; filename=addresses.csv");
        Response.AddHeader("Content-Length", data.Length.ToString());
        Response.ContentType = "application/octet-stream";
        Response.Charset = "UTF-8";

        using (memoryStream)
          using (BinaryReader reader = new BinaryReader(memoryStream))
            Response.BinaryWrite(reader.ReadBytes(data.Length));
      }
      catch (Exception ex)
      {
        Feedback.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void UpdateAddressesFromLogButton_Click(object sender, EventArgs e)
    {
      try
      {
        int totalCount = 0;
        int transferredCount = 0;
        int insufficientContentCount = 0;
        int duplicateCount = 0;
        bool done = false; // error recovery retry
        while (!done)
          using (var reader = LogAddressesGoodNew.GetDataReaderByNotTransferredToAddresses(0))
          {
            try
            {
              while (reader.Read())
              {
                string address = reader.ParsedAddress.SafeString().Trim().ToUpperInvariant();
                string city = reader.ParsedCity.SafeString().Trim().ToUpperInvariant();
                string state = reader.ParsedStateCode.SafeString().Trim().ToUpperInvariant();
                string zip5 = reader.ParsedZip5.SafeString().Trim().ToUpperInvariant();
                string zip4 = reader.ParsedZip4.SafeString().Trim().ToUpperInvariant();
                string email = reader.Email.SafeString().Trim();
                totalCount++;
                // We need address, city, state, at a minimum
                if (address != string.Empty && city != string.Empty &&
                  state != string.Empty)
                {
                  int matchCount = Addresses.CountByEmailAddressCityStateCodeZip5Zip4(
                    email, address, city, state, zip5, zip4);
                  if (matchCount == 0) // it's new
                  {
                    transferredCount++;
                    //FOR CURT
                    Addresses.Insert(
                      string.Empty,
                      string.Empty,
                      address,
                      city,
                      state,
                      zip5,
                      zip4,
                      email,
                      string.Empty,
                      reader.DateStamp.Date,
                      "LOG",
                      false,
                      // since these are log entries, any email address 
                      // indicates an opt-in for sample ballots
                      email != string.Empty,
                      VoteDb.DateTimeMin,
                      string.Empty,
                      string.Empty,
                      string.Empty,
                      string.Empty,
                      string.Empty,
                      VoteDb.DateTimeMin);
                  }
                  else duplicateCount++;
                }
                else insufficientContentCount++;
                LogAddressesGoodNew.UpdateTransferredToAddressesById(true, reader.Id);
              }
              done = true; // no more retries needed
            }
            catch { }
          }
        Feedback.Text = db.Ok(string.Format("<br />" +
          "{0} log rows read<br />" +
          "{1} addresses transferred<br />" +
          "{2} addresses had insufficient information<br />" +
          "{3} addresses were exact duplicates",
          totalCount,
          transferredCount,
          insufficientContentCount,
          duplicateCount));
      }
      catch (Exception ex)
      {
        Feedback.Text = db.Fail(ex.Message);
        db.Log_Error_Admin(ex);
      }
    }

    protected void SelectAllStatesButton_Click(object sender, EventArgs e)
    {
      SetAllStateCheckboxes(true);
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      Feedback.Text = string.Empty;
      if (IsPostBack)
      {
        CurrentOutputColumnInfo = ViewState["OutputColumnInfo"] as OutputColumnInfo[];
      }
      else
      {
        CurrentOutputColumnInfo = OutputColumnInfo.GetDefaultOutputColumnInfo();
        if (!SecurePage.IsMasterUser)
          SecurePage.HandleSecurityException();
      }
      BuildStatesCheckboxTable();
      BuildOutputColumnTable();
    }

    protected override void OnLoadComplete(EventArgs e)
    {
      base.OnLoadComplete(e);

      // Save dynamic column info in ViewState
      UpdateCurrentOutputColumnInfo();
      ViewState["OutputColumnInfo"] = CurrentOutputColumnInfo;
      BuildOutputColumnTable();
    }
    #endregion Event handlers
  }
}