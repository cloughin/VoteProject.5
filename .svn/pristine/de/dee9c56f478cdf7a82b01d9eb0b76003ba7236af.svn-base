using System;
using System.Configuration;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace VotePrebuild
{
  class Program
  {
    const string ConfigKey = "VotePrebuild";

    static void Main()
    {
      try
      {
        // Get the configuration
        var settings = ConfigurationManager.AppSettings[ConfigKey];
        if (string.IsNullOrWhiteSpace(settings))
          throw new Exception(string.Format("Could not get AppSetting '{0}'", ConfigKey));

        // Parse the attributes
        string dataMainPath = null;
        string requireMainPath = null;
        var match = Regex.Match(settings, @"(?:\s*(?<attribute>[_a-zA-Z][_.a-zA-Z0-9-]+)\s*=\s*""\s*(?<value>[^""]*)\s*""\s*(?:;|$))+");
        if (!match.Success)
          throw new Exception(string.Format("Could not parse the settings '{0}'", settings));
        var valueIndex = 0;
        foreach (var attributeCapture in match.Groups["attribute"].Captures.Cast<Capture>())
        {
          var attribute = attributeCapture.Value;
          var value = match.Groups["value"].Captures[valueIndex++].Value;
          switch (attribute)
          {
            case "data-main":
              dataMainPath = value;
              break;

            case "require-main":
              requireMainPath = value;
              break;

            default:
              throw new Exception(string.Format("Unidentified attribute in settings '{0}'", attribute));
          }
        }

        // open the dataMain file and locate the data-main attribute
        Debug.Assert(dataMainPath != null, "dataMainPath != null");
        var dataMainContent = File.ReadAllText(dataMainPath);
        var dataMainMatch = Regex.Match(dataMainContent,
         @"\s+data-main\s*=\s*""/js/require-main.js\?v=(?<version>[1-9][0-9]*)""",
         RegexOptions.IgnoreCase);
        if (!match.Success)
          throw new Exception("Could not find matching 'data-main' attribute in data-main file");
        var dataMainCaptures = dataMainMatch.Groups["version"].Captures;
        if (dataMainCaptures.Count != 1)
          throw new Exception("Expecting exactly 1 matching 'data-main' attribute in data-main file");
        var dataMainVersion = int.Parse(dataMainCaptures[0].Value);

        // open the requireMain file and locate the urlArgs attribute
        Debug.Assert(requireMainPath != null, "requireMainPath != null");
        var requireMainContent = File.ReadAllText(requireMainPath);
        var requireMainMatch = Regex.Match(requireMainContent,
         @"\s*urlArgs\s*:\s*""v=(?<version>[1-9][0-9]*)""",
         RegexOptions.IgnoreCase);
        if (!match.Success)
          throw new Exception("Could not find matching 'urlArgs' attribute in require-main file");
        var requireMainCaptures = requireMainMatch.Groups["version"].Captures;
        if (requireMainCaptures.Count != 1)
          throw new Exception("Expecting exactly 1 matching 'urlArgs' attribute in data-main file");
        var requireMainVersion = int.Parse(requireMainCaptures[0].Value);

        // use higher version
        var newVersion = (Math.Max(dataMainVersion, requireMainVersion) + 1)
          .ToString(CultureInfo.InvariantCulture);

        // replace version in each file with new version
        dataMainContent = dataMainContent.Substring(0, dataMainCaptures[0].Index) +
          newVersion +
          dataMainContent.Substring(dataMainCaptures[0].Index +
            dataMainCaptures[0].Length);
        requireMainContent =
          requireMainContent.Substring(0, requireMainCaptures[0].Index) +
            newVersion +
            requireMainContent.Substring(requireMainCaptures[0].Index +
              requireMainCaptures[0].Length);

        // write back the new files
        File.WriteAllText(dataMainPath, dataMainContent);
        File.WriteAllText(requireMainPath, requireMainContent);

        Console.WriteLine("New version = {0}", newVersion);
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
      }
      finally
      {
        Console.Write("Press any key to exit");
        Console.ReadKey();
      }
    }
  }
}
