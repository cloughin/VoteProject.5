using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using DB;
using DB.Vote;

namespace Vote.Reports
{
  internal sealed class BallotReportResponsive : ResponsiveReport
  {
    #region Private

    private readonly BallotReportDataManager _DataManager =
      new BallotReportDataManager();

    private int _TotalContests;

    private string _ElectionKey;
    private string _StateElectionKey;
    private string _StateCode;
    //private string _Congress;
    ////private string _StateSenate;
    //private string _StateHouse;
    private string _CountyCode;
    //private bool _UseExplorer;

    private sealed class StateFilter : ReportDataManager<DataRow>.FilterBy
    {
      public override bool Filter(DataRow row)
      {
        return string.IsNullOrWhiteSpace(row.CountyCode()) && !row.IsRunningMate();
      }
    }

    private sealed class CountyFilter : ReportDataManager<DataRow>.FilterBy
    {
      public override bool Filter(DataRow row)
      {
        return !string.IsNullOrWhiteSpace(row.CountyCode()) &&
          string.IsNullOrWhiteSpace(row.LocalCode()) && !row.IsRunningMate();
      }
    }

    private sealed class LocalFilter : ReportDataManager<DataRow>.FilterBy
    {
      public override bool Filter(DataRow row)
      {
        return !string.IsNullOrWhiteSpace(row.LocalCode()) && !row.IsRunningMate();
      }
    }

    private sealed class OneLocalFilter : ReportDataManager<DataRow>.FilterBy
    {
      private readonly string _LocalCode;

      public OneLocalFilter(string localCode)
      {
        _LocalCode = localCode;
      }

      public override bool Filter(DataRow row)
      {
        return row.LocalCode() == _LocalCode && !row.IsRunningMate();
      }
    }

    private sealed class BallotOrderBy : ReportDataManager<DataRow>.OrderBy
    {
      public override int Compare(DataRow row1, DataRow row2)
      {
        var result = row1.OfficeOrder()
          .CompareTo(row2.OfficeOrder());
        if (result != 0) return result;
        result = row1.OfficeOrderWithinLevel()
          .CompareTo(row2.OfficeOrderWithinLevel());
        if (result != 0) return result;
        result = string.Compare(row1.OfficeKey(), row2.OfficeKey(),
          StringComparison.OrdinalIgnoreCase);
        if (result != 0) return result;
        result = row1.OrderOnBallot()
          .CompareTo(row2.OrderOnBallot());
        if (result != 0) return result;
        result = string.Compare(row1.LastName(), row2.LastName(),
          StringComparison.OrdinalIgnoreCase);
        if (result != 0) return result;
        return string.Compare(row1.FirstName(), row2.FirstName(),
          StringComparison.OrdinalIgnoreCase);
      }
    }

    private sealed class BallotReportDataManager : ReportDataManager<DataRow>
    {
      private string ElectionKey { get; set; }

      public void GetData(string electionKey, string congress, string stateSenate,
        string stateHouse, string countyCode)
      {
        ElectionKey = electionKey;
        DataTable = ElectionsPoliticians.GetSampleBallotData(electionKey, congress,
          stateSenate, stateHouse, countyCode);
      }

      public List<IGrouping<string, DataRow>> GetOfficeGroups(
        FilterBy filterBy = null, OrderBy orderBy = null)
      {
        var offices = GetDataSubset(filterBy, orderBy ?? new BallotOrderBy())
          .GroupBy(row => row.OfficeKey());
        if (Elections.IsPrimaryElection(ElectionKey)) offices = FilterUncontestedOffices(offices);
        return offices.ToList();
      }

      public List<IGrouping<string, DataRow>> GetLocalGroups(
        FilterBy filterBy = null, OrderBy orderBy = null)
      {
        return GetDataSubset(filterBy, orderBy ?? new BallotOrderBy())
          .GroupBy(row => row.LocalCode())
          .ToList();
      }

      public DataRow GetRunningMate(string officeKey, string politicianKey)
      {
        return DataTable.Rows.OfType<DataRow>()
          .FirstOrDefault(row => row.OfficeKey()
            .IsEqIgnoreCase(officeKey) && row.RunningMateKey()
              .IsEqIgnoreCase(politicianKey) && row.IsRunningMate());
      }
    }

    private Control GenerateReport(string electionKey, string congress,
      string stateSenate, string stateHouse, string countyCode,
      out int totalContests)
    {
      _ElectionKey = electionKey;
      _StateElectionKey = Elections.GetStateElectionKeyFromKey(_ElectionKey);
      _StateCode = Elections.GetStateCodeFromKey(_ElectionKey);
      //_Congress = congress;
      //_StateSenate = stateSenate;
      //_StateHouse = stateHouse;
      _CountyCode = countyCode;
      //_UseExplorer = useExplorer;

      _DataManager.GetData(_ElectionKey, congress, stateSenate, stateHouse,
        _CountyCode);

      if (Elections.IsStateElection(_ElectionKey))
        ReportStateContests();

      if (Elections.IsStateElection(_ElectionKey) ||
        Elections.IsCountyElection(_ElectionKey))
        ReportCountyContests();

      if (Elections.IsLocalElection(_ElectionKey))
        ReportLocalContestsForOneLocal();
      else
        ReportLocalContestsForAllLocals();

      totalContests = _TotalContests;
      return ReportContainer.AddCssClasses("ballot-report");

    }

    private void ReportStateContests()
    {
      var offices = _DataManager.GetOfficeGroups(new StateFilter());
      var officesDiv = new HtmlGenericControl("div").AddTo(ReportContainer, "office-cells accordion-content");
      foreach (var office in offices)
      {
        if (ReportOneOffice(_StateElectionKey, office, officesDiv))
          _TotalContests++;
      }
    }

    private void ReportCountyContests()
    {
      var offices = _DataManager.GetOfficeGroups(new CountyFilter());
      if (offices.Count == 0) return;

      var container = new HtmlGenericControl("div").AddTo(ReportContainer, 
        "county-contests no-accordion avoid-page-break");

      var countyKey = Elections.GetCountyElectionKeyFromKey(_ElectionKey,
        _StateCode, _CountyCode);
      var countyName = CountyCache.GetCountyName(_StateCode, _CountyCode);
      new HtmlGenericControl("div") { InnerText = countyName }.AddTo(container, "offices-heading accordion-header");

      var officesDiv = new HtmlGenericControl("div").AddTo(container, "office-cells accordion-content");
      foreach (var office in offices)
      {
        if (ReportOneOffice(countyKey, office, officesDiv))
          _TotalContests++;
      }
    }

    private void ReportLocalContestsForOneLocal()
    {
      var localCode = Elections.GetLocalCodeFromKey(_ElectionKey);
      var offices = _DataManager.GetOfficeGroups(new OneLocalFilter(localCode));
      if (offices.Count == 0) return;

      var container = new HtmlGenericControl("div").AddTo(ReportContainer, "one-local-contests no-accordion");

      var localInfo = offices.First()
        .First();
      var localDistrict = localInfo.LocalDistrict();
      new HtmlGenericControl("div") { InnerText = localDistrict }.AddTo(container, "offices-heading accordion-header");

      var officesDiv = new HtmlGenericControl("div").AddTo(container, "office-cells accordion-content");
      foreach (var office in offices)
      {
        if (ReportOneOffice(_ElectionKey, office, officesDiv))
          _TotalContests++;
      }
    }

    private void ReportLocalContestsForAllLocals()
    {
      var locals = _DataManager.GetLocalGroups(new LocalFilter());
      if (locals.Count == 0) return;

      var districtsContainer = new HtmlGenericControl("div").AddTo(ReportContainer, "local-districts-header print-current-state");
      new HtmlGenericControl("div") { InnerText = "Local District Elections" }.AddTo(districtsContainer, "accordion-header");
      var districtsContent = new HtmlGenericControl("div").AddTo(districtsContainer, "accordion-content local-districts-content print-current-state no-print-closed");

      foreach (var local in locals)
      {
        var localInfo = local.First();
        var localCode = localInfo.LocalCode();
        var localDistrict = localInfo.LocalDistrict();
        var localKey = Elections.GetLocalElectionKeyFromKey(_ElectionKey,
          _StateCode, _CountyCode, localCode);
        new HtmlGenericControl("div") { InnerText = localDistrict }.AddTo(districtsContent, "offices-heading accordion-header");
        var offices = local.GroupBy(row => row.OfficeKey());
        var officesDiv = new HtmlGenericControl("div").AddTo(districtsContent, "office-cells accordion-content");
        foreach (var office in offices)
        {
          if (ReportOneOffice(localKey, office, officesDiv))
            _TotalContests++;
        }
      }
    }

    private bool ReportOneOffice(string electionKey, IEnumerable<DataRow> office, Control container)
    {
      var candidates = office.ToList();
      var officeInfo = candidates.First();
      var officeKey = officeInfo.OfficeKey();

      if (!StateCache.GetShowUnopposed(_StateCode))
      {
        var unopposed = Elections.IsPrimaryElection(electionKey)
          ? candidates.Count <= officeInfo.PrimaryPositions()
          : candidates.Count <= officeInfo.ElectionPositions();
        if (unopposed) return false;
      }

      var content = new HtmlGenericControl("div").AddTo(container, "office-cell");
      content = new HtmlGenericControl("div").AddTo(content, "office-cell-inner");

      var officeHeadingDev = new HtmlGenericControl("div").AddTo(content, "office-heading");
      var formattedOfficeName = FormatOfficeNameForBallot(officeInfo);
      new HtmlGenericControl("div") { InnerHtml = formattedOfficeName }.AddTo(officeHeadingDev, "office-heading-name");

      var voteForWording = officeInfo.VoteForWording()
        .Trim();
      if (string.IsNullOrWhiteSpace(voteForWording))
        voteForWording = "(Vote for not more than one)";
      new HtmlGenericControl("div") { InnerText = voteForWording }.AddTo(officeHeadingDev, "office-heading-vote-for");

      CreateCompareOrIntroAnchor(officeHeadingDev, candidates, electionKey, officeKey);

      foreach (var candidate in candidates)
        ReportOneCandidate(content, candidate);

      if (StateCache.GetShowWriteIn(_StateCode))
      {
        var writeInWording = officeInfo.WriteInWording()
          .Trim();
        if (writeInWording == string.Empty) writeInWording = "Write in";
        for (var i = 0; i < officeInfo.WriteInLines(); i++)
        {
          var writeInCell = new HtmlGenericControl("div").AddTo(content, "candidate-cell write-in-cell");
          writeInCell = new HtmlGenericControl("div").AddTo(writeInCell, "candidate-cell-inner");
          new HtmlInputCheckBox().AddTo(writeInCell, "kalypto candidate-checkbox");
          new HtmlGenericControl("span") { InnerText = writeInWording }.AddTo(writeInCell, "write-in-wording");
          new HtmlInputText().AddTo(writeInCell, "write-in-text").Attributes["placeholder"] = "Enter candidate name";
        }
      }

      return true;
    }

    private static string FormatOfficeNameForBallot(DataRow officeInfo)
    {
      var officeKey = officeInfo.OfficeKey();
      var officeName = Offices.FormatOfficeName(officeInfo, "</span><span>");
      if (Offices.IsCountyOffice(officeKey) || Offices.IsLocalOffice(officeKey))
        officeName += "</span><span>" +
          CountyCache.GetCountyName(Offices.GetStateCodeFromKey(officeKey),
            Offices.GetCountyCodeFromKey(officeKey));
      if (Offices.IsLocalOffice(officeKey))
        officeName += "</span><span>" + officeInfo.LocalDistrict();
      return "<span>" + officeName + "</span>";
    }

    private void ReportOneCandidate(Control container, DataRow politician)
    {
      var isRunningMateOffice = politician.IsRunningMateOffice() && 
        !Elections.IsPrimaryElection(_ElectionKey);

      var content = new HtmlGenericControl("div").AddTo(container, "candidate-cell");
      content = new HtmlGenericControl("div").AddTo(content, "candidate-cell-inner");

      var politicianKey = politician.PoliticianKey();

      new HtmlInputCheckBox().AddTo(content, "kalypto candidate-checkbox");

      var nameContainer = new HtmlGenericControl("div").AddTo(content, "candidate-name");
      var showParty = !Elections.IsPrimaryElection(politician.ElectionKey());
      var showIncumbent = StateCache.GetIsIncumbentShownOnBallots(_StateCode) &&
       politician.IsIncumbent();
      FormatCandidateNameAndParty(nameContainer, politician, showIncumbent, showParty);

      var imageContainer = new HtmlGenericControl("div").AddTo(content, "candidate-image");
      CreatePoliticianImageTag(politicianKey, ImageSize100, string.Empty).AddTo(imageContainer);

      DataRow runningMate = null;
      if (isRunningMateOffice)
      {
        var runningMateKey = politician.RunningMateKey();
        runningMate = _DataManager.GetRunningMate(politician.OfficeKey(),
          runningMateKey);
        if (runningMate != null)
        {
          CreatePoliticianImageTag(runningMateKey, ImageSize100, string.Empty).AddTo(imageContainer, "running-mate-image");
        }
      }

      var infoContainer = new HtmlGenericControl("div").AddTo(content, "candidate-info");

      if (isRunningMateOffice && runningMate != null)
        FormatCandidateNameAndParty(nameContainer, runningMate, false, false);

      FormatWebAddress(infoContainer, politician);
      FormatSocialMedia(infoContainer, politician);
      FormatMoreInfoLink(infoContainer, politician);
    }

    #endregion Private

    public static Control GetReport(string electionKey, string congress,
      string stateSenate, string stateHouse, string countyCode,
      out int officeContests)
    {
      var reportObject = new BallotReportResponsive();
      return reportObject.GenerateReport(electionKey, congress, stateSenate,
        stateHouse, countyCode, out officeContests);
    }
  }
}